
Autonomous_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002692  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  00002692  00002726  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  0080009e  0080009e  00002764  2**0
                  ALLOC
  3 .stab         00002994  00000000  00000000  00002764  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000899  00000000  00000000  000050f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000003a0  00000000  00000000  00005998  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000332a  00000000  00000000  00005d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010fc  00000000  00000000  00009062  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002037  00000000  00000000  0000a15e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c08  00000000  00000000  0000c198  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f66  00000000  00000000  0000cda0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020de  00000000  00000000  0000dd06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000fde4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__ctors_end>
       4:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__vector_1>
       8:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__vector_2>
       c:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <__vector_3>
      10:	0c 94 cb 0c 	jmp	0x1996	; 0x1996 <__vector_4>
      14:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__vector_5>
      18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      28:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <__vector_10>
      2c:	0c 94 2e 07 	jmp	0xe5c	; 0xe5c <__vector_11>
      30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      34:	0c 94 47 0d 	jmp	0x1a8e	; 0x1a8e <__vector_13>
      38:	0c 94 70 0d 	jmp	0x1ae0	; 0x1ae0 <__vector_14>
      3c:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <__vector_15>
      40:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      48:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      4c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      54:	d0 00       	.word	0x00d0	; ????
      56:	99 00       	.word	0x0099	; ????
      58:	99 00       	.word	0x0099	; ????
      5a:	99 00       	.word	0x0099	; ????
      5c:	99 00       	.word	0x0099	; ????
      5e:	99 00       	.word	0x0099	; ????
      60:	99 00       	.word	0x0099	; ????
      62:	99 00       	.word	0x0099	; ????
      64:	99 00       	.word	0x0099	; ????
      66:	99 00       	.word	0x0099	; ????
      68:	99 00       	.word	0x0099	; ????
      6a:	99 00       	.word	0x0099	; ????
      6c:	99 00       	.word	0x0099	; ????
      6e:	99 00       	.word	0x0099	; ????
      70:	99 00       	.word	0x0099	; ????
      72:	99 00       	.word	0x0099	; ????
      74:	99 00       	.word	0x0099	; ????
      76:	99 00       	.word	0x0099	; ????
      78:	af 00       	.word	0x00af	; ????
      7a:	f7 00       	.word	0x00f7	; ????
      7c:	99 00       	.word	0x0099	; ????
      7e:	99 00       	.word	0x0099	; ????
      80:	ac 00       	.word	0x00ac	; ????
      82:	b8 00       	.word	0x00b8	; ????
      84:	be 00       	.word	0x00be	; ????
      86:	b5 00       	.word	0x00b5	; ????
      88:	bb 00       	.word	0x00bb	; ????
      8a:	99 00       	.word	0x0099	; ????
      8c:	99 00       	.word	0x0099	; ????
      8e:	99 00       	.word	0x0099	; ????
      90:	99 00       	.word	0x0099	; ????
      92:	99 00       	.word	0x0099	; ????
      94:	99 00       	.word	0x0099	; ????
      96:	99 00       	.word	0x0099	; ????
      98:	99 00       	.word	0x0099	; ????
      9a:	b2 00       	.word	0x00b2	; ????
      9c:	99 00       	.word	0x0099	; ????
      9e:	e3 00       	.word	0x00e3	; ????
      a0:	1b 01       	movw	r2, r22
      a2:	ed 00       	.word	0x00ed	; ????
      a4:	09 01       	movw	r0, r18
      a6:	99 00       	.word	0x0099	; ????
      a8:	99 00       	.word	0x0099	; ????
      aa:	99 00       	.word	0x0099	; ????
      ac:	99 00       	.word	0x0099	; ????
      ae:	99 00       	.word	0x0099	; ????
      b0:	99 00       	.word	0x0099	; ????
      b2:	99 00       	.word	0x0099	; ????
      b4:	99 00       	.word	0x0099	; ????
      b6:	99 00       	.word	0x0099	; ????
      b8:	99 00       	.word	0x0099	; ????
      ba:	00 01       	movw	r0, r0
      bc:	99 00       	.word	0x0099	; ????
      be:	99 00       	.word	0x0099	; ????
      c0:	99 00       	.word	0x0099	; ????
      c2:	99 00       	.word	0x0099	; ????
      c4:	99 00       	.word	0x0099	; ????
      c6:	99 00       	.word	0x0099	; ????
      c8:	99 00       	.word	0x0099	; ????
      ca:	99 00       	.word	0x0099	; ????
      cc:	99 00       	.word	0x0099	; ????
      ce:	99 00       	.word	0x0099	; ????
      d0:	99 00       	.word	0x0099	; ????
      d2:	99 00       	.word	0x0099	; ????
      d4:	99 00       	.word	0x0099	; ????
      d6:	c1 00       	.word	0x00c1	; ????
      d8:	99 00       	.word	0x0099	; ????
      da:	99 00       	.word	0x0099	; ????
      dc:	99 00       	.word	0x0099	; ????
      de:	e8 00       	.word	0x00e8	; ????
      e0:	20 01       	movw	r4, r0
      e2:	f2 00       	.word	0x00f2	; ????
      e4:	12 01       	movw	r2, r4

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf e5       	ldi	r28, 0x5F	; 95
      ec:	d8 e0       	ldi	r29, 0x08	; 8
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
      f2:	10 e0       	ldi	r17, 0x00	; 0
      f4:	a0 e6       	ldi	r26, 0x60	; 96
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	e2 e9       	ldi	r30, 0x92	; 146
      fa:	f6 e2       	ldi	r31, 0x26	; 38
      fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x10>
      fe:	05 90       	lpm	r0, Z+
     100:	0d 92       	st	X+, r0
     102:	ae 39       	cpi	r26, 0x9E	; 158
     104:	b1 07       	cpc	r27, r17
     106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0xc>

00000108 <__do_clear_bss>:
     108:	10 e0       	ldi	r17, 0x00	; 0
     10a:	ae e9       	ldi	r26, 0x9E	; 158
     10c:	b0 e0       	ldi	r27, 0x00	; 0
     10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
     110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
     112:	a7 3c       	cpi	r26, 0xC7	; 199
     114:	b1 07       	cpc	r27, r17
     116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
     118:	0e 94 20 02 	call	0x440	; 0x440 <main>
     11c:	0c 94 47 13 	jmp	0x268e	; 0x268e <_exit>

00000120 <__bad_interrupt>:
     120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <BlueToothMode_SuperLoop>:
		BlueToothMode_SuperLoop();
	}	
}

void BlueToothMode_SuperLoop()
{
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	0f 92       	push	r0
     12a:	cd b7       	in	r28, 0x3d	; 61
     12c:	de b7       	in	r29, 0x3e	; 62
	WHEEL_Stop ();
     12e:	0e 94 8d 05 	call	0xb1a	; 0xb1a <WHEEL_Stop>
	u8 BlueToothValue;
	while(1)
	{	
		BLUETOOTH_ReceiveChar(&BlueToothValue);
     132:	ce 01       	movw	r24, r28
     134:	01 96       	adiw	r24, 0x01	; 1
     136:	0e 94 82 02 	call	0x504	; 0x504 <BLUETOOTH_ReceiveChar>
		switch(BlueToothValue)
     13a:	89 81       	ldd	r24, Y+1	; 0x01
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	c0 97       	sbiw	r24, 0x30	; 48
     140:	89 34       	cpi	r24, 0x49	; 73
     142:	91 05       	cpc	r25, r1
     144:	b0 f7       	brcc	.-20     	; 0x132 <BlueToothMode_SuperLoop+0xe>
     146:	86 5d       	subi	r24, 0xD6	; 214
     148:	9f 4f       	sbci	r25, 0xFF	; 255
     14a:	fc 01       	movw	r30, r24
     14c:	ee 0f       	add	r30, r30
     14e:	ff 1f       	adc	r31, r31
     150:	05 90       	lpm	r0, Z+
     152:	f4 91       	lpm	r31, Z
     154:	e0 2d       	mov	r30, r0
     156:	09 94       	ijmp
		{
			case 'F' :
			WHEEL_MoveForward();
     158:	0e 94 59 05 	call	0xab2	; 0xab2 <WHEEL_MoveForward>
			break;
     15c:	ea cf       	rjmp	.-44     	; 0x132 <BlueToothMode_SuperLoop+0xe>
			
			case 'B' :
			WHEEL_MoveBackward ();
     15e:	0e 94 73 05 	call	0xae6	; 0xae6 <WHEEL_MoveBackward>
			break;
     162:	e7 cf       	rjmp	.-50     	; 0x132 <BlueToothMode_SuperLoop+0xe>
			
			case 'S' :
			WHEEL_Stop ();
     164:	0e 94 8d 05 	call	0xb1a	; 0xb1a <WHEEL_Stop>
			break;
     168:	e4 cf       	rjmp	.-56     	; 0x132 <BlueToothMode_SuperLoop+0xe>
			
			case 'I' :
			WHEEL_MoveForwardRight ();
     16a:	0e 94 a7 05 	call	0xb4e	; 0xb4e <WHEEL_MoveForwardRight>
			break;
     16e:	e1 cf       	rjmp	.-62     	; 0x132 <BlueToothMode_SuperLoop+0xe>
			
			case 'G' :
			WHEEL_MoveForwardleft ();
     170:	0e 94 c1 05 	call	0xb82	; 0xb82 <WHEEL_MoveForwardleft>
			break;
     174:	de cf       	rjmp	.-68     	; 0x132 <BlueToothMode_SuperLoop+0xe>
			
			case 'J' :
			WHEEL_MoveBackwardRight ();
     176:	0e 94 f5 05 	call	0xbea	; 0xbea <WHEEL_MoveBackwardRight>
			break;
     17a:	db cf       	rjmp	.-74     	; 0x132 <BlueToothMode_SuperLoop+0xe>
			
			case 'H' :
			WHEEL_MoveBackwardleft ();
     17c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <WHEEL_MoveBackwardleft>
			break;
     180:	d8 cf       	rjmp	.-80     	; 0x132 <BlueToothMode_SuperLoop+0xe>
			
			case 'q' :
			if(Speed<MAX_SPEED)
     182:	80 91 8b 00 	lds	r24, 0x008B
     186:	90 91 8c 00 	lds	r25, 0x008C
     18a:	84 36       	cpi	r24, 0x64	; 100
     18c:	91 05       	cpc	r25, r1
     18e:	88 f6       	brcc	.-94     	; 0x132 <BlueToothMode_SuperLoop+0xe>
			{
				Speed+=1;
     190:	01 96       	adiw	r24, 0x01	; 1
     192:	90 93 8c 00 	sts	0x008C, r25
     196:	80 93 8b 00 	sts	0x008B, r24
				WHEEL_SendDutyCycleAndStart(Speed);
     19a:	0e 94 10 06 	call	0xc20	; 0xc20 <WHEEL_SendDutyCycleAndStart>
     19e:	c9 cf       	rjmp	.-110    	; 0x132 <BlueToothMode_SuperLoop+0xe>
				//Do NoThing
			}
			break;
			
			case '0' :
			if (Speed>MIN_SPEED)
     1a0:	80 91 8b 00 	lds	r24, 0x008B
     1a4:	90 91 8c 00 	lds	r25, 0x008C
     1a8:	00 97       	sbiw	r24, 0x00	; 0
     1aa:	19 f2       	breq	.-122    	; 0x132 <BlueToothMode_SuperLoop+0xe>
			{
				Speed-=1;
     1ac:	01 97       	sbiw	r24, 0x01	; 1
     1ae:	90 93 8c 00 	sts	0x008C, r25
     1b2:	80 93 8b 00 	sts	0x008B, r24
				Speed == MIN_SPEED? (WHEEL_Stop()) : (WHEEL_SendDutyCycleAndStart(Speed)) ;
     1b6:	00 97       	sbiw	r24, 0x00	; 0
     1b8:	19 f4       	brne	.+6      	; 0x1c0 <BlueToothMode_SuperLoop+0x9c>
     1ba:	0e 94 8d 05 	call	0xb1a	; 0xb1a <WHEEL_Stop>
     1be:	b9 cf       	rjmp	.-142    	; 0x132 <BlueToothMode_SuperLoop+0xe>
     1c0:	0e 94 10 06 	call	0xc20	; 0xc20 <WHEEL_SendDutyCycleAndStart>
     1c4:	b6 cf       	rjmp	.-148    	; 0x132 <BlueToothMode_SuperLoop+0xe>
				//Do NoThing
			}
			break;
			
			case 'U' :         //BACK LIGHT ON
			LED_TurnON(LED_BACK_PORT,LED_BACK_PIN);
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	62 e0       	ldi	r22, 0x02	; 2
     1ca:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LED_TurnON>
			break;
     1ce:	b1 cf       	rjmp	.-158    	; 0x132 <BlueToothMode_SuperLoop+0xe>
			
			case 'u' :         //BACK LIGHT OFF
			LED_TurnOFF(LED_BACK_PORT,LED_BACK_PIN);
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	62 e0       	ldi	r22, 0x02	; 2
     1d4:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <LED_TurnOFF>
			break;
     1d8:	ac cf       	rjmp	.-168    	; 0x132 <BlueToothMode_SuperLoop+0xe>
			
			case 'W' :         //Flash  ON
			LED_TurnON(LED_FLASH_PORT,LED_FLASH_PIN);
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	61 e0       	ldi	r22, 0x01	; 1
     1de:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LED_TurnON>
			break;
     1e2:	a7 cf       	rjmp	.-178    	; 0x132 <BlueToothMode_SuperLoop+0xe>
			
			case 'w' :         //Flash  OFF
			LED_TurnOFF(LED_FLASH_PORT,LED_FLASH_PIN);
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	61 e0       	ldi	r22, 0x01	; 1
     1e8:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <LED_TurnOFF>
			break;
     1ec:	a2 cf       	rjmp	.-188    	; 0x132 <BlueToothMode_SuperLoop+0xe>
			
			case 'C' :         //FR  ON
			LED_TurnON(LED_FORWARD_RIGHT_PORT,LED_FORWARD_RIGHT_PIN);
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	64 e0       	ldi	r22, 0x04	; 4
     1f2:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LED_TurnON>
			LED_TurnOFF(LED_FORWARD_LEFT_PORT,LED_FORWARD_LEFT_PIN);
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	63 e0       	ldi	r22, 0x03	; 3
     1fa:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <LED_TurnOFF>
			break;
     1fe:	99 cf       	rjmp	.-206    	; 0x132 <BlueToothMode_SuperLoop+0xe>
			
			case 'c' :         //FR  OFF
			LED_TurnOFF(LED_FORWARD_RIGHT_PORT,LED_FORWARD_RIGHT_PIN);
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	64 e0       	ldi	r22, 0x04	; 4
     204:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <LED_TurnOFF>
			LED_TurnOFF(LED_FORWARD_LEFT_PORT,LED_FORWARD_LEFT_PIN);
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	63 e0       	ldi	r22, 0x03	; 3
     20c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <LED_TurnOFF>
			break;
     210:	90 cf       	rjmp	.-224    	; 0x132 <BlueToothMode_SuperLoop+0xe>
			
			case 'X' :         //FL  ON
			LED_TurnOFF(LED_FORWARD_RIGHT_PORT,LED_FORWARD_RIGHT_PIN);
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	64 e0       	ldi	r22, 0x04	; 4
     216:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <LED_TurnOFF>
			LED_TurnON(LED_FORWARD_LEFT_PORT,LED_FORWARD_LEFT_PIN);
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	63 e0       	ldi	r22, 0x03	; 3
     21e:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LED_TurnON>
			break;
     222:	87 cf       	rjmp	.-242    	; 0x132 <BlueToothMode_SuperLoop+0xe>
			
			case 'x' :         //FL  OFF
			LED_TurnOFF(LED_FORWARD_RIGHT_PORT,LED_FORWARD_RIGHT_PIN);
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	64 e0       	ldi	r22, 0x04	; 4
     228:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <LED_TurnOFF>
			LED_TurnOFF(LED_FORWARD_LEFT_PORT,LED_FORWARD_LEFT_PIN);
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	63 e0       	ldi	r22, 0x03	; 3
     230:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <LED_TurnOFF>
			break;
     234:	7e cf       	rjmp	.-260    	; 0x132 <BlueToothMode_SuperLoop+0xe>
			
			
			case 'V' :         //Horn  ON
			BUZZER_TurnOn(BUZZER_PORT,BUZZER_PIN);
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	65 e0       	ldi	r22, 0x05	; 5
     23a:	0e 94 a6 02 	call	0x54c	; 0x54c <BUZZER_TurnOn>
			break;
     23e:	79 cf       	rjmp	.-270    	; 0x132 <BlueToothMode_SuperLoop+0xe>
			
			case 'v' :         //Horn  OFF
			BUZZER_TurnOff(BUZZER_PORT,BUZZER_PIN);
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	65 e0       	ldi	r22, 0x05	; 5
     244:	0e 94 ae 02 	call	0x55c	; 0x55c <BUZZER_TurnOff>
			break;
     248:	74 cf       	rjmp	.-280    	; 0x132 <BlueToothMode_SuperLoop+0xe>

0000024a <UltraSonicMode_SuperLoop>:
	}
}


void UltraSonicMode_SuperLoop()
{
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	cd b7       	in	r28, 0x3d	; 61
     250:	de b7       	in	r29, 0x3e	; 62
     252:	2c 97       	sbiw	r28, 0x0c	; 12
     254:	0f b6       	in	r0, 0x3f	; 63
     256:	f8 94       	cli
     258:	de bf       	out	0x3e, r29	; 62
     25a:	0f be       	out	0x3f, r0	; 63
     25c:	cd bf       	out	0x3d, r28	; 61
			// Measure Distance At Right
			SERVO_TurnON(RIGHT_Angle);
			
			Ultrasonic_ReadDistance(&UltraSonic_RightValue);
			LCD_GoToLocation(1,1);
			LCD_SendString("R=");
     25e:	0f 2e       	mov	r0, r31
     260:	f0 e6       	ldi	r31, 0x60	; 96
     262:	ef 2e       	mov	r14, r31
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	ff 2e       	mov	r15, r31
     268:	f0 2d       	mov	r31, r0
			LCD_SendRealNumber(UltraSonic_RightValue);
			LCD_SendString("CM");
     26a:	03 e6       	ldi	r16, 0x63	; 99
     26c:	10 e0       	ldi	r17, 0x00	; 0
			// Measure Distance At Left
			SERVO_TurnON(LEFT_Angle);
			
			Ultrasonic_ReadDistance(&UltraSonic_LeftValue);
			LCD_GoToLocation(1,2);
			LCD_SendString("L=");
     26e:	0f 2e       	mov	r0, r31
     270:	f6 e6       	ldi	r31, 0x66	; 102
     272:	cf 2e       	mov	r12, r31
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	df 2e       	mov	r13, r31
     278:	f0 2d       	mov	r31, r0
				
			}
			else
			{
				LCD_ClearDesplay();
				LCD_SendString("    <---- ");
     27a:	0f 2e       	mov	r0, r31
     27c:	f3 e7       	ldi	r31, 0x73	; 115
     27e:	af 2e       	mov	r10, r31
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	bf 2e       	mov	r11, r31
     284:	f0 2d       	mov	r31, r0
			
			_delay_ms(1000);
			if (UltraSonic_RightValue > UltraSonic_LeftValue)
			{
				LCD_ClearDesplay();
				LCD_SendString("    ---> ");
     286:	0f 2e       	mov	r0, r31
     288:	f9 e6       	ldi	r31, 0x69	; 105
     28a:	8f 2e       	mov	r8, r31
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	9f 2e       	mov	r9, r31
     290:	f0 2d       	mov	r31, r0
	f64 UltraSonic_ForwardValue;
	f64 UltraSonic_RightValue;
	f64 UltraSonic_LeftValue;
	while(1)
	{
		Ultrasonic_ReadDistance(&UltraSonic_ForwardValue);
     292:	ce 01       	movw	r24, r28
     294:	01 96       	adiw	r24, 0x01	; 1
     296:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Ultrasonic_ReadDistance>
		if ( UltraSonic_ForwardValue>30.00)
     29a:	69 81       	ldd	r22, Y+1	; 0x01
     29c:	7a 81       	ldd	r23, Y+2	; 0x02
     29e:	8b 81       	ldd	r24, Y+3	; 0x03
     2a0:	9c 81       	ldd	r25, Y+4	; 0x04
     2a2:	20 e0       	ldi	r18, 0x00	; 0
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	40 ef       	ldi	r20, 0xF0	; 240
     2a8:	51 e4       	ldi	r21, 0x41	; 65
     2aa:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__gesf2>
     2ae:	18 16       	cp	r1, r24
     2b0:	1c f4       	brge	.+6      	; 0x2b8 <UltraSonicMode_SuperLoop+0x6e>
		{
			WHEEL_MoveForward();
     2b2:	0e 94 59 05 	call	0xab2	; 0xab2 <WHEEL_MoveForward>
     2b6:	ed cf       	rjmp	.-38     	; 0x292 <UltraSonicMode_SuperLoop+0x48>
		}
		else
		{
			WHEEL_Stop();
     2b8:	0e 94 8d 05 	call	0xb1a	; 0xb1a <WHEEL_Stop>
			//	MOVE A Little Backward
			LED_TurnON(LED_BACK_PORT,LED_BACK_PIN);
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	62 e0       	ldi	r22, 0x02	; 2
     2c0:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LED_TurnON>
			BUZZER_TurnOn(BUZZER_PORT,BUZZER_PIN);
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	65 e0       	ldi	r22, 0x05	; 5
     2c8:	0e 94 a6 02 	call	0x54c	; 0x54c <BUZZER_TurnOn>
			WHEEL_MoveBackward();
     2cc:	0e 94 73 05 	call	0xae6	; 0xae6 <WHEEL_MoveBackward>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d0:	8f ef       	ldi	r24, 0xFF	; 255
     2d2:	99 e6       	ldi	r25, 0x69	; 105
     2d4:	a8 e1       	ldi	r26, 0x18	; 24
     2d6:	81 50       	subi	r24, 0x01	; 1
     2d8:	90 40       	sbci	r25, 0x00	; 0
     2da:	a0 40       	sbci	r26, 0x00	; 0
     2dc:	e1 f7       	brne	.-8      	; 0x2d6 <UltraSonicMode_SuperLoop+0x8c>
     2de:	00 c0       	rjmp	.+0      	; 0x2e0 <UltraSonicMode_SuperLoop+0x96>
     2e0:	00 00       	nop
			_delay_ms(500);
			LED_TurnOFF(LED_BACK_PORT,LED_BACK_PIN);
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	62 e0       	ldi	r22, 0x02	; 2
     2e6:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <LED_TurnOFF>
			BUZZER_TurnOff(BUZZER_PORT,BUZZER_PIN);
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	65 e0       	ldi	r22, 0x05	; 5
     2ee:	0e 94 ae 02 	call	0x55c	; 0x55c <BUZZER_TurnOff>
			WHEEL_Stop();
     2f2:	0e 94 8d 05 	call	0xb1a	; 0xb1a <WHEEL_Stop>
			
			// Measure Distance At Right
			SERVO_TurnON(RIGHT_Angle);
     2f6:	60 e0       	ldi	r22, 0x00	; 0
     2f8:	70 e0       	ldi	r23, 0x00	; 0
     2fa:	84 e3       	ldi	r24, 0x34	; 52
     2fc:	93 e4       	ldi	r25, 0x43	; 67
     2fe:	0e 94 13 05 	call	0xa26	; 0xa26 <SERVO_TurnON>
			
			Ultrasonic_ReadDistance(&UltraSonic_RightValue);
     302:	ce 01       	movw	r24, r28
     304:	05 96       	adiw	r24, 0x05	; 5
     306:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Ultrasonic_ReadDistance>
			LCD_GoToLocation(1,1);
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	61 e0       	ldi	r22, 0x01	; 1
     30e:	0e 94 75 04 	call	0x8ea	; 0x8ea <LCD_GoToLocation>
			LCD_SendString("R=");
     312:	c7 01       	movw	r24, r14
     314:	0e 94 ce 03 	call	0x79c	; 0x79c <LCD_SendString>
			LCD_SendRealNumber(UltraSonic_RightValue);
     318:	6d 81       	ldd	r22, Y+5	; 0x05
     31a:	7e 81       	ldd	r23, Y+6	; 0x06
     31c:	8f 81       	ldd	r24, Y+7	; 0x07
     31e:	98 85       	ldd	r25, Y+8	; 0x08
     320:	0e 94 dd 03 	call	0x7ba	; 0x7ba <LCD_SendRealNumber>
			LCD_SendString("CM");
     324:	c8 01       	movw	r24, r16
     326:	0e 94 ce 03 	call	0x79c	; 0x79c <LCD_SendString>
     32a:	8f ef       	ldi	r24, 0xFF	; 255
     32c:	93 ed       	ldi	r25, 0xD3	; 211
     32e:	a0 e3       	ldi	r26, 0x30	; 48
     330:	81 50       	subi	r24, 0x01	; 1
     332:	90 40       	sbci	r25, 0x00	; 0
     334:	a0 40       	sbci	r26, 0x00	; 0
     336:	e1 f7       	brne	.-8      	; 0x330 <UltraSonicMode_SuperLoop+0xe6>
     338:	00 c0       	rjmp	.+0      	; 0x33a <UltraSonicMode_SuperLoop+0xf0>
     33a:	00 00       	nop

			_delay_ms(1000);
			// Measure Distance At Left
			SERVO_TurnON(LEFT_Angle);
     33c:	60 e0       	ldi	r22, 0x00	; 0
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	cb 01       	movw	r24, r22
     342:	0e 94 13 05 	call	0xa26	; 0xa26 <SERVO_TurnON>
			
			Ultrasonic_ReadDistance(&UltraSonic_LeftValue);
     346:	ce 01       	movw	r24, r28
     348:	09 96       	adiw	r24, 0x09	; 9
     34a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Ultrasonic_ReadDistance>
			LCD_GoToLocation(1,2);
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	62 e0       	ldi	r22, 0x02	; 2
     352:	0e 94 75 04 	call	0x8ea	; 0x8ea <LCD_GoToLocation>
			LCD_SendString("L=");
     356:	c6 01       	movw	r24, r12
     358:	0e 94 ce 03 	call	0x79c	; 0x79c <LCD_SendString>
			LCD_SendRealNumber(UltraSonic_LeftValue);
     35c:	69 85       	ldd	r22, Y+9	; 0x09
     35e:	7a 85       	ldd	r23, Y+10	; 0x0a
     360:	8b 85       	ldd	r24, Y+11	; 0x0b
     362:	9c 85       	ldd	r25, Y+12	; 0x0c
     364:	0e 94 dd 03 	call	0x7ba	; 0x7ba <LCD_SendRealNumber>
			LCD_SendString("CM");
     368:	c8 01       	movw	r24, r16
     36a:	0e 94 ce 03 	call	0x79c	; 0x79c <LCD_SendString>
     36e:	8f ef       	ldi	r24, 0xFF	; 255
     370:	93 ed       	ldi	r25, 0xD3	; 211
     372:	a0 e3       	ldi	r26, 0x30	; 48
     374:	81 50       	subi	r24, 0x01	; 1
     376:	90 40       	sbci	r25, 0x00	; 0
     378:	a0 40       	sbci	r26, 0x00	; 0
     37a:	e1 f7       	brne	.-8      	; 0x374 <UltraSonicMode_SuperLoop+0x12a>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <UltraSonicMode_SuperLoop+0x134>
     37e:	00 00       	nop
			
			_delay_ms(1000);
			if (UltraSonic_RightValue > UltraSonic_LeftValue)
     380:	6d 81       	ldd	r22, Y+5	; 0x05
     382:	7e 81       	ldd	r23, Y+6	; 0x06
     384:	8f 81       	ldd	r24, Y+7	; 0x07
     386:	98 85       	ldd	r25, Y+8	; 0x08
     388:	29 85       	ldd	r18, Y+9	; 0x09
     38a:	3a 85       	ldd	r19, Y+10	; 0x0a
     38c:	4b 85       	ldd	r20, Y+11	; 0x0b
     38e:	5c 85       	ldd	r21, Y+12	; 0x0c
     390:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__gesf2>
     394:	18 16       	cp	r1, r24
     396:	54 f5       	brge	.+84     	; 0x3ec <UltraSonicMode_SuperLoop+0x1a2>
			{
				LCD_ClearDesplay();
     398:	0e 94 68 04 	call	0x8d0	; 0x8d0 <LCD_ClearDesplay>
				LCD_SendString("    ---> ");
     39c:	c4 01       	movw	r24, r8
     39e:	0e 94 ce 03 	call	0x79c	; 0x79c <LCD_SendString>
				//MOVE Right
				SERVO_TurnON(FORWARD_Angle);
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	84 eb       	ldi	r24, 0xB4	; 180
     3a8:	92 e4       	ldi	r25, 0x42	; 66
     3aa:	0e 94 13 05 	call	0xa26	; 0xa26 <SERVO_TurnON>
     3ae:	8f ef       	ldi	r24, 0xFF	; 255
     3b0:	91 ee       	ldi	r25, 0xE1	; 225
     3b2:	a4 e0       	ldi	r26, 0x04	; 4
     3b4:	81 50       	subi	r24, 0x01	; 1
     3b6:	90 40       	sbci	r25, 0x00	; 0
     3b8:	a0 40       	sbci	r26, 0x00	; 0
     3ba:	e1 f7       	brne	.-8      	; 0x3b4 <UltraSonicMode_SuperLoop+0x16a>
     3bc:	00 c0       	rjmp	.+0      	; 0x3be <UltraSonicMode_SuperLoop+0x174>
     3be:	00 00       	nop
				_delay_ms(100);
				WHEEL_MoveForwardRight();
     3c0:	0e 94 a7 05 	call	0xb4e	; 0xb4e <WHEEL_MoveForwardRight>

				LED_TurnON(LED_FORWARD_RIGHT_PORT,LED_FORWARD_RIGHT_PIN);
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	64 e0       	ldi	r22, 0x04	; 4
     3c8:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LED_TurnON>
     3cc:	8f ef       	ldi	r24, 0xFF	; 255
     3ce:	99 e6       	ldi	r25, 0x69	; 105
     3d0:	a8 e1       	ldi	r26, 0x18	; 24
     3d2:	81 50       	subi	r24, 0x01	; 1
     3d4:	90 40       	sbci	r25, 0x00	; 0
     3d6:	a0 40       	sbci	r26, 0x00	; 0
     3d8:	e1 f7       	brne	.-8      	; 0x3d2 <UltraSonicMode_SuperLoop+0x188>
     3da:	00 c0       	rjmp	.+0      	; 0x3dc <UltraSonicMode_SuperLoop+0x192>
     3dc:	00 00       	nop
				_delay_ms(500);
				LED_TurnOFF(LED_FORWARD_RIGHT_PORT,LED_FORWARD_RIGHT_PIN);
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	64 e0       	ldi	r22, 0x04	; 4
     3e2:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <LED_TurnOFF>
				WHEEL_Stop();
     3e6:	0e 94 8d 05 	call	0xb1a	; 0xb1a <WHEEL_Stop>
     3ea:	53 cf       	rjmp	.-346    	; 0x292 <UltraSonicMode_SuperLoop+0x48>
				
			}
			else
			{
				LCD_ClearDesplay();
     3ec:	0e 94 68 04 	call	0x8d0	; 0x8d0 <LCD_ClearDesplay>
				LCD_SendString("    <---- ");
     3f0:	c5 01       	movw	r24, r10
     3f2:	0e 94 ce 03 	call	0x79c	; 0x79c <LCD_SendString>
				//MOVE Left
				SERVO_TurnON(FORWARD_Angle);
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	70 e0       	ldi	r23, 0x00	; 0
     3fa:	84 eb       	ldi	r24, 0xB4	; 180
     3fc:	92 e4       	ldi	r25, 0x42	; 66
     3fe:	0e 94 13 05 	call	0xa26	; 0xa26 <SERVO_TurnON>
     402:	8f ef       	ldi	r24, 0xFF	; 255
     404:	91 ee       	ldi	r25, 0xE1	; 225
     406:	a4 e0       	ldi	r26, 0x04	; 4
     408:	81 50       	subi	r24, 0x01	; 1
     40a:	90 40       	sbci	r25, 0x00	; 0
     40c:	a0 40       	sbci	r26, 0x00	; 0
     40e:	e1 f7       	brne	.-8      	; 0x408 <UltraSonicMode_SuperLoop+0x1be>
     410:	00 c0       	rjmp	.+0      	; 0x412 <UltraSonicMode_SuperLoop+0x1c8>
     412:	00 00       	nop
				_delay_ms(100);
				WHEEL_MoveForwardleft();
     414:	0e 94 c1 05 	call	0xb82	; 0xb82 <WHEEL_MoveForwardleft>
				
				LED_TurnON(LED_FORWARD_LEFT_PORT,LED_FORWARD_LEFT_PIN);
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	63 e0       	ldi	r22, 0x03	; 3
     41c:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LED_TurnON>
     420:	8f ef       	ldi	r24, 0xFF	; 255
     422:	99 e6       	ldi	r25, 0x69	; 105
     424:	a8 e1       	ldi	r26, 0x18	; 24
     426:	81 50       	subi	r24, 0x01	; 1
     428:	90 40       	sbci	r25, 0x00	; 0
     42a:	a0 40       	sbci	r26, 0x00	; 0
     42c:	e1 f7       	brne	.-8      	; 0x426 <UltraSonicMode_SuperLoop+0x1dc>
     42e:	00 c0       	rjmp	.+0      	; 0x430 <UltraSonicMode_SuperLoop+0x1e6>
     430:	00 00       	nop
				
				_delay_ms(500);
				LED_TurnOFF(LED_FORWARD_LEFT_PORT,LED_FORWARD_LEFT_PIN);
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	63 e0       	ldi	r22, 0x03	; 3
     436:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <LED_TurnOFF>
				
				WHEEL_Stop();
     43a:	0e 94 8d 05 	call	0xb1a	; 0xb1a <WHEEL_Stop>
     43e:	29 cf       	rjmp	.-430    	; 0x292 <UltraSonicMode_SuperLoop+0x48>

00000440 <main>:
#define MAX_SPEED                         100
#define MIN_SPEED                         0


int main(void)
{
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	0f 92       	push	r0
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62
	u8 ModeValue ;
	
	GLBI_Enable();
     44a:	0e 94 2c 0b 	call	0x1658	; 0x1658 <GLBI_Enable>
	
	BUTTON_init(BUTTON_MODE_PORT,BUTTON_MODE_PIN);
     44e:	83 e0       	ldi	r24, 0x03	; 3
     450:	62 e0       	ldi	r22, 0x02	; 2
     452:	0e 94 88 02 	call	0x510	; 0x510 <BUTTON_init>
	BUTTON_ReadValue(BUTTON_MODE_PORT,BUTTON_MODE_PIN,&ModeValue,BUTTON_PullDown);
     456:	83 e0       	ldi	r24, 0x03	; 3
     458:	62 e0       	ldi	r22, 0x02	; 2
     45a:	ae 01       	movw	r20, r28
     45c:	4f 5f       	subi	r20, 0xFF	; 255
     45e:	5f 4f       	sbci	r21, 0xFF	; 255
     460:	20 e0       	ldi	r18, 0x00	; 0
     462:	0e 94 97 02 	call	0x52e	; 0x52e <BUTTON_ReadValue>
	
	LCD_init();
     466:	0e 94 33 03 	call	0x666	; 0x666 <LCD_init>
	
	WHEEL_Init();
     46a:	0e 94 2b 05 	call	0xa56	; 0xa56 <WHEEL_Init>
	WHEEL_MoveForward();
     46e:	0e 94 59 05 	call	0xab2	; 0xab2 <WHEEL_MoveForward>
	WHEEL_SendDutyCycleAndStart(Speed);
     472:	80 91 8b 00 	lds	r24, 0x008B
     476:	0e 94 10 06 	call	0xc20	; 0xc20 <WHEEL_SendDutyCycleAndStart>
	
	SERVO_init();
     47a:	0e 94 0b 05 	call	0xa16	; 0xa16 <SERVO_init>
	SERVO_TurnON(FORWARD_Angle);
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	84 eb       	ldi	r24, 0xB4	; 180
     484:	92 e4       	ldi	r25, 0x42	; 66
     486:	0e 94 13 05 	call	0xa26	; 0xa26 <SERVO_TurnON>
		
	LED_init(LED_BACK_PORT,LED_BACK_PIN);
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	62 e0       	ldi	r22, 0x02	; 2
     48e:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <LED_init>
	LED_init(LED_FORWARD_RIGHT_PORT,LED_FORWARD_RIGHT_PIN);
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	64 e0       	ldi	r22, 0x04	; 4
     496:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <LED_init>
	LED_init(LED_FORWARD_LEFT_PORT,LED_FORWARD_LEFT_PIN);
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	63 e0       	ldi	r22, 0x03	; 3
     49e:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <LED_init>
	LED_init(LED_FLASH_PORT,LED_FLASH_PIN);
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	61 e0       	ldi	r22, 0x01	; 1
     4a6:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <LED_init>
	BUZZER_init(BUZZER_PORT,BUZZER_PIN);
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	65 e0       	ldi	r22, 0x05	; 5
     4ae:	0e 94 9e 02 	call	0x53c	; 0x53c <BUZZER_init>
	
	LED_TurnOFF(LED_FORWARD_RIGHT_PORT,LED_FORWARD_RIGHT_PIN);
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	64 e0       	ldi	r22, 0x04	; 4
     4b6:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <LED_TurnOFF>
	LED_TurnOFF(LED_FORWARD_LEFT_PORT,LED_FORWARD_LEFT_PIN);
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	63 e0       	ldi	r22, 0x03	; 3
     4be:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <LED_TurnOFF>
	LED_TurnOFF(LED_BACK_PORT,LED_BACK_PIN);
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	62 e0       	ldi	r22, 0x02	; 2
     4c6:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <LED_TurnOFF>
	LED_TurnOFF(LED_FLASH_PORT,LED_FLASH_PIN);
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	61 e0       	ldi	r22, 0x01	; 1
     4ce:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <LED_TurnOFF>
	BUZZER_TurnOff(BUZZER_PORT,BUZZER_PIN);
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	65 e0       	ldi	r22, 0x05	; 5
     4d6:	0e 94 ae 02 	call	0x55c	; 0x55c <BUZZER_TurnOff>
	
	
	if (ULTRASONIC_MODE == ModeValue)
     4da:	89 81       	ldd	r24, Y+1	; 0x01
     4dc:	88 23       	and	r24, r24
     4de:	21 f4       	brne	.+8      	; 0x4e8 <main+0xa8>
	{
		Ultrasonic_init();
     4e0:	0e 94 76 06 	call	0xcec	; 0xcec <Ultrasonic_init>
		UltraSonicMode_SuperLoop();
     4e4:	0e 94 25 01 	call	0x24a	; 0x24a <UltraSonicMode_SuperLoop>
	}
	else
	{
		LCD_SendString("BlueTooth ON");
     4e8:	8e e7       	ldi	r24, 0x7E	; 126
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	0e 94 ce 03 	call	0x79c	; 0x79c <LCD_SendString>
		BLUETOOTH_init();
     4f0:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <BLUETOOTH_init>
		BlueToothMode_SuperLoop();
     4f4:	0e 94 92 00 	call	0x124	; 0x124 <BlueToothMode_SuperLoop>

000004f8 <BLUETOOTH_init>:
#include "../include/BLUETOOTH_private.h"


void BLUETOOTH_init(void)
{
	UART_init();
     4f8:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <UART_init>
}
     4fc:	08 95       	ret

000004fe <BLUETOOTH_TransimitChar>:

void BLUETOOTH_TransimitChar(u8 TransimitData)
{
	UART_TransmiteChar(TransimitData);
     4fe:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <UART_TransmiteChar>
}
     502:	08 95       	ret

00000504 <BLUETOOTH_ReceiveChar>:

void BLUETOOTH_ReceiveChar(u8* ReceiveData)
{
	UART_ReceiveChar(ReceiveData);
     504:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <UART_ReceiveChar>
}
     508:	08 95       	ret

0000050a <BLUETOOTH_TransimitString>:

void BLUETOOTH_TransimitString (u8* TransimitData)
{
	UART_TransmiteString(TransimitData);
     50a:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <UART_TransmiteString>
     50e:	08 95       	ret

00000510 <BUTTON_init>:
#include "../include/BUTTON_private.h"


void BUTTON_init(u8 ButtonPort ,u8 ButtonPin)
{
	if (ButtonPort <=3 && ButtonPin<=7)
     510:	84 30       	cpi	r24, 0x04	; 4
     512:	28 f4       	brcc	.+10     	; 0x51e <BUTTON_init+0xe>
     514:	68 30       	cpi	r22, 0x08	; 8
     516:	18 f4       	brcc	.+6      	; 0x51e <BUTTON_init+0xe>
	{
		DIO_SetPinDirection(ButtonPort,ButtonPin,DIO_PIN_INPUT);
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_SetPinDirection>
     51e:	08 95       	ret

00000520 <BUTTON_ActivePullUp>:
	}
}

void BUTTON_ActivePullUp(u8 ButtonPort ,u8 ButtonPin)
{
	if (ButtonPort <=3 && ButtonPin<=7)
     520:	84 30       	cpi	r24, 0x04	; 4
     522:	20 f4       	brcc	.+8      	; 0x52c <BUTTON_ActivePullUp+0xc>
     524:	68 30       	cpi	r22, 0x08	; 8
     526:	10 f4       	brcc	.+4      	; 0x52c <BUTTON_ActivePullUp+0xc>
	{
		DIO_activePinInPullUpResistance(ButtonPort,ButtonPin);
     528:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_activePinInPullUpResistance>
     52c:	08 95       	ret

0000052e <BUTTON_ReadValue>:
	}
}

void BUTTON_ReadValue(u8 ButtonPort ,u8 ButtonPin,u8* PinValue,u8 BUTTON_STATUE)
{
	if (ButtonPort <=3 && ButtonPin<=7)
     52e:	84 30       	cpi	r24, 0x04	; 4
     530:	20 f4       	brcc	.+8      	; 0x53a <BUTTON_ReadValue+0xc>
     532:	68 30       	cpi	r22, 0x08	; 8
     534:	10 f4       	brcc	.+4      	; 0x53a <BUTTON_ReadValue+0xc>
	{
		DIO_ReadValue(ButtonPort,ButtonPin,PinValue);
     536:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <DIO_ReadValue>
     53a:	08 95       	ret

0000053c <BUZZER_init>:
#include "../include/BUZZER_interface.h"
#include "../include/BUZZER_private.h"

void BUZZER_init(u8 BuzzerPort ,u8 BuzzerPin )
{
	if(BuzzerPort<=3 && BuzzerPin<=7)
     53c:	84 30       	cpi	r24, 0x04	; 4
     53e:	28 f4       	brcc	.+10     	; 0x54a <BUZZER_init+0xe>
     540:	68 30       	cpi	r22, 0x08	; 8
     542:	18 f4       	brcc	.+6      	; 0x54a <BUZZER_init+0xe>
	{
		DIO_SetPinDirection(BuzzerPort,BuzzerPin,DIO_PIN_OUTPUT);
     544:	41 e0       	ldi	r20, 0x01	; 1
     546:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_SetPinDirection>
     54a:	08 95       	ret

0000054c <BUZZER_TurnOn>:
}


void BUZZER_TurnOn(u8 BuzzerPort ,u8 BuzzerPin )
{
	if(BuzzerPort<=3 && BuzzerPin<=7)
     54c:	84 30       	cpi	r24, 0x04	; 4
     54e:	28 f4       	brcc	.+10     	; 0x55a <BUZZER_TurnOn+0xe>
     550:	68 30       	cpi	r22, 0x08	; 8
     552:	18 f4       	brcc	.+6      	; 0x55a <BUZZER_TurnOn+0xe>
	{
		DIO_SetPinValue(BuzzerPort,BuzzerPin,DIO_PIN_HIGH);
     554:	41 e0       	ldi	r20, 0x01	; 1
     556:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
     55a:	08 95       	ret

0000055c <BUZZER_TurnOff>:
	}
}

void BUZZER_TurnOff(u8 BuzzerPort ,u8 BuzzerPin )
{
	if(BuzzerPort<=3 && BuzzerPin<=7)
     55c:	84 30       	cpi	r24, 0x04	; 4
     55e:	28 f4       	brcc	.+10     	; 0x56a <BUZZER_TurnOff+0xe>
     560:	68 30       	cpi	r22, 0x08	; 8
     562:	18 f4       	brcc	.+6      	; 0x56a <BUZZER_TurnOff+0xe>
	{
		DIO_SetPinValue(BuzzerPort,BuzzerPin,DIO_PIN_LOW);
     564:	40 e0       	ldi	r20, 0x00	; 0
     566:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
     56a:	08 95       	ret

0000056c <BUZZER_Toggle>:
	}
}	

void BUZZER_Toggle(u8 BuzzerPort ,u8 BuzzerPin )
{
	if(BuzzerPort<=3 && BuzzerPin<=7)
     56c:	84 30       	cpi	r24, 0x04	; 4
     56e:	20 f4       	brcc	.+8      	; 0x578 <BUZZER_Toggle+0xc>
     570:	68 30       	cpi	r22, 0x08	; 8
     572:	10 f4       	brcc	.+4      	; 0x578 <BUZZER_Toggle+0xc>
	{
		DIO_TogglePinValue(BuzzerPort,BuzzerPin);
     574:	0e 94 96 08 	call	0x112c	; 0x112c <DIO_TogglePinValue>
     578:	08 95       	ret

0000057a <private_WriteHalfPort>:
{
	LCD_sendComnd(ShiftCmnd);
}

void private_WriteHalfPort (u8 Value)
{
     57a:	cf 93       	push	r28
     57c:	c8 2f       	mov	r28, r24
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit0)) ? (DIO_SetPinValue(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_HIGH));
     57e:	80 fd       	sbrc	r24, 0
     580:	06 c0       	rjmp	.+12     	; 0x58e <private_WriteHalfPort+0x14>
     582:	82 e0       	ldi	r24, 0x02	; 2
     584:	64 e0       	ldi	r22, 0x04	; 4
     586:	40 e0       	ldi	r20, 0x00	; 0
     588:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
     58c:	05 c0       	rjmp	.+10     	; 0x598 <private_WriteHalfPort+0x1e>
     58e:	82 e0       	ldi	r24, 0x02	; 2
     590:	64 e0       	ldi	r22, 0x04	; 4
     592:	41 e0       	ldi	r20, 0x01	; 1
     594:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit1)) ? (DIO_SetPinValue(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_HIGH));
     598:	8c 2f       	mov	r24, r28
     59a:	86 95       	lsr	r24
     59c:	80 fd       	sbrc	r24, 0
     59e:	06 c0       	rjmp	.+12     	; 0x5ac <private_WriteHalfPort+0x32>
     5a0:	82 e0       	ldi	r24, 0x02	; 2
     5a2:	65 e0       	ldi	r22, 0x05	; 5
     5a4:	40 e0       	ldi	r20, 0x00	; 0
     5a6:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
     5aa:	05 c0       	rjmp	.+10     	; 0x5b6 <private_WriteHalfPort+0x3c>
     5ac:	82 e0       	ldi	r24, 0x02	; 2
     5ae:	65 e0       	ldi	r22, 0x05	; 5
     5b0:	41 e0       	ldi	r20, 0x01	; 1
     5b2:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit2)) ? (DIO_SetPinValue(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_HIGH));
     5b6:	8c 2f       	mov	r24, r28
     5b8:	86 95       	lsr	r24
     5ba:	86 95       	lsr	r24
     5bc:	80 fd       	sbrc	r24, 0
     5be:	06 c0       	rjmp	.+12     	; 0x5cc <private_WriteHalfPort+0x52>
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	66 e0       	ldi	r22, 0x06	; 6
     5c4:	40 e0       	ldi	r20, 0x00	; 0
     5c6:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
     5ca:	05 c0       	rjmp	.+10     	; 0x5d6 <private_WriteHalfPort+0x5c>
     5cc:	82 e0       	ldi	r24, 0x02	; 2
     5ce:	66 e0       	ldi	r22, 0x06	; 6
     5d0:	41 e0       	ldi	r20, 0x01	; 1
     5d2:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit3)) ? (DIO_SetPinValue(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_HIGH));
     5d6:	c6 95       	lsr	r28
     5d8:	c6 95       	lsr	r28
     5da:	c6 95       	lsr	r28
     5dc:	c0 fd       	sbrc	r28, 0
     5de:	06 c0       	rjmp	.+12     	; 0x5ec <private_WriteHalfPort+0x72>
     5e0:	82 e0       	ldi	r24, 0x02	; 2
     5e2:	67 e0       	ldi	r22, 0x07	; 7
     5e4:	40 e0       	ldi	r20, 0x00	; 0
     5e6:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
     5ea:	05 c0       	rjmp	.+10     	; 0x5f6 <private_WriteHalfPort+0x7c>
     5ec:	82 e0       	ldi	r24, 0x02	; 2
     5ee:	67 e0       	ldi	r22, 0x07	; 7
     5f0:	41 e0       	ldi	r20, 0x01	; 1
     5f2:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
}
     5f6:	cf 91       	pop	r28
     5f8:	08 95       	ret

000005fa <LCD_sendComnd>:
	
	#endif
}

void LCD_sendComnd(u8 Cmnd)
{
     5fa:	cf 93       	push	r28
     5fc:	c8 2f       	mov	r28, r24
	#if   LCD_MODE == LCD_FourBitMode
	
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	61 e0       	ldi	r22, 0x01	; 1
     602:	40 e0       	ldi	r20, 0x00	; 0
     604:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	62 e0       	ldi	r22, 0x02	; 2
     60c:	40 e0       	ldi	r20, 0x00	; 0
     60e:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	
	private_WriteHalfPort(Cmnd>>4);                                    //PORTA_REG= (PORTA_REG & 0x0f) | (Cmnd & 0xf0)
     612:	8c 2f       	mov	r24, r28
     614:	82 95       	swap	r24
     616:	8f 70       	andi	r24, 0x0F	; 15
     618:	0e 94 bd 02 	call	0x57a	; 0x57a <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	63 e0       	ldi	r22, 0x03	; 3
     620:	41 e0       	ldi	r20, 0x01	; 1
     622:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
     626:	8f e9       	ldi	r24, 0x9F	; 159
     628:	9f e0       	ldi	r25, 0x0F	; 15
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	f1 f7       	brne	.-4      	; 0x62a <LCD_sendComnd+0x30>
     62e:	00 c0       	rjmp	.+0      	; 0x630 <LCD_sendComnd+0x36>
     630:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	63 e0       	ldi	r22, 0x03	; 3
     636:	40 e0       	ldi	r20, 0x00	; 0
     638:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	
	private_WriteHalfPort(Cmnd);                                      //PORTA_REG= (PORTA_REG & 0x0f) | ((Cmnd & 0xf0) <<4)
     63c:	8c 2f       	mov	r24, r28
     63e:	0e 94 bd 02 	call	0x57a	; 0x57a <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	63 e0       	ldi	r22, 0x03	; 3
     646:	41 e0       	ldi	r20, 0x01	; 1
     648:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
     64c:	8f e9       	ldi	r24, 0x9F	; 159
     64e:	9f e0       	ldi	r25, 0x0F	; 15
     650:	01 97       	sbiw	r24, 0x01	; 1
     652:	f1 f7       	brne	.-4      	; 0x650 <LCD_sendComnd+0x56>
     654:	00 c0       	rjmp	.+0      	; 0x656 <LCD_sendComnd+0x5c>
     656:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	63 e0       	ldi	r22, 0x03	; 3
     65c:	40 e0       	ldi	r20, 0x00	; 0
     65e:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#endif
	
}
     662:	cf 91       	pop	r28
     664:	08 95       	ret

00000666 <LCD_init>:

void LCD_init(void)
{
	#if   LCD_MODE == LCD_FourBitMode 
	//SET PIN AS OUTPUT
	DIO_SetPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_OUTPUT);
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	61 e0       	ldi	r22, 0x01	; 1
     66a:	41 e0       	ldi	r20, 0x01	; 1
     66c:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_OUTPUT);
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	62 e0       	ldi	r22, 0x02	; 2
     674:	41 e0       	ldi	r20, 0x01	; 1
     676:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_OUTPUT);
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	63 e0       	ldi	r22, 0x03	; 3
     67e:	41 e0       	ldi	r20, 0x01	; 1
     680:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_SetPinDirection>
	
	
	DIO_SetPinDirection(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_OUTPUT);
     684:	82 e0       	ldi	r24, 0x02	; 2
     686:	64 e0       	ldi	r22, 0x04	; 4
     688:	41 e0       	ldi	r20, 0x01	; 1
     68a:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_OUTPUT);
     68e:	82 e0       	ldi	r24, 0x02	; 2
     690:	65 e0       	ldi	r22, 0x05	; 5
     692:	41 e0       	ldi	r20, 0x01	; 1
     694:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_OUTPUT);
     698:	82 e0       	ldi	r24, 0x02	; 2
     69a:	66 e0       	ldi	r22, 0x06	; 6
     69c:	41 e0       	ldi	r20, 0x01	; 1
     69e:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_OUTPUT);
     6a2:	82 e0       	ldi	r24, 0x02	; 2
     6a4:	67 e0       	ldi	r22, 0x07	; 7
     6a6:	41 e0       	ldi	r20, 0x01	; 1
     6a8:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_SetPinDirection>
     6ac:	8f e7       	ldi	r24, 0x7F	; 127
     6ae:	95 eb       	ldi	r25, 0xB5	; 181
     6b0:	a1 e0       	ldi	r26, 0x01	; 1
     6b2:	81 50       	subi	r24, 0x01	; 1
     6b4:	90 40       	sbci	r25, 0x00	; 0
     6b6:	a0 40       	sbci	r26, 0x00	; 0
     6b8:	e1 f7       	brne	.-8      	; 0x6b2 <LCD_init+0x4c>
     6ba:	00 c0       	rjmp	.+0      	; 0x6bc <LCD_init+0x56>
     6bc:	00 00       	nop
	
	
	_delay_ms(35);
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	61 e0       	ldi	r22, 0x01	; 1
     6c2:	40 e0       	ldi	r20, 0x00	; 0
     6c4:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	62 e0       	ldi	r22, 0x02	; 2
     6cc:	40 e0       	ldi	r20, 0x00	; 0
     6ce:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	private_WriteHalfPort(LCD_COMMAND_FOR_FOUR_BIT_MODE);
     6d2:	82 e0       	ldi	r24, 0x02	; 2
     6d4:	0e 94 bd 02 	call	0x57a	; 0x57a <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	63 e0       	ldi	r22, 0x03	; 3
     6dc:	41 e0       	ldi	r20, 0x01	; 1
     6de:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
     6e2:	af e9       	ldi	r26, 0x9F	; 159
     6e4:	bf e0       	ldi	r27, 0x0F	; 15
     6e6:	11 97       	sbiw	r26, 0x01	; 1
     6e8:	f1 f7       	brne	.-4      	; 0x6e6 <LCD_init+0x80>
     6ea:	00 c0       	rjmp	.+0      	; 0x6ec <LCD_init+0x86>
     6ec:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	63 e0       	ldi	r22, 0x03	; 3
     6f2:	40 e0       	ldi	r20, 0x00	; 0
     6f4:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	
	LCD_sendComnd(LCD_FUNCTION_SET);
     6f8:	88 e2       	ldi	r24, 0x28	; 40
     6fa:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6fe:	b0 ef       	ldi	r27, 0xF0	; 240
     700:	ba 95       	dec	r27
     702:	f1 f7       	brne	.-4      	; 0x700 <LCD_init+0x9a>
	_delay_us(45);
	
	LCD_sendComnd(LCD_DISPLAY_ON_OFF_CONTROL);
     704:	8c e0       	ldi	r24, 0x0C	; 12
     706:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LCD_sendComnd>
     70a:	80 ef       	ldi	r24, 0xF0	; 240
     70c:	8a 95       	dec	r24
     70e:	f1 f7       	brne	.-4      	; 0x70c <LCD_init+0xa6>
	_delay_us(45);
	
	LCD_sendComnd(LCD_DESPLAY_CLEAR);
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     716:	af e3       	ldi	r26, 0x3F	; 63
     718:	bf e1       	ldi	r27, 0x1F	; 31
     71a:	11 97       	sbiw	r26, 0x01	; 1
     71c:	f1 f7       	brne	.-4      	; 0x71a <LCD_init+0xb4>
     71e:	00 c0       	rjmp	.+0      	; 0x720 <LCD_init+0xba>
     720:	00 00       	nop
	_delay_ms(2);
	
	LCD_sendComnd(LCD_ENTRY_MODE_SET);
     722:	86 e0       	ldi	r24, 0x06	; 6
     724:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     728:	b0 ef       	ldi	r27, 0xF0	; 240
     72a:	ba 95       	dec	r27
     72c:	f1 f7       	brne	.-4      	; 0x72a <LCD_init+0xc4>
	
	LCD_sendComnd(LCD_ENTRY_MODE_SET);
	_delay_us(45);
	
	#endif
}
     72e:	08 95       	ret

00000730 <LCD_sendChar>:
	
}


void LCD_sendChar(u8 Character_Data)
{
     730:	cf 93       	push	r28
     732:	c8 2f       	mov	r28, r24
	#if   LCD_MODE == LCD_FourBitMode
	
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	61 e0       	ldi	r22, 0x01	; 1
     738:	41 e0       	ldi	r20, 0x01	; 1
     73a:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	62 e0       	ldi	r22, 0x02	; 2
     742:	40 e0       	ldi	r20, 0x00	; 0
     744:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	
	private_WriteHalfPort(Character_Data>>4);                        //PORTA_REG= (PORTA_REG & 0x0f) | (Character_Data & 0xf0)
     748:	8c 2f       	mov	r24, r28
     74a:	82 95       	swap	r24
     74c:	8f 70       	andi	r24, 0x0F	; 15
     74e:	0e 94 bd 02 	call	0x57a	; 0x57a <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	63 e0       	ldi	r22, 0x03	; 3
     756:	41 e0       	ldi	r20, 0x01	; 1
     758:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     75c:	8f e9       	ldi	r24, 0x9F	; 159
     75e:	9f e0       	ldi	r25, 0x0F	; 15
     760:	01 97       	sbiw	r24, 0x01	; 1
     762:	f1 f7       	brne	.-4      	; 0x760 <LCD_sendChar+0x30>
     764:	00 c0       	rjmp	.+0      	; 0x766 <LCD_sendChar+0x36>
     766:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	63 e0       	ldi	r22, 0x03	; 3
     76c:	40 e0       	ldi	r20, 0x00	; 0
     76e:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	
	private_WriteHalfPort(Character_Data);                         //PORTA_REG= (PORTA_REG & 0x0f) | ((Character_Data & 0xf0) <<4)
     772:	8c 2f       	mov	r24, r28
     774:	0e 94 bd 02 	call	0x57a	; 0x57a <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	63 e0       	ldi	r22, 0x03	; 3
     77c:	41 e0       	ldi	r20, 0x01	; 1
     77e:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
     782:	8f e9       	ldi	r24, 0x9F	; 159
     784:	9f e0       	ldi	r25, 0x0F	; 15
     786:	01 97       	sbiw	r24, 0x01	; 1
     788:	f1 f7       	brne	.-4      	; 0x786 <LCD_sendChar+0x56>
     78a:	00 c0       	rjmp	.+0      	; 0x78c <LCD_sendChar+0x5c>
     78c:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	63 e0       	ldi	r22, 0x03	; 3
     792:	40 e0       	ldi	r20, 0x00	; 0
     794:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#endif
}
     798:	cf 91       	pop	r28
     79a:	08 95       	ret

0000079c <LCD_SendString>:

void LCD_SendString (u8 *String_Data)
{
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	ec 01       	movw	r28, r24
	while((*String_Data)!='\0')
     7a2:	88 81       	ld	r24, Y
     7a4:	88 23       	and	r24, r24
     7a6:	31 f0       	breq	.+12     	; 0x7b4 <LCD_SendString+0x18>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#endif
}

void LCD_SendString (u8 *String_Data)
     7a8:	21 96       	adiw	r28, 0x01	; 1
{
	while((*String_Data)!='\0')
	{
		LCD_sendChar(*String_Data);
     7aa:	0e 94 98 03 	call	0x730	; 0x730 <LCD_sendChar>
	#endif
}

void LCD_SendString (u8 *String_Data)
{
	while((*String_Data)!='\0')
     7ae:	89 91       	ld	r24, Y+
     7b0:	88 23       	and	r24, r24
     7b2:	d9 f7       	brne	.-10     	; 0x7aa <LCD_SendString+0xe>
	{
		LCD_sendChar(*String_Data);
		String_Data++;
	}
}
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	08 95       	ret

000007ba <LCD_SendRealNumber>:

void LCD_SendRealNumber(f64 Number)
{
     7ba:	8f 92       	push	r8
     7bc:	9f 92       	push	r9
     7be:	af 92       	push	r10
     7c0:	bf 92       	push	r11
     7c2:	cf 92       	push	r12
     7c4:	df 92       	push	r13
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62
     7d6:	60 97       	sbiw	r28, 0x10	; 16
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	f8 94       	cli
     7dc:	de bf       	out	0x3e, r29	; 62
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	cd bf       	out	0x3d, r28	; 61
     7e2:	6b 01       	movw	r12, r22
     7e4:	7c 01       	movw	r14, r24
	u8 str [16];
	u8 *tmpsign = (Number < 0)? "-" : "";
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	a9 01       	movw	r20, r18
     7ec:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__cmpsf2>
     7f0:	88 23       	and	r24, r24
     7f2:	5c f4       	brge	.+22     	; 0x80a <LCD_SendRealNumber+0x50>
	f32 tmpval = (Number < 0)? -Number : Number;
     7f4:	f7 fa       	bst	r15, 7
     7f6:	f0 94       	com	r15
     7f8:	f7 f8       	bld	r15, 7
     7fa:	f0 94       	com	r15
}

void LCD_SendRealNumber(f64 Number)
{
	u8 str [16];
	u8 *tmpsign = (Number < 0)? "-" : "";
     7fc:	0f 2e       	mov	r0, r31
     7fe:	fd e8       	ldi	r31, 0x8D	; 141
     800:	8f 2e       	mov	r8, r31
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	9f 2e       	mov	r9, r31
     806:	f0 2d       	mov	r31, r0
     808:	06 c0       	rjmp	.+12     	; 0x816 <LCD_SendRealNumber+0x5c>
     80a:	0f 2e       	mov	r0, r31
     80c:	ff e8       	ldi	r31, 0x8F	; 143
     80e:	8f 2e       	mov	r8, r31
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	9f 2e       	mov	r9, r31
     814:	f0 2d       	mov	r31, r0
	f32 tmpval = (Number < 0)? -Number : Number;
	u16 tmpint1 = (u16)tmpval;
     816:	c7 01       	movw	r24, r14
     818:	b6 01       	movw	r22, r12
     81a:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__fixunssfsi>
     81e:	dc 01       	movw	r26, r24
     820:	cb 01       	movw	r24, r22
	f32 tmpfrac = tmpval - (float)tmpint1;
	u16 tmpint2 = tmpfrac * 10000;
	sprintf(str,"%s%d.%04d", tmpsign, tmpint1, tmpint2);
     822:	2d b7       	in	r18, 0x3d	; 61
     824:	3e b7       	in	r19, 0x3e	; 62
     826:	2a 50       	subi	r18, 0x0A	; 10
     828:	30 40       	sbci	r19, 0x00	; 0
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	3e bf       	out	0x3e, r19	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	2d bf       	out	0x3d, r18	; 61
     834:	0d b7       	in	r16, 0x3d	; 61
     836:	1e b7       	in	r17, 0x3e	; 62
     838:	0f 5f       	subi	r16, 0xFF	; 255
     83a:	1f 4f       	sbci	r17, 0xFF	; 255
     83c:	5e 01       	movw	r10, r28
     83e:	08 94       	sec
     840:	a1 1c       	adc	r10, r1
     842:	b1 1c       	adc	r11, r1
     844:	ed b7       	in	r30, 0x3d	; 61
     846:	fe b7       	in	r31, 0x3e	; 62
     848:	b2 82       	std	Z+2, r11	; 0x02
     84a:	a1 82       	std	Z+1, r10	; 0x01
     84c:	20 e9       	ldi	r18, 0x90	; 144
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	f8 01       	movw	r30, r16
     852:	33 83       	std	Z+3, r19	; 0x03
     854:	22 83       	std	Z+2, r18	; 0x02
     856:	95 82       	std	Z+5, r9	; 0x05
     858:	84 82       	std	Z+4, r8	; 0x04
     85a:	97 83       	std	Z+7, r25	; 0x07
     85c:	86 83       	std	Z+6, r24	; 0x06
{
	u8 str [16];
	u8 *tmpsign = (Number < 0)? "-" : "";
	f32 tmpval = (Number < 0)? -Number : Number;
	u16 tmpint1 = (u16)tmpval;
	f32 tmpfrac = tmpval - (float)tmpint1;
     85e:	bc 01       	movw	r22, r24
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__floatunsisf>
     868:	9b 01       	movw	r18, r22
     86a:	ac 01       	movw	r20, r24
     86c:	c7 01       	movw	r24, r14
     86e:	b6 01       	movw	r22, r12
     870:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__subsf3>
	u16 tmpint2 = tmpfrac * 10000;
     874:	20 e0       	ldi	r18, 0x00	; 0
     876:	30 e4       	ldi	r19, 0x40	; 64
     878:	4c e1       	ldi	r20, 0x1C	; 28
     87a:	56 e4       	ldi	r21, 0x46	; 70
     87c:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__mulsf3>
     880:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__fixunssfsi>
     884:	dc 01       	movw	r26, r24
     886:	cb 01       	movw	r24, r22
	sprintf(str,"%s%d.%04d", tmpsign, tmpint1, tmpint2);
     888:	f8 01       	movw	r30, r16
     88a:	91 87       	std	Z+9, r25	; 0x09
     88c:	80 87       	std	Z+8, r24	; 0x08
     88e:	0e 94 70 10 	call	0x20e0	; 0x20e0 <sprintf>
	LCD_SendString(str);
     892:	2d b7       	in	r18, 0x3d	; 61
     894:	3e b7       	in	r19, 0x3e	; 62
     896:	26 5f       	subi	r18, 0xF6	; 246
     898:	3f 4f       	sbci	r19, 0xFF	; 255
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	f8 94       	cli
     89e:	3e bf       	out	0x3e, r19	; 62
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	2d bf       	out	0x3d, r18	; 61
     8a4:	c5 01       	movw	r24, r10
     8a6:	0e 94 ce 03 	call	0x79c	; 0x79c <LCD_SendString>
}
     8aa:	60 96       	adiw	r28, 0x10	; 16
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	cd bf       	out	0x3d, r28	; 61
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	1f 91       	pop	r17
     8bc:	0f 91       	pop	r16
     8be:	ff 90       	pop	r15
     8c0:	ef 90       	pop	r14
     8c2:	df 90       	pop	r13
     8c4:	cf 90       	pop	r12
     8c6:	bf 90       	pop	r11
     8c8:	af 90       	pop	r10
     8ca:	9f 90       	pop	r9
     8cc:	8f 90       	pop	r8
     8ce:	08 95       	ret

000008d0 <LCD_ClearDesplay>:

void LCD_ClearDesplay()
{
	LCD_sendComnd (LCD_DESPLAY_CLEAR);
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LCD_sendComnd>
     8d6:	8f e3       	ldi	r24, 0x3F	; 63
     8d8:	9f e1       	ldi	r25, 0x1F	; 31
     8da:	01 97       	sbiw	r24, 0x01	; 1
     8dc:	f1 f7       	brne	.-4      	; 0x8da <LCD_ClearDesplay+0xa>
     8de:	00 c0       	rjmp	.+0      	; 0x8e0 <LCD_ClearDesplay+0x10>
     8e0:	00 00       	nop
	_delay_ms(2);
	LCD_sendComnd (LCD_Cursor_At_Home_position);	
     8e2:	80 e8       	ldi	r24, 0x80	; 128
     8e4:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LCD_sendComnd>
}
     8e8:	08 95       	ret

000008ea <LCD_GoToLocation>:

void LCD_GoToLocation(u8 X_Location, u8 LineNumber)
{
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	00 d0       	rcall	.+0      	; 0x8f0 <LCD_GoToLocation+0x6>
     8f0:	00 d0       	rcall	.+0      	; 0x8f2 <LCD_GoToLocation+0x8>
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
	u8 FirstLocation[] = {0x80, 0xC0, 0x94, 0xD4};
     8f6:	90 e8       	ldi	r25, 0x80	; 128
     8f8:	99 83       	std	Y+1, r25	; 0x01
     8fa:	90 ec       	ldi	r25, 0xC0	; 192
     8fc:	9a 83       	std	Y+2, r25	; 0x02
     8fe:	94 e9       	ldi	r25, 0x94	; 148
     900:	9b 83       	std	Y+3, r25	; 0x03
     902:	94 ed       	ldi	r25, 0xD4	; 212
     904:	9c 83       	std	Y+4, r25	; 0x04
	LCD_sendComnd(FirstLocation[LineNumber-1] + X_Location-1);
     906:	81 50       	subi	r24, 0x01	; 1
     908:	fe 01       	movw	r30, r28
     90a:	e6 0f       	add	r30, r22
     90c:	f1 1d       	adc	r31, r1
     90e:	90 81       	ld	r25, Z
     910:	89 0f       	add	r24, r25
     912:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     916:	8f e9       	ldi	r24, 0x9F	; 159
     918:	9f e0       	ldi	r25, 0x0F	; 15
     91a:	01 97       	sbiw	r24, 0x01	; 1
     91c:	f1 f7       	brne	.-4      	; 0x91a <LCD_GoToLocation+0x30>
     91e:	00 c0       	rjmp	.+0      	; 0x920 <LCD_GoToLocation+0x36>
     920:	00 00       	nop
	_delay_us(1000);
}
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
     928:	0f 90       	pop	r0
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	08 95       	ret

00000930 <LCD_SendIntegarNumber>:

void LCD_SendIntegarNumber(u16 IntegerNumber)
{
     930:	0f 93       	push	r16
     932:	1f 93       	push	r17
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	cd b7       	in	r28, 0x3d	; 61
     93a:	de b7       	in	r29, 0x3e	; 62
     93c:	a0 97       	sbiw	r28, 0x20	; 32
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	de bf       	out	0x3e, r29	; 62
     944:	0f be       	out	0x3f, r0	; 63
     946:	cd bf       	out	0x3d, r28	; 61
	u16 NumberString[16];
	snprintf(NumberString,17,"%d",IntegerNumber);
     948:	2d b7       	in	r18, 0x3d	; 61
     94a:	3e b7       	in	r19, 0x3e	; 62
     94c:	28 50       	subi	r18, 0x08	; 8
     94e:	30 40       	sbci	r19, 0x00	; 0
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	f8 94       	cli
     954:	3e bf       	out	0x3e, r19	; 62
     956:	0f be       	out	0x3f, r0	; 63
     958:	2d bf       	out	0x3d, r18	; 61
     95a:	ed b7       	in	r30, 0x3d	; 61
     95c:	fe b7       	in	r31, 0x3e	; 62
     95e:	31 96       	adiw	r30, 0x01	; 1
     960:	8e 01       	movw	r16, r28
     962:	0f 5f       	subi	r16, 0xFF	; 255
     964:	1f 4f       	sbci	r17, 0xFF	; 255
     966:	ad b7       	in	r26, 0x3d	; 61
     968:	be b7       	in	r27, 0x3e	; 62
     96a:	12 96       	adiw	r26, 0x02	; 2
     96c:	1c 93       	st	X, r17
     96e:	0e 93       	st	-X, r16
     970:	11 97       	sbiw	r26, 0x01	; 1
     972:	21 e1       	ldi	r18, 0x11	; 17
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	33 83       	std	Z+3, r19	; 0x03
     978:	22 83       	std	Z+2, r18	; 0x02
     97a:	2a e9       	ldi	r18, 0x9A	; 154
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	35 83       	std	Z+5, r19	; 0x05
     980:	24 83       	std	Z+4, r18	; 0x04
     982:	97 83       	std	Z+7, r25	; 0x07
     984:	86 83       	std	Z+6, r24	; 0x06
     986:	0e 94 40 10 	call	0x2080	; 0x2080 <snprintf>
	LCD_SendString(NumberString);
     98a:	2d b7       	in	r18, 0x3d	; 61
     98c:	3e b7       	in	r19, 0x3e	; 62
     98e:	28 5f       	subi	r18, 0xF8	; 248
     990:	3f 4f       	sbci	r19, 0xFF	; 255
     992:	0f b6       	in	r0, 0x3f	; 63
     994:	f8 94       	cli
     996:	3e bf       	out	0x3e, r19	; 62
     998:	0f be       	out	0x3f, r0	; 63
     99a:	2d bf       	out	0x3d, r18	; 61
     99c:	c8 01       	movw	r24, r16
     99e:	0e 94 ce 03 	call	0x79c	; 0x79c <LCD_SendString>
}
     9a2:	a0 96       	adiw	r28, 0x20	; 32
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	f8 94       	cli
     9a8:	de bf       	out	0x3e, r29	; 62
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	cd bf       	out	0x3d, r28	; 61
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	08 95       	ret

000009b8 <LCD_SendNumberToLocation>:


void LCD_SendNumberToLocation(u16 Number,u8 X_Location, u8 LineNumber)
{
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	ec 01       	movw	r28, r24
     9be:	86 2f       	mov	r24, r22
	LCD_GoToLocation(X_Location,LineNumber);
     9c0:	64 2f       	mov	r22, r20
     9c2:	0e 94 75 04 	call	0x8ea	; 0x8ea <LCD_GoToLocation>
	LCD_SendIntegarNumber(Number);
     9c6:	ce 01       	movw	r24, r28
     9c8:	0e 94 98 04 	call	0x930	; 0x930 <LCD_SendIntegarNumber>
}
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	08 95       	ret

000009d2 <LCD_Shift>:


void LCD_Shift(u8 ShiftCmnd)
{
	LCD_sendComnd(ShiftCmnd);
     9d2:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LCD_sendComnd>
}
     9d6:	08 95       	ret

000009d8 <LED_init>:
#include "../include/LED_config.h"


void LED_init(u8 LedPort,u8 LedPin)
{
	if (LedPort <=3 && LedPin<=7)
     9d8:	84 30       	cpi	r24, 0x04	; 4
     9da:	28 f4       	brcc	.+10     	; 0x9e6 <LED_init+0xe>
     9dc:	68 30       	cpi	r22, 0x08	; 8
     9de:	18 f4       	brcc	.+6      	; 0x9e6 <LED_init+0xe>
	{
		DIO_SetPinDirection(LedPort,LedPin,DIO_PIN_OUTPUT);
     9e0:	41 e0       	ldi	r20, 0x01	; 1
     9e2:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_SetPinDirection>
     9e6:	08 95       	ret

000009e8 <LED_TurnON>:
}


void LED_TurnON(u8 LedPort,u8 LedPin)
{
	if (LedPort <=3 && LedPin<=7)
     9e8:	84 30       	cpi	r24, 0x04	; 4
     9ea:	28 f4       	brcc	.+10     	; 0x9f6 <LED_TurnON+0xe>
     9ec:	68 30       	cpi	r22, 0x08	; 8
     9ee:	18 f4       	brcc	.+6      	; 0x9f6 <LED_TurnON+0xe>
	{
		DIO_SetPinValue(LedPort,LedPin,DIO_PIN_HIGH);
     9f0:	41 e0       	ldi	r20, 0x01	; 1
     9f2:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
     9f6:	08 95       	ret

000009f8 <LED_TurnOFF>:
}


void LED_TurnOFF(u8 LedPort,u8 LedPin)
{
	if (LedPort <=3 && LedPin<=7)
     9f8:	84 30       	cpi	r24, 0x04	; 4
     9fa:	28 f4       	brcc	.+10     	; 0xa06 <LED_TurnOFF+0xe>
     9fc:	68 30       	cpi	r22, 0x08	; 8
     9fe:	18 f4       	brcc	.+6      	; 0xa06 <LED_TurnOFF+0xe>
	{
		DIO_SetPinValue(LedPort,LedPin,DIO_PIN_LOW);
     a00:	40 e0       	ldi	r20, 0x00	; 0
     a02:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
     a06:	08 95       	ret

00000a08 <LED_Toggle>:
}


void LED_Toggle(u8 LedPort,u8 LedPin)
{
	 if (LedPort <=3 && LedPin<=7)
     a08:	84 30       	cpi	r24, 0x04	; 4
     a0a:	20 f4       	brcc	.+8      	; 0xa14 <LED_Toggle+0xc>
     a0c:	68 30       	cpi	r22, 0x08	; 8
     a0e:	10 f4       	brcc	.+4      	; 0xa14 <LED_Toggle+0xc>
	 {
		DIO_TogglePinValue(LedPort,LedPin);
     a10:	0e 94 96 08 	call	0x112c	; 0x112c <DIO_TogglePinValue>
     a14:	08 95       	ret

00000a16 <SERVO_init>:
#include "../include/SERVO_interface.h"
#include "../include/SERVO_private.h"

void SERVO_init(void)
{
	DIO_SetPinDirection(TMR1_OC1A_PORT,TMR1_OC1A_PIN,DIO_PIN_OUTPUT);
     a16:	83 e0       	ldi	r24, 0x03	; 3
     a18:	65 e0       	ldi	r22, 0x05	; 5
     a1a:	41 e0       	ldi	r20, 0x01	; 1
     a1c:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_SetPinDirection>
	TMR1_init();
     a20:	0e 94 b7 0b 	call	0x176e	; 0x176e <TMR1_init>
}
     a24:	08 95       	ret

00000a26 <SERVO_TurnON>:

void SERVO_TurnON(f32 Angle)
{
	f32 DutyCycle;
	DutyCycle=5.0+(Angle/36.0);
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	40 e1       	ldi	r20, 0x10	; 16
     a2c:	52 e4       	ldi	r21, 0x42	; 66
     a2e:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__divsf3>
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	40 ea       	ldi	r20, 0xA0	; 160
     a38:	50 e4       	ldi	r21, 0x40	; 64
     a3a:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <__addsf3>
     a3e:	ab 01       	movw	r20, r22
     a40:	bc 01       	movw	r22, r24
	TMR1_SetDutyCycle_And_Freq_Value(50,DutyCycle);
     a42:	82 e3       	ldi	r24, 0x32	; 50
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <TMR1_SetDutyCycle_And_Freq_Value>
	TMR1_Start();
     a4a:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <TMR1_Start>
}
     a4e:	08 95       	ret

00000a50 <SERVO_TurnOFF>:

void SERVO_TurnOFF()
{
	TMR1_Stop();
     a50:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <TMR1_Stop>
}
     a54:	08 95       	ret

00000a56 <WHEEL_Init>:
#include "../include/MOTOR_config.h"

void WHEEL_Init()
{
	//Directions for both motors
	DIO_SetPinDirection(MOTOR_LEFTPORT,MOTOR_LEFTINPUT1,DIO_PIN_OUTPUT);
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	64 e0       	ldi	r22, 0x04	; 4
     a5a:	41 e0       	ldi	r20, 0x01	; 1
     a5c:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_LEFTPORT,MOTOR_LEFTINPUT2,DIO_PIN_OUTPUT);
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	65 e0       	ldi	r22, 0x05	; 5
     a64:	41 e0       	ldi	r20, 0x01	; 1
     a66:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_OUTPUT);
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	66 e0       	ldi	r22, 0x06	; 6
     a6e:	41 e0       	ldi	r20, 0x01	; 1
     a70:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_OUTPUT);
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	67 e0       	ldi	r22, 0x07	; 7
     a78:	41 e0       	ldi	r20, 0x01	; 1
     a7a:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_SetPinDirection>
	
	// Enable Settings for both motors
	DIO_SetPinDirection(MOTOR_ENABLEPORT,MOTOR_ENABLEPIN,DIO_PIN_OUTPUT); //ENABLE OC2
     a7e:	83 e0       	ldi	r24, 0x03	; 3
     a80:	67 e0       	ldi	r22, 0x07	; 7
     a82:	41 e0       	ldi	r20, 0x01	; 1
     a84:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_SetPinDirection>
	
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT1,DIO_PIN_LOW);
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	64 e0       	ldi	r22, 0x04	; 4
     a8c:	40 e0       	ldi	r20, 0x00	; 0
     a8e:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT2,DIO_PIN_LOW);
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	65 e0       	ldi	r22, 0x05	; 5
     a96:	40 e0       	ldi	r20, 0x00	; 0
     a98:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	
	
	// Motor2 Control
	
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_LOW);
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	66 e0       	ldi	r22, 0x06	; 6
     aa0:	40 e0       	ldi	r20, 0x00	; 0
     aa2:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_LOW);
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	67 e0       	ldi	r22, 0x07	; 7
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	
	
}
     ab0:	08 95       	ret

00000ab2 <WHEEL_MoveForward>:

void WHEEL_MoveForward ()
{
	DIO_SetPinValue(MOTOR_ENABLEPORT,MOTOR_ENABLEPIN,DIO_PIN_HIGH);
     ab2:	83 e0       	ldi	r24, 0x03	; 3
     ab4:	67 e0       	ldi	r22, 0x07	; 7
     ab6:	41 e0       	ldi	r20, 0x01	; 1
     ab8:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT1,DIO_PIN_LOW);
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	64 e0       	ldi	r22, 0x04	; 4
     ac0:	40 e0       	ldi	r20, 0x00	; 0
     ac2:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT2,DIO_PIN_HIGH);
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	65 e0       	ldi	r22, 0x05	; 5
     aca:	41 e0       	ldi	r20, 0x01	; 1
     acc:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	
	
	// Motor2 Control
	
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_LOW);
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	66 e0       	ldi	r22, 0x06	; 6
     ad4:	40 e0       	ldi	r20, 0x00	; 0
     ad6:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_HIGH);
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	67 e0       	ldi	r22, 0x07	; 7
     ade:	41 e0       	ldi	r20, 0x01	; 1
     ae0:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	
}
     ae4:	08 95       	ret

00000ae6 <WHEEL_MoveBackward>:

void WHEEL_MoveBackward ()
{
	DIO_SetPinValue(MOTOR_ENABLEPORT,MOTOR_ENABLEPIN,DIO_PIN_HIGH);
     ae6:	83 e0       	ldi	r24, 0x03	; 3
     ae8:	67 e0       	ldi	r22, 0x07	; 7
     aea:	41 e0       	ldi	r20, 0x01	; 1
     aec:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT1,DIO_PIN_HIGH);
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	64 e0       	ldi	r22, 0x04	; 4
     af4:	41 e0       	ldi	r20, 0x01	; 1
     af6:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT2,DIO_PIN_LOW);
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	65 e0       	ldi	r22, 0x05	; 5
     afe:	40 e0       	ldi	r20, 0x00	; 0
     b00:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>

	
	
	// Motor2 Control
	
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_HIGH);
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	66 e0       	ldi	r22, 0x06	; 6
     b08:	41 e0       	ldi	r20, 0x01	; 1
     b0a:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_LOW);
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	67 e0       	ldi	r22, 0x07	; 7
     b12:	40 e0       	ldi	r20, 0x00	; 0
     b14:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
}
     b18:	08 95       	ret

00000b1a <WHEEL_Stop>:


void WHEEL_Stop ()
{
	DIO_SetPinValue(MOTOR_ENABLEPORT,MOTOR_ENABLEPIN,DIO_PIN_HIGH);
     b1a:	83 e0       	ldi	r24, 0x03	; 3
     b1c:	67 e0       	ldi	r22, 0x07	; 7
     b1e:	41 e0       	ldi	r20, 0x01	; 1
     b20:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT1,DIO_PIN_LOW);
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	64 e0       	ldi	r22, 0x04	; 4
     b28:	40 e0       	ldi	r20, 0x00	; 0
     b2a:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT2,DIO_PIN_LOW);
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	65 e0       	ldi	r22, 0x05	; 5
     b32:	40 e0       	ldi	r20, 0x00	; 0
     b34:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	
	
	// Motor2 Control
	
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_LOW);
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	66 e0       	ldi	r22, 0x06	; 6
     b3c:	40 e0       	ldi	r20, 0x00	; 0
     b3e:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_LOW);
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	67 e0       	ldi	r22, 0x07	; 7
     b46:	40 e0       	ldi	r20, 0x00	; 0
     b48:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
}
     b4c:	08 95       	ret

00000b4e <WHEEL_MoveForwardRight>:


void WHEEL_MoveForwardRight ()
{
	DIO_SetPinValue(MOTOR_ENABLEPORT,MOTOR_ENABLEPIN,DIO_PIN_HIGH);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	//RIGHT WHEELS STOP, LEFT WHEELS FORWARD
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT1,DIO_PIN_LOW);
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	64 e0       	ldi	r22, 0x04	; 4
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT2,DIO_PIN_HIGH);
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	65 e0       	ldi	r22, 0x05	; 5
     b66:	41 e0       	ldi	r20, 0x01	; 1
     b68:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	
	
	// Motor2 Control
	
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_LOW);
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	66 e0       	ldi	r22, 0x06	; 6
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_LOW);
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	67 e0       	ldi	r22, 0x07	; 7
     b7a:	40 e0       	ldi	r20, 0x00	; 0
     b7c:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	
}
     b80:	08 95       	ret

00000b82 <WHEEL_MoveForwardleft>:

void WHEEL_MoveForwardleft ()
{
	DIO_SetPinValue(MOTOR_ENABLEPORT,MOTOR_ENABLEPIN,DIO_PIN_HIGH);
     b82:	83 e0       	ldi	r24, 0x03	; 3
     b84:	67 e0       	ldi	r22, 0x07	; 7
     b86:	41 e0       	ldi	r20, 0x01	; 1
     b88:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	//LEFT WHEELS STOP, RIGHT WHEELS FORWARD
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT1,DIO_PIN_LOW);
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	64 e0       	ldi	r22, 0x04	; 4
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT2,DIO_PIN_LOW);
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	65 e0       	ldi	r22, 0x05	; 5
     b9a:	40 e0       	ldi	r20, 0x00	; 0
     b9c:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	
	
	// Motor2 Control
	
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_LOW);
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	66 e0       	ldi	r22, 0x06	; 6
     ba4:	40 e0       	ldi	r20, 0x00	; 0
     ba6:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_HIGH);
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	67 e0       	ldi	r22, 0x07	; 7
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
}
     bb4:	08 95       	ret

00000bb6 <WHEEL_MoveBackwardleft>:

void WHEEL_MoveBackwardleft ()
{
	DIO_SetPinValue(MOTOR_ENABLEPORT,MOTOR_ENABLEPIN,DIO_PIN_HIGH);
     bb6:	83 e0       	ldi	r24, 0x03	; 3
     bb8:	67 e0       	ldi	r22, 0x07	; 7
     bba:	41 e0       	ldi	r20, 0x01	; 1
     bbc:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT1,DIO_PIN_LOW);
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	64 e0       	ldi	r22, 0x04	; 4
     bc4:	40 e0       	ldi	r20, 0x00	; 0
     bc6:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT2,DIO_PIN_LOW);
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	65 e0       	ldi	r22, 0x05	; 5
     bce:	40 e0       	ldi	r20, 0x00	; 0
     bd0:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	
	
	// Motor2 Control
	
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_HIGH);
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	66 e0       	ldi	r22, 0x06	; 6
     bd8:	41 e0       	ldi	r20, 0x01	; 1
     bda:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_LOW);
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	67 e0       	ldi	r22, 0x07	; 7
     be2:	40 e0       	ldi	r20, 0x00	; 0
     be4:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
}
     be8:	08 95       	ret

00000bea <WHEEL_MoveBackwardRight>:

void WHEEL_MoveBackwardRight ()
{
	DIO_SetPinValue(MOTOR_ENABLEPORT,MOTOR_ENABLEPIN,DIO_PIN_HIGH);
     bea:	83 e0       	ldi	r24, 0x03	; 3
     bec:	67 e0       	ldi	r22, 0x07	; 7
     bee:	41 e0       	ldi	r20, 0x01	; 1
     bf0:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT1,DIO_PIN_HIGH);
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	64 e0       	ldi	r22, 0x04	; 4
     bf8:	41 e0       	ldi	r20, 0x01	; 1
     bfa:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT2,DIO_PIN_LOW);
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	65 e0       	ldi	r22, 0x05	; 5
     c02:	40 e0       	ldi	r20, 0x00	; 0
     c04:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	
	
	// Motor2 Control
	
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_LOW);
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	66 e0       	ldi	r22, 0x06	; 6
     c0c:	40 e0       	ldi	r20, 0x00	; 0
     c0e:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_LOW);
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	67 e0       	ldi	r22, 0x07	; 7
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
}
     c1c:	08 95       	ret

00000c1e <WHEEL_TurnDirection>:

void WHEEL_TurnDirection ()
{
}
     c1e:	08 95       	ret

00000c20 <WHEEL_SendDutyCycleAndStart>:
void WHEEL_SendDutyCycleAndStart(u8 speed)
{
     c20:	cf 93       	push	r28
     c22:	c8 2f       	mov	r28, r24
	//WHEEL_Init();
	TMR2_init();
     c24:	0e 94 29 0c 	call	0x1852	; 0x1852 <TMR2_init>
	TMR2_SetDutyCycleValue_FastPWM(speed); // RANGE FROM 0 to 100 
     c28:	6c 2f       	mov	r22, r28
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__floatunsisf>
     c34:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <TMR2_SetDutyCycleValue_FastPWM>
	TMR2_Start();
     c38:	0e 94 36 0c 	call	0x186c	; 0x186c <TMR2_Start>
}
     c3c:	cf 91       	pop	r28
     c3e:	08 95       	ret

00000c40 <WHEEL_AdjustSpeed>:
void WHEEL_AdjustSpeed ()
{
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
	static u8 speed = 0;
	u8 *PinValue;
	DIO_ReadValue(DIO_PORTB,DIO_PIN4,PinValue);
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	64 e0       	ldi	r22, 0x04	; 4
     c48:	c0 e0       	ldi	r28, 0x00	; 0
     c4a:	d0 e0       	ldi	r29, 0x00	; 0
     c4c:	ae 01       	movw	r20, r28
     c4e:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <DIO_ReadValue>
	if(*PinValue == 1)
     c52:	88 81       	ld	r24, Y
     c54:	81 30       	cpi	r24, 0x01	; 1
     c56:	81 f4       	brne	.+32     	; 0xc78 <WHEEL_AdjustSpeed+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c58:	8f ef       	ldi	r24, 0xFF	; 255
     c5a:	96 e1       	ldi	r25, 0x16	; 22
     c5c:	a1 e1       	ldi	r26, 0x11	; 17
     c5e:	81 50       	subi	r24, 0x01	; 1
     c60:	90 40       	sbci	r25, 0x00	; 0
     c62:	a0 40       	sbci	r26, 0x00	; 0
     c64:	e1 f7       	brne	.-8      	; 0xc5e <WHEEL_AdjustSpeed+0x1e>
     c66:	00 c0       	rjmp	.+0      	; 0xc68 <WHEEL_AdjustSpeed+0x28>
     c68:	00 00       	nop
	{
		_delay_ms(350);
		if(speed > 90)
     c6a:	80 91 9e 00 	lds	r24, 0x009E
     c6e:	8b 35       	cpi	r24, 0x5B	; 91
     c70:	18 f0       	brcs	.+6      	; 0xc78 <WHEEL_AdjustSpeed+0x38>
		{
			speed+=10; // WHEEL_SpeedUP
     c72:	86 5f       	subi	r24, 0xF6	; 246
     c74:	80 93 9e 00 	sts	0x009E, r24
		}
	}
	DIO_ReadValue(DIO_PORTB,DIO_PIN5,PinValue);
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	65 e0       	ldi	r22, 0x05	; 5
     c7c:	c0 e0       	ldi	r28, 0x00	; 0
     c7e:	d0 e0       	ldi	r29, 0x00	; 0
     c80:	ae 01       	movw	r20, r28
     c82:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <DIO_ReadValue>
	if (*PinValue == 1)
     c86:	88 81       	ld	r24, Y
     c88:	81 30       	cpi	r24, 0x01	; 1
     c8a:	81 f4       	brne	.+32     	; 0xcac <WHEEL_AdjustSpeed+0x6c>
     c8c:	8f ef       	ldi	r24, 0xFF	; 255
     c8e:	96 e1       	ldi	r25, 0x16	; 22
     c90:	a1 e1       	ldi	r26, 0x11	; 17
     c92:	81 50       	subi	r24, 0x01	; 1
     c94:	90 40       	sbci	r25, 0x00	; 0
     c96:	a0 40       	sbci	r26, 0x00	; 0
     c98:	e1 f7       	brne	.-8      	; 0xc92 <WHEEL_AdjustSpeed+0x52>
     c9a:	00 c0       	rjmp	.+0      	; 0xc9c <WHEEL_AdjustSpeed+0x5c>
     c9c:	00 00       	nop
	{
		_delay_ms(350);
		if(speed > 10)
     c9e:	80 91 9e 00 	lds	r24, 0x009E
     ca2:	8b 30       	cpi	r24, 0x0B	; 11
     ca4:	18 f0       	brcs	.+6      	; 0xcac <WHEEL_AdjustSpeed+0x6c>
		{
			speed-=10; // WHEEL_SpeedUP
     ca6:	8a 50       	subi	r24, 0x0A	; 10
     ca8:	80 93 9e 00 	sts	0x009E, r24
		}
		
		
	}
	DIO_ReadValue(DIO_PORTB,DIO_PIN6,PinValue);
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	66 e0       	ldi	r22, 0x06	; 6
     cb0:	c0 e0       	ldi	r28, 0x00	; 0
     cb2:	d0 e0       	ldi	r29, 0x00	; 0
     cb4:	ae 01       	movw	r20, r28
     cb6:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <DIO_ReadValue>
	if (*PinValue == 1)
     cba:	88 81       	ld	r24, Y
     cbc:	81 30       	cpi	r24, 0x01	; 1
     cbe:	59 f4       	brne	.+22     	; 0xcd6 <WHEEL_AdjustSpeed+0x96>
     cc0:	8f ef       	ldi	r24, 0xFF	; 255
     cc2:	96 e1       	ldi	r25, 0x16	; 22
     cc4:	a1 e1       	ldi	r26, 0x11	; 17
     cc6:	81 50       	subi	r24, 0x01	; 1
     cc8:	90 40       	sbci	r25, 0x00	; 0
     cca:	a0 40       	sbci	r26, 0x00	; 0
     ccc:	e1 f7       	brne	.-8      	; 0xcc6 <WHEEL_AdjustSpeed+0x86>
     cce:	00 c0       	rjmp	.+0      	; 0xcd0 <WHEEL_AdjustSpeed+0x90>
     cd0:	00 00       	nop
	{
		_delay_ms(350);
		speed = 0; // WHEEL_SpeedReset
     cd2:	10 92 9e 00 	sts	0x009E, r1
	}
	
	OCR2 = (256*speed)/100 ; 
     cd6:	90 91 9e 00 	lds	r25, 0x009E
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	64 e6       	ldi	r22, 0x64	; 100
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__divmodhi4>
     ce4:	63 bd       	out	0x23, r22	; 35
	
}
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	08 95       	ret

00000cec <Ultrasonic_init>:



void Ultrasonic_init(void)
{
	DIO_SetPinDirection(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_PIN_OUTPUT);
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	66 e0       	ldi	r22, 0x06	; 6
     cf0:	41 e0       	ldi	r20, 0x01	; 1
     cf2:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_SetPinDirection>
	DIO_SetPinDirection(ULTRASONIC_ECHO_PORT,ULTRASONIC_ECHO_PIN,DIO_PIN_INPUT);
     cf6:	83 e0       	ldi	r24, 0x03	; 3
     cf8:	63 e0       	ldi	r22, 0x03	; 3
     cfa:	40 e0       	ldi	r20, 0x00	; 0
     cfc:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_SetPinDirection>
	DIO_SetPinValue(ULTRASONIC_ECHO_PORT,ULTRASONIC_ECHO_PIN,DIO_PIN_HIGH);
     d00:	83 e0       	ldi	r24, 0x03	; 3
     d02:	63 e0       	ldi	r22, 0x03	; 3
     d04:	41 e0       	ldi	r20, 0x01	; 1
     d06:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	EXTI_Enable(EXTI_INT1,EXTI_ANY_LOGICAL_CHANGE);
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	63 e0       	ldi	r22, 0x03	; 3
     d0e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <EXTI_Enable>
	TMR0_init();
     d12:	0e 94 30 0b 	call	0x1660	; 0x1660 <TMR0_init>
	TMR0_Start();
     d16:	0e 94 3b 0b 	call	0x1676	; 0x1676 <TMR0_Start>
}
     d1a:	08 95       	ret

00000d1c <Ultrasonic_ReadDistance>:

void Ultrasonic_ReadDistance(f64* DistanceValue)
{
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	ec 01       	movw	r28, r24
	if (!sensor_working)
     d22:	80 91 a4 00 	lds	r24, 0x00A4
     d26:	88 23       	and	r24, r24
     d28:	81 f4       	brne	.+32     	; 0xd4a <Ultrasonic_ReadDistance+0x2e>
	{
		DIO_SetPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_PIN_HIGH);
     d2a:	83 e0       	ldi	r24, 0x03	; 3
     d2c:	66 e0       	ldi	r22, 0x06	; 6
     d2e:	41 e0       	ldi	r20, 0x01	; 1
     d30:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d34:	80 e5       	ldi	r24, 0x50	; 80
     d36:	8a 95       	dec	r24
     d38:	f1 f7       	brne	.-4      	; 0xd36 <Ultrasonic_ReadDistance+0x1a>
		_delay_us(15);
		DIO_SetPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_PIN_LOW);
     d3a:	83 e0       	ldi	r24, 0x03	; 3
     d3c:	66 e0       	ldi	r22, 0x06	; 6
     d3e:	40 e0       	ldi	r20, 0x00	; 0
     d40:	0e 94 00 08 	call	0x1000	; 0x1000 <DIO_SetPinValue>
		sensor_working=1;
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	80 93 a4 00 	sts	0x00A4, r24

	}		
	*DistanceValue=distance;	
     d4a:	80 91 c3 00 	lds	r24, 0x00C3
     d4e:	90 91 c4 00 	lds	r25, 0x00C4
     d52:	a0 91 c5 00 	lds	r26, 0x00C5
     d56:	b0 91 c6 00 	lds	r27, 0x00C6
     d5a:	88 83       	st	Y, r24
     d5c:	99 83       	std	Y+1, r25	; 0x01
     d5e:	aa 83       	std	Y+2, r26	; 0x02
     d60:	bb 83       	std	Y+3, r27	; 0x03
}
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	08 95       	ret

00000d68 <__vector_2>:


void  __vector_2(void) __attribute__((signal));
void  __vector_2(void)
{
     d68:	1f 92       	push	r1
     d6a:	0f 92       	push	r0
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	0f 92       	push	r0
     d70:	11 24       	eor	r1, r1
     d72:	2f 93       	push	r18
     d74:	3f 93       	push	r19
     d76:	4f 93       	push	r20
     d78:	5f 93       	push	r21
     d7a:	6f 93       	push	r22
     d7c:	7f 93       	push	r23
     d7e:	8f 93       	push	r24
     d80:	9f 93       	push	r25
     d82:	af 93       	push	r26
     d84:	bf 93       	push	r27
     d86:	ef 93       	push	r30
     d88:	ff 93       	push	r31
	if(sensor_working==1)
     d8a:	80 91 a4 00 	lds	r24, 0x00A4
     d8e:	81 30       	cpi	r24, 0x01	; 1
     d90:	09 f0       	breq	.+2      	; 0xd94 <__vector_2+0x2c>
     d92:	53 c0       	rjmp	.+166    	; 0xe3a <__vector_2+0xd2>
	{
		if (rising_edge==0)
     d94:	80 91 a3 00 	lds	r24, 0x00A3
     d98:	88 23       	and	r24, r24
     d9a:	69 f4       	brne	.+26     	; 0xdb6 <__vector_2+0x4e>
		{
			TCNT0=0X00;
     d9c:	12 be       	out	0x32, r1	; 50
			rising_edge=1;
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	80 93 a3 00 	sts	0x00A3, r24
			timer_counter=0;
     da4:	10 92 9f 00 	sts	0x009F, r1
     da8:	10 92 a0 00 	sts	0x00A0, r1
     dac:	10 92 a1 00 	sts	0x00A1, r1
     db0:	10 92 a2 00 	sts	0x00A2, r1
     db4:	42 c0       	rjmp	.+132    	; 0xe3a <__vector_2+0xd2>
		}
		else
		{
			distance=(343*(timer_counter*256+TCNT0)/320000)+1;
     db6:	22 b7       	in	r18, 0x32	; 50
     db8:	80 91 9f 00 	lds	r24, 0x009F
     dbc:	90 91 a0 00 	lds	r25, 0x00A0
     dc0:	a0 91 a1 00 	lds	r26, 0x00A1
     dc4:	b0 91 a2 00 	lds	r27, 0x00A2
     dc8:	66 27       	eor	r22, r22
     dca:	78 2f       	mov	r23, r24
     dcc:	89 2f       	mov	r24, r25
     dce:	9a 2f       	mov	r25, r26
     dd0:	62 0f       	add	r22, r18
     dd2:	71 1d       	adc	r23, r1
     dd4:	81 1d       	adc	r24, r1
     dd6:	91 1d       	adc	r25, r1
     dd8:	27 e5       	ldi	r18, 0x57	; 87
     dda:	31 e0       	ldi	r19, 0x01	; 1
     ddc:	40 e0       	ldi	r20, 0x00	; 0
     dde:	50 e0       	ldi	r21, 0x00	; 0
     de0:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__mulsi3>
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	32 ee       	ldi	r19, 0xE2	; 226
     de8:	44 e0       	ldi	r20, 0x04	; 4
     dea:	50 e0       	ldi	r21, 0x00	; 0
     dec:	0e 94 0a 10 	call	0x2014	; 0x2014 <__udivmodsi4>
     df0:	ca 01       	movw	r24, r20
     df2:	b9 01       	movw	r22, r18
     df4:	6f 5f       	subi	r22, 0xFF	; 255
     df6:	7f 4f       	sbci	r23, 0xFF	; 255
     df8:	8f 4f       	sbci	r24, 0xFF	; 255
     dfa:	9f 4f       	sbci	r25, 0xFF	; 255
     dfc:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__floatunsisf>
     e00:	dc 01       	movw	r26, r24
     e02:	cb 01       	movw	r24, r22
     e04:	80 93 c3 00 	sts	0x00C3, r24
     e08:	90 93 c4 00 	sts	0x00C4, r25
     e0c:	a0 93 c5 00 	sts	0x00C5, r26
     e10:	b0 93 c6 00 	sts	0x00C6, r27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e14:	8f ef       	ldi	r24, 0xFF	; 255
     e16:	93 ef       	ldi	r25, 0xF3	; 243
     e18:	a1 e0       	ldi	r26, 0x01	; 1
     e1a:	81 50       	subi	r24, 0x01	; 1
     e1c:	90 40       	sbci	r25, 0x00	; 0
     e1e:	a0 40       	sbci	r26, 0x00	; 0
     e20:	e1 f7       	brne	.-8      	; 0xe1a <__vector_2+0xb2>
     e22:	00 c0       	rjmp	.+0      	; 0xe24 <__vector_2+0xbc>
     e24:	00 00       	nop
			_delay_ms(40);
			timer_counter=0;
     e26:	10 92 9f 00 	sts	0x009F, r1
     e2a:	10 92 a0 00 	sts	0x00A0, r1
     e2e:	10 92 a1 00 	sts	0x00A1, r1
     e32:	10 92 a2 00 	sts	0x00A2, r1
			rising_edge=0;
     e36:	10 92 a3 00 	sts	0x00A3, r1
		}
	}
}
     e3a:	ff 91       	pop	r31
     e3c:	ef 91       	pop	r30
     e3e:	bf 91       	pop	r27
     e40:	af 91       	pop	r26
     e42:	9f 91       	pop	r25
     e44:	8f 91       	pop	r24
     e46:	7f 91       	pop	r23
     e48:	6f 91       	pop	r22
     e4a:	5f 91       	pop	r21
     e4c:	4f 91       	pop	r20
     e4e:	3f 91       	pop	r19
     e50:	2f 91       	pop	r18
     e52:	0f 90       	pop	r0
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	0f 90       	pop	r0
     e58:	1f 90       	pop	r1
     e5a:	18 95       	reti

00000e5c <__vector_11>:


void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     e5c:	1f 92       	push	r1
     e5e:	0f 92       	push	r0
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	0f 92       	push	r0
     e64:	11 24       	eor	r1, r1
     e66:	2f 93       	push	r18
     e68:	8f 93       	push	r24
     e6a:	9f 93       	push	r25
     e6c:	af 93       	push	r26
     e6e:	bf 93       	push	r27
	timer_counter++;
     e70:	80 91 9f 00 	lds	r24, 0x009F
     e74:	90 91 a0 00 	lds	r25, 0x00A0
     e78:	a0 91 a1 00 	lds	r26, 0x00A1
     e7c:	b0 91 a2 00 	lds	r27, 0x00A2
     e80:	01 96       	adiw	r24, 0x01	; 1
     e82:	a1 1d       	adc	r26, r1
     e84:	b1 1d       	adc	r27, r1
     e86:	80 93 9f 00 	sts	0x009F, r24
     e8a:	90 93 a0 00 	sts	0x00A0, r25
     e8e:	a0 93 a1 00 	sts	0x00A1, r26
     e92:	b0 93 a2 00 	sts	0x00A2, r27
	if( timer_counter >1462)
     e96:	87 3b       	cpi	r24, 0xB7	; 183
     e98:	25 e0       	ldi	r18, 0x05	; 5
     e9a:	92 07       	cpc	r25, r18
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	a2 07       	cpc	r26, r18
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	b2 07       	cpc	r27, r18
     ea4:	68 f0       	brcs	.+26     	; 0xec0 <__vector_11+0x64>
	{
		TCNT0 = 0x00;
     ea6:	12 be       	out	0x32, r1	; 50
		sensor_working=0;
     ea8:	10 92 a4 00 	sts	0x00A4, r1
		rising_edge=0;
     eac:	10 92 a3 00 	sts	0x00A3, r1
		timer_counter=0;
     eb0:	10 92 9f 00 	sts	0x009F, r1
     eb4:	10 92 a0 00 	sts	0x00A0, r1
     eb8:	10 92 a1 00 	sts	0x00A1, r1
     ebc:	10 92 a2 00 	sts	0x00A2, r1
	}
	
     ec0:	bf 91       	pop	r27
     ec2:	af 91       	pop	r26
     ec4:	9f 91       	pop	r25
     ec6:	8f 91       	pop	r24
     ec8:	2f 91       	pop	r18
     eca:	0f 90       	pop	r0
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	0f 90       	pop	r0
     ed0:	1f 90       	pop	r1
     ed2:	18 95       	reti

00000ed4 <DIO_SetPinDirection>:


DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PInDirection<=DIO_PIN_OUTPUT))
     ed4:	84 30       	cpi	r24, 0x04	; 4
     ed6:	08 f0       	brcs	.+2      	; 0xeda <DIO_SetPinDirection+0x6>
     ed8:	8b c0       	rjmp	.+278    	; 0xff0 <DIO_SetPinDirection+0x11c>
     eda:	68 30       	cpi	r22, 0x08	; 8
     edc:	08 f0       	brcs	.+2      	; 0xee0 <DIO_SetPinDirection+0xc>
     ede:	8a c0       	rjmp	.+276    	; 0xff4 <DIO_SetPinDirection+0x120>
     ee0:	42 30       	cpi	r20, 0x02	; 2
     ee2:	08 f0       	brcs	.+2      	; 0xee6 <DIO_SetPinDirection+0x12>
     ee4:	89 c0       	rjmp	.+274    	; 0xff8 <DIO_SetPinDirection+0x124>
	{
    	switch(PortId)
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	41 f1       	breq	.+80     	; 0xf3a <DIO_SetPinDirection+0x66>
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	38 f0       	brcs	.+14     	; 0xefc <DIO_SetPinDirection+0x28>
     eee:	82 30       	cpi	r24, 0x02	; 2
     ef0:	09 f4       	brne	.+2      	; 0xef4 <DIO_SetPinDirection+0x20>
     ef2:	41 c0       	rjmp	.+130    	; 0xf76 <DIO_SetPinDirection+0xa2>
     ef4:	83 30       	cpi	r24, 0x03	; 3
     ef6:	09 f0       	breq	.+2      	; 0xefa <DIO_SetPinDirection+0x26>
     ef8:	81 c0       	rjmp	.+258    	; 0xffc <DIO_SetPinDirection+0x128>
     efa:	5b c0       	rjmp	.+182    	; 0xfb2 <DIO_SetPinDirection+0xde>
    	{
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
     efc:	41 30       	cpi	r20, 0x01	; 1
     efe:	71 f4       	brne	.+28     	; 0xf1c <DIO_SetPinDirection+0x48>
     f00:	2a b3       	in	r18, 0x1a	; 26
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	ac 01       	movw	r20, r24
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <DIO_SetPinDirection+0x3a>
     f0a:	44 0f       	add	r20, r20
     f0c:	55 1f       	adc	r21, r21
     f0e:	6a 95       	dec	r22
     f10:	e2 f7       	brpl	.-8      	; 0xf0a <DIO_SetPinDirection+0x36>
     f12:	ba 01       	movw	r22, r20
     f14:	62 2b       	or	r22, r18
     f16:	6a bb       	out	0x1a, r22	; 26



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	08 95       	ret
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PInDirection<=DIO_PIN_OUTPUT))
	{
    	switch(PortId)
    	{
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
     f1c:	2a b3       	in	r18, 0x1a	; 26
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	ac 01       	movw	r20, r24
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <DIO_SetPinDirection+0x56>
     f26:	44 0f       	add	r20, r20
     f28:	55 1f       	adc	r21, r21
     f2a:	6a 95       	dec	r22
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <DIO_SetPinDirection+0x52>
     f2e:	ba 01       	movw	r22, r20
     f30:	60 95       	com	r22
     f32:	62 23       	and	r22, r18
     f34:	6a bb       	out	0x1a, r22	; 26



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	08 95       	ret
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
     f3a:	41 30       	cpi	r20, 0x01	; 1
     f3c:	69 f4       	brne	.+26     	; 0xf58 <DIO_SetPinDirection+0x84>
     f3e:	47 b3       	in	r20, 0x17	; 23
     f40:	21 e0       	ldi	r18, 0x01	; 1
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	c9 01       	movw	r24, r18
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <DIO_SetPinDirection+0x78>
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	6a 95       	dec	r22
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <DIO_SetPinDirection+0x74>
     f50:	84 2b       	or	r24, r20
     f52:	87 bb       	out	0x17, r24	; 23



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	08 95       	ret
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
     f58:	27 b3       	in	r18, 0x17	; 23
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	ac 01       	movw	r20, r24
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <DIO_SetPinDirection+0x92>
     f62:	44 0f       	add	r20, r20
     f64:	55 1f       	adc	r21, r21
     f66:	6a 95       	dec	r22
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <DIO_SetPinDirection+0x8e>
     f6a:	ba 01       	movw	r22, r20
     f6c:	60 95       	com	r22
     f6e:	62 23       	and	r22, r18
     f70:	67 bb       	out	0x17, r22	; 23



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	08 95       	ret
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
     f76:	41 30       	cpi	r20, 0x01	; 1
     f78:	69 f4       	brne	.+26     	; 0xf94 <DIO_SetPinDirection+0xc0>
     f7a:	44 b3       	in	r20, 0x14	; 20
     f7c:	21 e0       	ldi	r18, 0x01	; 1
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	c9 01       	movw	r24, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <DIO_SetPinDirection+0xb4>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	6a 95       	dec	r22
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <DIO_SetPinDirection+0xb0>
     f8c:	84 2b       	or	r24, r20
     f8e:	84 bb       	out	0x14, r24	; 20



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	08 95       	ret
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
     f94:	24 b3       	in	r18, 0x14	; 20
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	ac 01       	movw	r20, r24
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <DIO_SetPinDirection+0xce>
     f9e:	44 0f       	add	r20, r20
     fa0:	55 1f       	adc	r21, r21
     fa2:	6a 95       	dec	r22
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <DIO_SetPinDirection+0xca>
     fa6:	ba 01       	movw	r22, r20
     fa8:	60 95       	com	r22
     faa:	62 23       	and	r22, r18
     fac:	64 bb       	out	0x14, r22	; 20



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	08 95       	ret
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
		   break;
		   
		   case DIO_PORTD:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRD_REG,PinId)) : (CLR_BIT(DDRD_REG,PinId));
     fb2:	41 30       	cpi	r20, 0x01	; 1
     fb4:	71 f4       	brne	.+28     	; 0xfd2 <DIO_SetPinDirection+0xfe>
     fb6:	21 b3       	in	r18, 0x11	; 17
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	ac 01       	movw	r20, r24
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <DIO_SetPinDirection+0xf0>
     fc0:	44 0f       	add	r20, r20
     fc2:	55 1f       	adc	r21, r21
     fc4:	6a 95       	dec	r22
     fc6:	e2 f7       	brpl	.-8      	; 0xfc0 <DIO_SetPinDirection+0xec>
     fc8:	ba 01       	movw	r22, r20
     fca:	62 2b       	or	r22, r18
     fcc:	61 bb       	out	0x11, r22	; 17



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	08 95       	ret
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
		   break;
		   
		   case DIO_PORTD:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRD_REG,PinId)) : (CLR_BIT(DDRD_REG,PinId));
     fd2:	21 b3       	in	r18, 0x11	; 17
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	ac 01       	movw	r20, r24
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <DIO_SetPinDirection+0x10c>
     fdc:	44 0f       	add	r20, r20
     fde:	55 1f       	adc	r21, r21
     fe0:	6a 95       	dec	r22
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <DIO_SetPinDirection+0x108>
     fe4:	ba 01       	movw	r22, r20
     fe6:	60 95       	com	r22
     fe8:	62 23       	and	r22, r18
     fea:	61 bb       	out	0x11, r22	; 17



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	08 95       	ret
		   break;
	    }	
	} 
	else
	{
		ErrorStatus = DIO_NOK;
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	08 95       	ret
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	08 95       	ret
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	08 95       	ret



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     ffc:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     ffe:	08 95       	ret

00001000 <DIO_SetPinValue>:

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PinValue<=DIO_PIN_HIGH))
    1000:	84 30       	cpi	r24, 0x04	; 4
    1002:	08 f0       	brcs	.+2      	; 0x1006 <DIO_SetPinValue+0x6>
    1004:	8b c0       	rjmp	.+278    	; 0x111c <DIO_SetPinValue+0x11c>
    1006:	68 30       	cpi	r22, 0x08	; 8
    1008:	08 f0       	brcs	.+2      	; 0x100c <DIO_SetPinValue+0xc>
    100a:	8a c0       	rjmp	.+276    	; 0x1120 <DIO_SetPinValue+0x120>
    100c:	42 30       	cpi	r20, 0x02	; 2
    100e:	08 f0       	brcs	.+2      	; 0x1012 <DIO_SetPinValue+0x12>
    1010:	89 c0       	rjmp	.+274    	; 0x1124 <DIO_SetPinValue+0x124>
	{
			switch (PortId)
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	41 f1       	breq	.+80     	; 0x1066 <DIO_SetPinValue+0x66>
    1016:	81 30       	cpi	r24, 0x01	; 1
    1018:	38 f0       	brcs	.+14     	; 0x1028 <DIO_SetPinValue+0x28>
    101a:	82 30       	cpi	r24, 0x02	; 2
    101c:	09 f4       	brne	.+2      	; 0x1020 <DIO_SetPinValue+0x20>
    101e:	41 c0       	rjmp	.+130    	; 0x10a2 <DIO_SetPinValue+0xa2>
    1020:	83 30       	cpi	r24, 0x03	; 3
    1022:	09 f0       	breq	.+2      	; 0x1026 <DIO_SetPinValue+0x26>
    1024:	81 c0       	rjmp	.+258    	; 0x1128 <DIO_SetPinValue+0x128>
    1026:	5b c0       	rjmp	.+182    	; 0x10de <DIO_SetPinValue+0xde>
			{
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
    1028:	41 30       	cpi	r20, 0x01	; 1
    102a:	71 f4       	brne	.+28     	; 0x1048 <DIO_SetPinValue+0x48>
    102c:	2b b3       	in	r18, 0x1b	; 27
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	ac 01       	movw	r20, r24
    1034:	02 c0       	rjmp	.+4      	; 0x103a <DIO_SetPinValue+0x3a>
    1036:	44 0f       	add	r20, r20
    1038:	55 1f       	adc	r21, r21
    103a:	6a 95       	dec	r22
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <DIO_SetPinValue+0x36>
    103e:	ba 01       	movw	r22, r20
    1040:	62 2b       	or	r22, r18
    1042:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	08 95       	ret
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PinValue<=DIO_PIN_HIGH))
	{
			switch (PortId)
			{
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
    1048:	2b b3       	in	r18, 0x1b	; 27
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	ac 01       	movw	r20, r24
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <DIO_SetPinValue+0x56>
    1052:	44 0f       	add	r20, r20
    1054:	55 1f       	adc	r21, r21
    1056:	6a 95       	dec	r22
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <DIO_SetPinValue+0x52>
    105a:	ba 01       	movw	r22, r20
    105c:	60 95       	com	r22
    105e:	62 23       	and	r22, r18
    1060:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	08 95       	ret
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
    1066:	41 30       	cpi	r20, 0x01	; 1
    1068:	69 f4       	brne	.+26     	; 0x1084 <DIO_SetPinValue+0x84>
    106a:	48 b3       	in	r20, 0x18	; 24
    106c:	21 e0       	ldi	r18, 0x01	; 1
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	c9 01       	movw	r24, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <DIO_SetPinValue+0x78>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	6a 95       	dec	r22
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <DIO_SetPinValue+0x74>
    107c:	84 2b       	or	r24, r20
    107e:	88 bb       	out	0x18, r24	; 24
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	08 95       	ret
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
    1084:	28 b3       	in	r18, 0x18	; 24
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	ac 01       	movw	r20, r24
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_SetPinValue+0x92>
    108e:	44 0f       	add	r20, r20
    1090:	55 1f       	adc	r21, r21
    1092:	6a 95       	dec	r22
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_SetPinValue+0x8e>
    1096:	ba 01       	movw	r22, r20
    1098:	60 95       	com	r22
    109a:	62 23       	and	r22, r18
    109c:	68 bb       	out	0x18, r22	; 24
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	08 95       	ret
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
    10a2:	41 30       	cpi	r20, 0x01	; 1
    10a4:	69 f4       	brne	.+26     	; 0x10c0 <DIO_SetPinValue+0xc0>
    10a6:	45 b3       	in	r20, 0x15	; 21
    10a8:	21 e0       	ldi	r18, 0x01	; 1
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	c9 01       	movw	r24, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <DIO_SetPinValue+0xb4>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	6a 95       	dec	r22
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <DIO_SetPinValue+0xb0>
    10b8:	84 2b       	or	r24, r20
    10ba:	85 bb       	out	0x15, r24	; 21
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	08 95       	ret
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
    10c0:	25 b3       	in	r18, 0x15	; 21
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	ac 01       	movw	r20, r24
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <DIO_SetPinValue+0xce>
    10ca:	44 0f       	add	r20, r20
    10cc:	55 1f       	adc	r21, r21
    10ce:	6a 95       	dec	r22
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <DIO_SetPinValue+0xca>
    10d2:	ba 01       	movw	r22, r20
    10d4:	60 95       	com	r22
    10d6:	62 23       	and	r22, r18
    10d8:	65 bb       	out	0x15, r22	; 21
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	08 95       	ret
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTD:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTD_REG,PinId)) : (CLR_BIT(PORTD_REG,PinId)) ;
    10de:	41 30       	cpi	r20, 0x01	; 1
    10e0:	71 f4       	brne	.+28     	; 0x10fe <DIO_SetPinValue+0xfe>
    10e2:	22 b3       	in	r18, 0x12	; 18
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	ac 01       	movw	r20, r24
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <DIO_SetPinValue+0xf0>
    10ec:	44 0f       	add	r20, r20
    10ee:	55 1f       	adc	r21, r21
    10f0:	6a 95       	dec	r22
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <DIO_SetPinValue+0xec>
    10f4:	ba 01       	movw	r22, r20
    10f6:	62 2b       	or	r22, r18
    10f8:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	08 95       	ret
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTD:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTD_REG,PinId)) : (CLR_BIT(PORTD_REG,PinId)) ;
    10fe:	22 b3       	in	r18, 0x12	; 18
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	ac 01       	movw	r20, r24
    1106:	02 c0       	rjmp	.+4      	; 0x110c <DIO_SetPinValue+0x10c>
    1108:	44 0f       	add	r20, r20
    110a:	55 1f       	adc	r21, r21
    110c:	6a 95       	dec	r22
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <DIO_SetPinValue+0x108>
    1110:	ba 01       	movw	r22, r20
    1112:	60 95       	com	r22
    1114:	62 23       	and	r22, r18
    1116:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	08 95       	ret
			    break;
			}	
		} 
	else
	{
		ErrorStatus = DIO_NOK;
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	08 95       	ret
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	08 95       	ret
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	08 95       	ret
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
    1128:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    112a:	08 95       	ret

0000112c <DIO_TogglePinValue>:
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7))  //edit all
    112c:	84 30       	cpi	r24, 0x04	; 4
    112e:	08 f0       	brcs	.+2      	; 0x1132 <DIO_TogglePinValue+0x6>
    1130:	45 c0       	rjmp	.+138    	; 0x11bc <DIO_TogglePinValue+0x90>
    1132:	68 30       	cpi	r22, 0x08	; 8
    1134:	08 f0       	brcs	.+2      	; 0x1138 <DIO_TogglePinValue+0xc>
    1136:	44 c0       	rjmp	.+136    	; 0x11c0 <DIO_TogglePinValue+0x94>
	{
		switch (PortId)
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	b1 f0       	breq	.+44     	; 0x1168 <DIO_TogglePinValue+0x3c>
    113c:	81 30       	cpi	r24, 0x01	; 1
    113e:	30 f0       	brcs	.+12     	; 0x114c <DIO_TogglePinValue+0x20>
    1140:	82 30       	cpi	r24, 0x02	; 2
    1142:	01 f1       	breq	.+64     	; 0x1184 <DIO_TogglePinValue+0x58>
    1144:	83 30       	cpi	r24, 0x03	; 3
    1146:	09 f0       	breq	.+2      	; 0x114a <DIO_TogglePinValue+0x1e>
    1148:	3d c0       	rjmp	.+122    	; 0x11c4 <DIO_TogglePinValue+0x98>
    114a:	2a c0       	rjmp	.+84     	; 0x11a0 <DIO_TogglePinValue+0x74>
		{
			case DIO_PORTA:
			TGL_BIT(PORTA_REG,PinId);
    114c:	2b b3       	in	r18, 0x1b	; 27
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	ac 01       	movw	r20, r24
    1154:	02 c0       	rjmp	.+4      	; 0x115a <DIO_TogglePinValue+0x2e>
    1156:	44 0f       	add	r20, r20
    1158:	55 1f       	adc	r21, r21
    115a:	6a 95       	dec	r22
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <DIO_TogglePinValue+0x2a>
    115e:	ba 01       	movw	r22, r20
    1160:	62 27       	eor	r22, r18
    1162:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
    1164:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch (PortId)
		{
			case DIO_PORTA:
			TGL_BIT(PORTA_REG,PinId);
			break;
    1166:	08 95       	ret
			
			case DIO_PORTB:
			TGL_BIT(PORTB_REG,PinId);
    1168:	28 b3       	in	r18, 0x18	; 24
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	ac 01       	movw	r20, r24
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <DIO_TogglePinValue+0x4a>
    1172:	44 0f       	add	r20, r20
    1174:	55 1f       	adc	r21, r21
    1176:	6a 95       	dec	r22
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <DIO_TogglePinValue+0x46>
    117a:	ba 01       	movw	r22, r20
    117c:	62 27       	eor	r22, r18
    117e:	68 bb       	out	0x18, r22	; 24
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
    1180:	80 e0       	ldi	r24, 0x00	; 0
			TGL_BIT(PORTA_REG,PinId);
			break;
			
			case DIO_PORTB:
			TGL_BIT(PORTB_REG,PinId);
			break;
    1182:	08 95       	ret
			
			case DIO_PORTC:
			TGL_BIT(PORTC_REG,PinId);
    1184:	25 b3       	in	r18, 0x15	; 21
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	ac 01       	movw	r20, r24
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <DIO_TogglePinValue+0x66>
    118e:	44 0f       	add	r20, r20
    1190:	55 1f       	adc	r21, r21
    1192:	6a 95       	dec	r22
    1194:	e2 f7       	brpl	.-8      	; 0x118e <DIO_TogglePinValue+0x62>
    1196:	ba 01       	movw	r22, r20
    1198:	62 27       	eor	r22, r18
    119a:	65 bb       	out	0x15, r22	; 21
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
    119c:	80 e0       	ldi	r24, 0x00	; 0
			TGL_BIT(PORTB_REG,PinId);
			break;
			
			case DIO_PORTC:
			TGL_BIT(PORTC_REG,PinId);
			break;
    119e:	08 95       	ret
			
			case DIO_PORTD:
			TGL_BIT(PORTD_REG,PinId);
    11a0:	22 b3       	in	r18, 0x12	; 18
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	ac 01       	movw	r20, r24
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <DIO_TogglePinValue+0x82>
    11aa:	44 0f       	add	r20, r20
    11ac:	55 1f       	adc	r21, r21
    11ae:	6a 95       	dec	r22
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <DIO_TogglePinValue+0x7e>
    11b2:	ba 01       	movw	r22, r20
    11b4:	62 27       	eor	r22, r18
    11b6:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
    11b8:	80 e0       	ldi	r24, 0x00	; 0
			TGL_BIT(PORTC_REG,PinId);
			break;
			
			case DIO_PORTD:
			TGL_BIT(PORTD_REG,PinId);
			break;
    11ba:	08 95       	ret
		}
	} 
	else
	{
		ErrorStatus = DIO_NOK;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	08 95       	ret
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	08 95       	ret
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
    11c4:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    11c6:	08 95       	ret

000011c8 <DIO_ReadValue>:
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PinValue!=NULL)) //wild pointer 
    11c8:	84 30       	cpi	r24, 0x04	; 4
    11ca:	08 f0       	brcs	.+2      	; 0x11ce <DIO_ReadValue+0x6>
    11cc:	49 c0       	rjmp	.+146    	; 0x1260 <DIO_ReadValue+0x98>
    11ce:	68 30       	cpi	r22, 0x08	; 8
    11d0:	08 f0       	brcs	.+2      	; 0x11d4 <DIO_ReadValue+0xc>
    11d2:	48 c0       	rjmp	.+144    	; 0x1264 <DIO_ReadValue+0x9c>
    11d4:	41 15       	cp	r20, r1
    11d6:	51 05       	cpc	r21, r1
    11d8:	09 f4       	brne	.+2      	; 0x11dc <DIO_ReadValue+0x14>
    11da:	46 c0       	rjmp	.+140    	; 0x1268 <DIO_ReadValue+0xa0>
	{
		switch (PortId)
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	b1 f0       	breq	.+44     	; 0x120c <DIO_ReadValue+0x44>
    11e0:	81 30       	cpi	r24, 0x01	; 1
    11e2:	30 f0       	brcs	.+12     	; 0x11f0 <DIO_ReadValue+0x28>
    11e4:	82 30       	cpi	r24, 0x02	; 2
    11e6:	01 f1       	breq	.+64     	; 0x1228 <DIO_ReadValue+0x60>
    11e8:	83 30       	cpi	r24, 0x03	; 3
    11ea:	09 f0       	breq	.+2      	; 0x11ee <DIO_ReadValue+0x26>
    11ec:	3f c0       	rjmp	.+126    	; 0x126c <DIO_ReadValue+0xa4>
    11ee:	2a c0       	rjmp	.+84     	; 0x1244 <DIO_ReadValue+0x7c>
		{
			case DIO_PORTA:
			*PinValue= GET_BIT(PINA_REG,PinId);
    11f0:	89 b3       	in	r24, 0x19	; 25
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	9c 01       	movw	r18, r24
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <DIO_ReadValue+0x34>
    11f8:	35 95       	asr	r19
    11fa:	27 95       	ror	r18
    11fc:	6a 95       	dec	r22
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <DIO_ReadValue+0x30>
    1200:	b9 01       	movw	r22, r18
    1202:	61 70       	andi	r22, 0x01	; 1
    1204:	fa 01       	movw	r30, r20
    1206:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1208:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch (PortId)
		{
			case DIO_PORTA:
			*PinValue= GET_BIT(PINA_REG,PinId);
			break;
    120a:	08 95       	ret
			
			case DIO_PORTB:
			*PinValue= GET_BIT(PINB_REG,PinId);
    120c:	86 b3       	in	r24, 0x16	; 22
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	9c 01       	movw	r18, r24
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_ReadValue+0x50>
    1214:	35 95       	asr	r19
    1216:	27 95       	ror	r18
    1218:	6a 95       	dec	r22
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_ReadValue+0x4c>
    121c:	b9 01       	movw	r22, r18
    121e:	61 70       	andi	r22, 0x01	; 1
    1220:	fa 01       	movw	r30, r20
    1222:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1224:	80 e0       	ldi	r24, 0x00	; 0
			*PinValue= GET_BIT(PINA_REG,PinId);
			break;
			
			case DIO_PORTB:
			*PinValue= GET_BIT(PINB_REG,PinId);
			break;
    1226:	08 95       	ret
			
			case DIO_PORTC:
			*PinValue= GET_BIT(PINC_REG,PinId);
    1228:	83 b3       	in	r24, 0x13	; 19
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	9c 01       	movw	r18, r24
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <DIO_ReadValue+0x6c>
    1230:	35 95       	asr	r19
    1232:	27 95       	ror	r18
    1234:	6a 95       	dec	r22
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <DIO_ReadValue+0x68>
    1238:	b9 01       	movw	r22, r18
    123a:	61 70       	andi	r22, 0x01	; 1
    123c:	fa 01       	movw	r30, r20
    123e:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1240:	80 e0       	ldi	r24, 0x00	; 0
			*PinValue= GET_BIT(PINB_REG,PinId);
			break;
			
			case DIO_PORTC:
			*PinValue= GET_BIT(PINC_REG,PinId);
			break;
    1242:	08 95       	ret
			
			case DIO_PORTD:
			*PinValue= GET_BIT(PIND_REG,PinId);
    1244:	80 b3       	in	r24, 0x10	; 16
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	9c 01       	movw	r18, r24
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <DIO_ReadValue+0x88>
    124c:	35 95       	asr	r19
    124e:	27 95       	ror	r18
    1250:	6a 95       	dec	r22
    1252:	e2 f7       	brpl	.-8      	; 0x124c <DIO_ReadValue+0x84>
    1254:	b9 01       	movw	r22, r18
    1256:	61 70       	andi	r22, 0x01	; 1
    1258:	fa 01       	movw	r30, r20
    125a:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    125c:	80 e0       	ldi	r24, 0x00	; 0
			*PinValue= GET_BIT(PINC_REG,PinId);
			break;
			
			case DIO_PORTD:
			*PinValue= GET_BIT(PIND_REG,PinId);
			break;
    125e:	08 95       	ret
		}
	} 
	else
	{
		ErrorStatus = DIO_NOK;
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	08 95       	ret
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	08 95       	ret
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	08 95       	ret
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    126c:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    126e:	08 95       	ret

00001270 <DIO_activePinInPullUpResistance>:
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	 if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7))
    1270:	84 30       	cpi	r24, 0x04	; 4
    1272:	08 f0       	brcs	.+2      	; 0x1276 <DIO_activePinInPullUpResistance+0x6>
    1274:	45 c0       	rjmp	.+138    	; 0x1300 <DIO_activePinInPullUpResistance+0x90>
    1276:	68 30       	cpi	r22, 0x08	; 8
    1278:	08 f0       	brcs	.+2      	; 0x127c <DIO_activePinInPullUpResistance+0xc>
    127a:	44 c0       	rjmp	.+136    	; 0x1304 <DIO_activePinInPullUpResistance+0x94>
	 {
		 switch(PortId)
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	b1 f0       	breq	.+44     	; 0x12ac <DIO_activePinInPullUpResistance+0x3c>
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	30 f0       	brcs	.+12     	; 0x1290 <DIO_activePinInPullUpResistance+0x20>
    1284:	82 30       	cpi	r24, 0x02	; 2
    1286:	01 f1       	breq	.+64     	; 0x12c8 <DIO_activePinInPullUpResistance+0x58>
    1288:	83 30       	cpi	r24, 0x03	; 3
    128a:	09 f0       	breq	.+2      	; 0x128e <DIO_activePinInPullUpResistance+0x1e>
    128c:	3d c0       	rjmp	.+122    	; 0x1308 <DIO_activePinInPullUpResistance+0x98>
    128e:	2a c0       	rjmp	.+84     	; 0x12e4 <DIO_activePinInPullUpResistance+0x74>
		 {
			 case DIO_PORTA:
			 SET_BIT(PORTA_REG,PinId);
    1290:	2b b3       	in	r18, 0x1b	; 27
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	ac 01       	movw	r20, r24
    1298:	02 c0       	rjmp	.+4      	; 0x129e <DIO_activePinInPullUpResistance+0x2e>
    129a:	44 0f       	add	r20, r20
    129c:	55 1f       	adc	r21, r21
    129e:	6a 95       	dec	r22
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <DIO_activePinInPullUpResistance+0x2a>
    12a2:	ba 01       	movw	r22, r20
    12a4:	62 2b       	or	r22, r18
    12a6:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    12a8:	80 e0       	ldi	r24, 0x00	; 0
	 {
		 switch(PortId)
		 {
			 case DIO_PORTA:
			 SET_BIT(PORTA_REG,PinId);
			 break;
    12aa:	08 95       	ret
			 
			 case DIO_PORTB:
			 SET_BIT(PORTB_REG,PinId);
    12ac:	28 b3       	in	r18, 0x18	; 24
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	ac 01       	movw	r20, r24
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <DIO_activePinInPullUpResistance+0x4a>
    12b6:	44 0f       	add	r20, r20
    12b8:	55 1f       	adc	r21, r21
    12ba:	6a 95       	dec	r22
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <DIO_activePinInPullUpResistance+0x46>
    12be:	ba 01       	movw	r22, r20
    12c0:	62 2b       	or	r22, r18
    12c2:	68 bb       	out	0x18, r22	; 24
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    12c4:	80 e0       	ldi	r24, 0x00	; 0
			 SET_BIT(PORTA_REG,PinId);
			 break;
			 
			 case DIO_PORTB:
			 SET_BIT(PORTB_REG,PinId);
			 break;
    12c6:	08 95       	ret
			 
			 case DIO_PORTC:
			 SET_BIT(PORTC_REG,PinId);
    12c8:	25 b3       	in	r18, 0x15	; 21
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	ac 01       	movw	r20, r24
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <DIO_activePinInPullUpResistance+0x66>
    12d2:	44 0f       	add	r20, r20
    12d4:	55 1f       	adc	r21, r21
    12d6:	6a 95       	dec	r22
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <DIO_activePinInPullUpResistance+0x62>
    12da:	ba 01       	movw	r22, r20
    12dc:	62 2b       	or	r22, r18
    12de:	65 bb       	out	0x15, r22	; 21
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    12e0:	80 e0       	ldi	r24, 0x00	; 0
			 SET_BIT(PORTB_REG,PinId);
			 break;
			 
			 case DIO_PORTC:
			 SET_BIT(PORTC_REG,PinId);
			 break;
    12e2:	08 95       	ret
			 
			 case DIO_PORTD:
			 SET_BIT(PORTD_REG,PinId);
    12e4:	22 b3       	in	r18, 0x12	; 18
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	ac 01       	movw	r20, r24
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <DIO_activePinInPullUpResistance+0x82>
    12ee:	44 0f       	add	r20, r20
    12f0:	55 1f       	adc	r21, r21
    12f2:	6a 95       	dec	r22
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <DIO_activePinInPullUpResistance+0x7e>
    12f6:	ba 01       	movw	r22, r20
    12f8:	62 2b       	or	r22, r18
    12fa:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    12fc:	80 e0       	ldi	r24, 0x00	; 0
			 SET_BIT(PORTC_REG,PinId);
			 break;
			 
			 case DIO_PORTD:
			 SET_BIT(PORTD_REG,PinId);
			 break;
    12fe:	08 95       	ret
	      } 
	 }	 
	 else
	 {
		ErrorStatus = DIO_NOK;
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	08 95       	ret
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	08 95       	ret
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1308:	80 e0       	ldi	r24, 0x00	; 0
	 else
	 {
		ErrorStatus = DIO_NOK;
	 }
	 return ErrorStatus;
}
    130a:	08 95       	ret

0000130c <DIO_setPortDirection>:


DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD))
    130c:	84 30       	cpi	r24, 0x04	; 4
    130e:	a8 f5       	brcc	.+106    	; 0x137a <DIO_setPortDirection+0x6e>
	{
		switch(PortId)
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	91 f0       	breq	.+36     	; 0x1338 <DIO_setPortDirection+0x2c>
    1314:	81 30       	cpi	r24, 0x01	; 1
    1316:	28 f0       	brcs	.+10     	; 0x1322 <DIO_setPortDirection+0x16>
    1318:	82 30       	cpi	r24, 0x02	; 2
    131a:	c9 f0       	breq	.+50     	; 0x134e <DIO_setPortDirection+0x42>
    131c:	83 30       	cpi	r24, 0x03	; 3
    131e:	79 f5       	brne	.+94     	; 0x137e <DIO_setPortDirection+0x72>
    1320:	21 c0       	rjmp	.+66     	; 0x1364 <DIO_setPortDirection+0x58>
		{
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
    1322:	6f 3f       	cpi	r22, 0xFF	; 255
    1324:	29 f4       	brne	.+10     	; 0x1330 <DIO_setPortDirection+0x24>
    1326:	8a b3       	in	r24, 0x1a	; 26
    1328:	8f ef       	ldi	r24, 0xFF	; 255
    132a:	8a bb       	out	0x1a, r24	; 26



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	08 95       	ret
	if ( (PortId<=DIO_PORTD))
	{
		switch(PortId)
		{
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
    1330:	8a b3       	in	r24, 0x1a	; 26
    1332:	1a ba       	out	0x1a, r1	; 26



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	08 95       	ret
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
			break;
			
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
    1338:	6f 3f       	cpi	r22, 0xFF	; 255
    133a:	29 f4       	brne	.+10     	; 0x1346 <DIO_setPortDirection+0x3a>
    133c:	87 b3       	in	r24, 0x17	; 23
    133e:	8f ef       	ldi	r24, 0xFF	; 255
    1340:	87 bb       	out	0x17, r24	; 23



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	08 95       	ret
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
			break;
			
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
    1346:	87 b3       	in	r24, 0x17	; 23
    1348:	17 ba       	out	0x17, r1	; 23



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	08 95       	ret
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
			break;
			
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
    134e:	6f 3f       	cpi	r22, 0xFF	; 255
    1350:	29 f4       	brne	.+10     	; 0x135c <DIO_setPortDirection+0x50>
    1352:	84 b3       	in	r24, 0x14	; 20
    1354:	8f ef       	ldi	r24, 0xFF	; 255
    1356:	84 bb       	out	0x14, r24	; 20



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	08 95       	ret
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
			break;
			
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
    135c:	84 b3       	in	r24, 0x14	; 20
    135e:	14 ba       	out	0x14, r1	; 20



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	08 95       	ret
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
			break;
			
			case DIO_PORTD:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRD_REG)):(CLR_REG(DDRD_REG));
    1364:	6f 3f       	cpi	r22, 0xFF	; 255
    1366:	29 f4       	brne	.+10     	; 0x1372 <DIO_setPortDirection+0x66>
    1368:	81 b3       	in	r24, 0x11	; 17
    136a:	8f ef       	ldi	r24, 0xFF	; 255
    136c:	81 bb       	out	0x11, r24	; 17



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	08 95       	ret
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
			break;
			
			case DIO_PORTD:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRD_REG)):(CLR_REG(DDRD_REG));
    1372:	81 b3       	in	r24, 0x11	; 17
    1374:	11 ba       	out	0x11, r1	; 17



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	08 95       	ret
			break;
		}
	} 
	else
	{
		ErrorStatus = DIO_NOK;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	08 95       	ret



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    137e:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    1380:	08 95       	ret

00001382 <DIO_setPortValue>:


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD) )
    1382:	84 30       	cpi	r24, 0x04	; 4
    1384:	a8 f4       	brcc	.+42     	; 0x13b0 <DIO_setPortValue+0x2e>
	{
		switch(PortId)
    1386:	81 30       	cpi	r24, 0x01	; 1
    1388:	51 f0       	breq	.+20     	; 0x139e <DIO_setPortValue+0x1c>
    138a:	81 30       	cpi	r24, 0x01	; 1
    138c:	28 f0       	brcs	.+10     	; 0x1398 <DIO_setPortValue+0x16>
    138e:	82 30       	cpi	r24, 0x02	; 2
    1390:	49 f0       	breq	.+18     	; 0x13a4 <DIO_setPortValue+0x22>
    1392:	83 30       	cpi	r24, 0x03	; 3
    1394:	79 f4       	brne	.+30     	; 0x13b4 <DIO_setPortValue+0x32>
    1396:	09 c0       	rjmp	.+18     	; 0x13aa <DIO_setPortValue+0x28>
		{
			case DIO_PORTA:
			PORTA_REG=PortValue;
    1398:	6b bb       	out	0x1b, r22	; 27
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    139a:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			PORTA_REG=PortValue;
			break;
    139c:	08 95       	ret
			
			case DIO_PORTB:
			PORTB_REG=PortValue;
    139e:	68 bb       	out	0x18, r22	; 24
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    13a0:	80 e0       	ldi	r24, 0x00	; 0
			PORTA_REG=PortValue;
			break;
			
			case DIO_PORTB:
			PORTB_REG=PortValue;
			break;
    13a2:	08 95       	ret
			
			case DIO_PORTC:
			PORTC_REG=PortValue;
    13a4:	65 bb       	out	0x15, r22	; 21
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    13a6:	80 e0       	ldi	r24, 0x00	; 0
			PORTB_REG=PortValue;
			break;
			
			case DIO_PORTC:
			PORTC_REG=PortValue;
			break;
    13a8:	08 95       	ret
			
			case DIO_PORTD:
			PORTD_REG=PortValue;
    13aa:	62 bb       	out	0x12, r22	; 18
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    13ac:	80 e0       	ldi	r24, 0x00	; 0
			PORTC_REG=PortValue;
			break;
			
			case DIO_PORTD:
			PORTD_REG=PortValue;
			break;
    13ae:	08 95       	ret
		}
	}
	else
	{
	ErrorStatus = DIO_NOK;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	08 95       	ret
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    13b4:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
	ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    13b6:	08 95       	ret

000013b8 <DIO_getPortValue>:


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD) && (PortValue!=NULL) )
    13b8:	84 30       	cpi	r24, 0x04	; 4
    13ba:	00 f5       	brcc	.+64     	; 0x13fc <DIO_getPortValue+0x44>
    13bc:	61 15       	cp	r22, r1
    13be:	71 05       	cpc	r23, r1
    13c0:	f9 f0       	breq	.+62     	; 0x1400 <DIO_getPortValue+0x48>
	{
		switch(PortId)
    13c2:	81 30       	cpi	r24, 0x01	; 1
    13c4:	61 f0       	breq	.+24     	; 0x13de <DIO_getPortValue+0x26>
    13c6:	81 30       	cpi	r24, 0x01	; 1
    13c8:	28 f0       	brcs	.+10     	; 0x13d4 <DIO_getPortValue+0x1c>
    13ca:	82 30       	cpi	r24, 0x02	; 2
    13cc:	69 f0       	breq	.+26     	; 0x13e8 <DIO_getPortValue+0x30>
    13ce:	83 30       	cpi	r24, 0x03	; 3
    13d0:	c9 f4       	brne	.+50     	; 0x1404 <DIO_getPortValue+0x4c>
    13d2:	0f c0       	rjmp	.+30     	; 0x13f2 <DIO_getPortValue+0x3a>
		{
			case DIO_PORTA:
			*PortValue =PORTA_REG;
    13d4:	8b b3       	in	r24, 0x1b	; 27
    13d6:	fb 01       	movw	r30, r22
    13d8:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    13da:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			*PortValue =PORTA_REG;
			break;
    13dc:	08 95       	ret
			
			case DIO_PORTB:
		    *PortValue =PORTB_REG;
    13de:	88 b3       	in	r24, 0x18	; 24
    13e0:	fb 01       	movw	r30, r22
    13e2:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    13e4:	80 e0       	ldi	r24, 0x00	; 0
			*PortValue =PORTA_REG;
			break;
			
			case DIO_PORTB:
		    *PortValue =PORTB_REG;
			break;
    13e6:	08 95       	ret
			
			case DIO_PORTC:
			*PortValue =PORTC_REG;
    13e8:	85 b3       	in	r24, 0x15	; 21
    13ea:	fb 01       	movw	r30, r22
    13ec:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    13ee:	80 e0       	ldi	r24, 0x00	; 0
		    *PortValue =PORTB_REG;
			break;
			
			case DIO_PORTC:
			*PortValue =PORTC_REG;
			break;
    13f0:	08 95       	ret
			
			case DIO_PORTD:
			*PortValue =PORTD_REG;
    13f2:	82 b3       	in	r24, 0x12	; 18
    13f4:	fb 01       	movw	r30, r22
    13f6:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    13f8:	80 e0       	ldi	r24, 0x00	; 0
			*PortValue =PORTC_REG;
			break;
			
			case DIO_PORTD:
			*PortValue =PORTD_REG;
			break;
    13fa:	08 95       	ret
		}
	}
	else
	{
		ErrorStatus = DIO_NOK;
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	08 95       	ret
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	08 95       	ret
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1404:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    1406:	08 95       	ret

00001408 <DIO_togglePortValue>:


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD))
    1408:	84 30       	cpi	r24, 0x04	; 4
    140a:	e8 f4       	brcc	.+58     	; 0x1446 <DIO_togglePortValue+0x3e>
	{
		switch(PortId)
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	61 f0       	breq	.+24     	; 0x1428 <DIO_togglePortValue+0x20>
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	28 f0       	brcs	.+10     	; 0x141e <DIO_togglePortValue+0x16>
    1414:	82 30       	cpi	r24, 0x02	; 2
    1416:	69 f0       	breq	.+26     	; 0x1432 <DIO_togglePortValue+0x2a>
    1418:	83 30       	cpi	r24, 0x03	; 3
    141a:	b9 f4       	brne	.+46     	; 0x144a <DIO_togglePortValue+0x42>
    141c:	0f c0       	rjmp	.+30     	; 0x143c <DIO_togglePortValue+0x34>
		{
			case DIO_PORTA:
			TGL_REG(PORTA_REG);
    141e:	8b b3       	in	r24, 0x1b	; 27
    1420:	80 95       	com	r24
    1422:	8b bb       	out	0x1b, r24	; 27
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1424:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			TGL_REG(PORTA_REG);
			break;
    1426:	08 95       	ret
			
			case DIO_PORTB:
			TGL_REG(PORTB_REG);
    1428:	88 b3       	in	r24, 0x18	; 24
    142a:	80 95       	com	r24
    142c:	88 bb       	out	0x18, r24	; 24
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    142e:	80 e0       	ldi	r24, 0x00	; 0
			TGL_REG(PORTA_REG);
			break;
			
			case DIO_PORTB:
			TGL_REG(PORTB_REG);
			break;
    1430:	08 95       	ret
			
			case DIO_PORTC:
			TGL_REG(PORTC_REG);
    1432:	85 b3       	in	r24, 0x15	; 21
    1434:	80 95       	com	r24
    1436:	85 bb       	out	0x15, r24	; 21
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1438:	80 e0       	ldi	r24, 0x00	; 0
			TGL_REG(PORTB_REG);
			break;
			
			case DIO_PORTC:
			TGL_REG(PORTC_REG);
			break;
    143a:	08 95       	ret
			
			case DIO_PORTD:
			TGL_REG(PORTD_REG);
    143c:	82 b3       	in	r24, 0x12	; 18
    143e:	80 95       	com	r24
    1440:	82 bb       	out	0x12, r24	; 18
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1442:	80 e0       	ldi	r24, 0x00	; 0
			TGL_REG(PORTC_REG);
			break;
			
			case DIO_PORTD:
			TGL_REG(PORTD_REG);
			break;
    1444:	08 95       	ret
		}
	}
	else
	{
		ErrorStatus = DIO_NOK;
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	08 95       	ret
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    144a:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    144c:	08 95       	ret

0000144e <DIO_activePortInPullUpResistance>:


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD))
    144e:	84 30       	cpi	r24, 0x04	; 4
    1450:	e8 f4       	brcc	.+58     	; 0x148c <DIO_activePortInPullUpResistance+0x3e>
	{
		switch(PortId)
    1452:	81 30       	cpi	r24, 0x01	; 1
    1454:	61 f0       	breq	.+24     	; 0x146e <DIO_activePortInPullUpResistance+0x20>
    1456:	81 30       	cpi	r24, 0x01	; 1
    1458:	28 f0       	brcs	.+10     	; 0x1464 <DIO_activePortInPullUpResistance+0x16>
    145a:	82 30       	cpi	r24, 0x02	; 2
    145c:	69 f0       	breq	.+26     	; 0x1478 <DIO_activePortInPullUpResistance+0x2a>
    145e:	83 30       	cpi	r24, 0x03	; 3
    1460:	b9 f4       	brne	.+46     	; 0x1490 <DIO_activePortInPullUpResistance+0x42>
    1462:	0f c0       	rjmp	.+30     	; 0x1482 <DIO_activePortInPullUpResistance+0x34>
		{
			case DIO_PORTA:
			SET_REG(PORTA_REG);
    1464:	8b b3       	in	r24, 0x1b	; 27
    1466:	8f ef       	ldi	r24, 0xFF	; 255
    1468:	8b bb       	out	0x1b, r24	; 27
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    146a:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			SET_REG(PORTA_REG);
			break;
    146c:	08 95       	ret
			
			case DIO_PORTB:
			SET_REG(PORTB_REG);
    146e:	88 b3       	in	r24, 0x18	; 24
    1470:	8f ef       	ldi	r24, 0xFF	; 255
    1472:	88 bb       	out	0x18, r24	; 24
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1474:	80 e0       	ldi	r24, 0x00	; 0
			SET_REG(PORTA_REG);
			break;
			
			case DIO_PORTB:
			SET_REG(PORTB_REG);
			break;
    1476:	08 95       	ret
			
			case DIO_PORTC:
			SET_REG(PORTC_REG);
    1478:	85 b3       	in	r24, 0x15	; 21
    147a:	8f ef       	ldi	r24, 0xFF	; 255
    147c:	85 bb       	out	0x15, r24	; 21
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    147e:	80 e0       	ldi	r24, 0x00	; 0
			SET_REG(PORTB_REG);
			break;
			
			case DIO_PORTC:
			SET_REG(PORTC_REG);
			break;
    1480:	08 95       	ret
			
			case DIO_PORTD:
			SET_REG(PORTD_REG);
    1482:	82 b3       	in	r24, 0x12	; 18
    1484:	8f ef       	ldi	r24, 0xFF	; 255
    1486:	82 bb       	out	0x12, r24	; 18
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1488:	80 e0       	ldi	r24, 0x00	; 0
			SET_REG(PORTC_REG);
			break;
			
			case DIO_PORTD:
			SET_REG(PORTD_REG);
			break;
    148a:	08 95       	ret
		}
	}
	else
	{
		ErrorStatus = DIO_NOK;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	08 95       	ret
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1490:	80 e0       	ldi	r24, 0x00	; 0
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
	
}
    1492:	08 95       	ret

00001494 <EXTI_Enable>:
static void (*PRIVATE_PtrCallBackInt1) (void) = NULL;
static void (*PRIVATE_PtrCallBackInt2) (void) = NULL;

void EXTI_Enable(EXTI_InterruptSource InterruptSource ,EXTI_TriggerEdge TriggerEdge)
{
	switch(InterruptSource)
    1494:	81 30       	cpi	r24, 0x01	; 1
    1496:	71 f1       	breq	.+92     	; 0x14f4 <EXTI_Enable+0x60>
    1498:	81 30       	cpi	r24, 0x01	; 1
    149a:	20 f0       	brcs	.+8      	; 0x14a4 <EXTI_Enable+0x10>
    149c:	82 30       	cpi	r24, 0x02	; 2
    149e:	09 f0       	breq	.+2      	; 0x14a2 <EXTI_Enable+0xe>
    14a0:	60 c0       	rjmp	.+192    	; 0x1562 <EXTI_Enable+0xce>
    14a2:	50 c0       	rjmp	.+160    	; 0x1544 <EXTI_Enable+0xb0>
	{
		case EXTI_INT0:
		switch(TriggerEdge)
    14a4:	61 30       	cpi	r22, 0x01	; 1
    14a6:	71 f0       	breq	.+28     	; 0x14c4 <EXTI_Enable+0x30>
    14a8:	61 30       	cpi	r22, 0x01	; 1
    14aa:	28 f0       	brcs	.+10     	; 0x14b6 <EXTI_Enable+0x22>
    14ac:	62 30       	cpi	r22, 0x02	; 2
    14ae:	89 f0       	breq	.+34     	; 0x14d2 <EXTI_Enable+0x3e>
    14b0:	63 30       	cpi	r22, 0x03	; 3
    14b2:	e1 f4       	brne	.+56     	; 0x14ec <EXTI_Enable+0x58>
    14b4:	15 c0       	rjmp	.+42     	; 0x14e0 <EXTI_Enable+0x4c>
		{
			case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
    14b6:	85 b7       	in	r24, 0x35	; 53
    14b8:	81 60       	ori	r24, 0x01	; 1
    14ba:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
    14bc:	85 b7       	in	r24, 0x35	; 53
    14be:	82 60       	ori	r24, 0x02	; 2
    14c0:	85 bf       	out	0x35, r24	; 53
			break;
    14c2:	14 c0       	rjmp	.+40     	; 0x14ec <EXTI_Enable+0x58>
			
			case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
    14c4:	85 b7       	in	r24, 0x35	; 53
    14c6:	8e 7f       	andi	r24, 0xFE	; 254
    14c8:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
    14ca:	85 b7       	in	r24, 0x35	; 53
    14cc:	82 60       	ori	r24, 0x02	; 2
    14ce:	85 bf       	out	0x35, r24	; 53
			break;
    14d0:	0d c0       	rjmp	.+26     	; 0x14ec <EXTI_Enable+0x58>
			
			case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
    14d2:	85 b7       	in	r24, 0x35	; 53
    14d4:	8e 7f       	andi	r24, 0xFE	; 254
    14d6:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC01);
    14d8:	85 b7       	in	r24, 0x35	; 53
    14da:	8d 7f       	andi	r24, 0xFD	; 253
    14dc:	85 bf       	out	0x35, r24	; 53
			break;
    14de:	06 c0       	rjmp	.+12     	; 0x14ec <EXTI_Enable+0x58>
			
			case EXTI_ANY_LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC00);
    14e0:	85 b7       	in	r24, 0x35	; 53
    14e2:	81 60       	ori	r24, 0x01	; 1
    14e4:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC01);
    14e6:	85 b7       	in	r24, 0x35	; 53
    14e8:	8d 7f       	andi	r24, 0xFD	; 253
    14ea:	85 bf       	out	0x35, r24	; 53
			break;
		}
		SET_BIT(GICR,INT0);
    14ec:	8b b7       	in	r24, 0x3b	; 59
    14ee:	80 64       	ori	r24, 0x40	; 64
    14f0:	8b bf       	out	0x3b, r24	; 59
		break;
    14f2:	08 95       	ret
		
		case EXTI_INT1:
		switch(TriggerEdge)
    14f4:	61 30       	cpi	r22, 0x01	; 1
    14f6:	71 f0       	breq	.+28     	; 0x1514 <EXTI_Enable+0x80>
    14f8:	61 30       	cpi	r22, 0x01	; 1
    14fa:	28 f0       	brcs	.+10     	; 0x1506 <EXTI_Enable+0x72>
    14fc:	62 30       	cpi	r22, 0x02	; 2
    14fe:	89 f0       	breq	.+34     	; 0x1522 <EXTI_Enable+0x8e>
    1500:	63 30       	cpi	r22, 0x03	; 3
    1502:	e1 f4       	brne	.+56     	; 0x153c <EXTI_Enable+0xa8>
    1504:	15 c0       	rjmp	.+42     	; 0x1530 <EXTI_Enable+0x9c>
		{
			case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,ISC10);
    1506:	85 b7       	in	r24, 0x35	; 53
    1508:	84 60       	ori	r24, 0x04	; 4
    150a:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
    150c:	85 b7       	in	r24, 0x35	; 53
    150e:	88 60       	ori	r24, 0x08	; 8
    1510:	85 bf       	out	0x35, r24	; 53
			break;
    1512:	14 c0       	rjmp	.+40     	; 0x153c <EXTI_Enable+0xa8>
			
			case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCR,ISC10);
    1514:	85 b7       	in	r24, 0x35	; 53
    1516:	8b 7f       	andi	r24, 0xFB	; 251
    1518:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
    151a:	85 b7       	in	r24, 0x35	; 53
    151c:	88 60       	ori	r24, 0x08	; 8
    151e:	85 bf       	out	0x35, r24	; 53
			break;
    1520:	0d c0       	rjmp	.+26     	; 0x153c <EXTI_Enable+0xa8>
			
			case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR,ISC10);
    1522:	85 b7       	in	r24, 0x35	; 53
    1524:	8b 7f       	andi	r24, 0xFB	; 251
    1526:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC11);
    1528:	85 b7       	in	r24, 0x35	; 53
    152a:	87 7f       	andi	r24, 0xF7	; 247
    152c:	85 bf       	out	0x35, r24	; 53
			break;
    152e:	06 c0       	rjmp	.+12     	; 0x153c <EXTI_Enable+0xa8>
			
			case EXTI_ANY_LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC10);
    1530:	85 b7       	in	r24, 0x35	; 53
    1532:	84 60       	ori	r24, 0x04	; 4
    1534:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC11);
    1536:	85 b7       	in	r24, 0x35	; 53
    1538:	87 7f       	andi	r24, 0xF7	; 247
    153a:	85 bf       	out	0x35, r24	; 53
			break;
		}
		SET_BIT(GICR,INT1);
    153c:	8b b7       	in	r24, 0x3b	; 59
    153e:	80 68       	ori	r24, 0x80	; 128
    1540:	8b bf       	out	0x3b, r24	; 59
		break;
    1542:	08 95       	ret
		
		case EXTI_INT2:
		switch(TriggerEdge)
    1544:	66 23       	and	r22, r22
    1546:	19 f0       	breq	.+6      	; 0x154e <EXTI_Enable+0xba>
    1548:	61 30       	cpi	r22, 0x01	; 1
    154a:	41 f4       	brne	.+16     	; 0x155c <EXTI_Enable+0xc8>
    154c:	04 c0       	rjmp	.+8      	; 0x1556 <EXTI_Enable+0xc2>
		{
			case EXTI_RISING_EDGE:
			SET_BIT(MCUCSR,ISC2);
    154e:	84 b7       	in	r24, 0x34	; 52
    1550:	80 64       	ori	r24, 0x40	; 64
    1552:	84 bf       	out	0x34, r24	; 52
			break;
    1554:	03 c0       	rjmp	.+6      	; 0x155c <EXTI_Enable+0xc8>
			
			case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCSR,ISC2);
    1556:	84 b7       	in	r24, 0x34	; 52
    1558:	8f 7b       	andi	r24, 0xBF	; 191
    155a:	84 bf       	out	0x34, r24	; 52
			break;
		}
		SET_BIT(GICR,INT2);
    155c:	8b b7       	in	r24, 0x3b	; 59
    155e:	80 62       	ori	r24, 0x20	; 32
    1560:	8b bf       	out	0x3b, r24	; 59
    1562:	08 95       	ret

00001564 <EXTI_Disable>:
	}
}

void EXTI_Disable(EXTI_InterruptSource InterruptSource)
{
	switch(InterruptSource)
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	49 f0       	breq	.+18     	; 0x157a <EXTI_Disable+0x16>
    1568:	81 30       	cpi	r24, 0x01	; 1
    156a:	18 f0       	brcs	.+6      	; 0x1572 <EXTI_Disable+0xe>
    156c:	82 30       	cpi	r24, 0x02	; 2
    156e:	61 f4       	brne	.+24     	; 0x1588 <EXTI_Disable+0x24>
    1570:	08 c0       	rjmp	.+16     	; 0x1582 <EXTI_Disable+0x1e>
	{
		case EXTI_INT0:
		CLR_BIT(GICR,INT0);
    1572:	8b b7       	in	r24, 0x3b	; 59
    1574:	8f 7b       	andi	r24, 0xBF	; 191
    1576:	8b bf       	out	0x3b, r24	; 59
		break;
    1578:	08 95       	ret
		
		case EXTI_INT1:
		CLR_BIT(GICR,INT1);
    157a:	8b b7       	in	r24, 0x3b	; 59
    157c:	8f 77       	andi	r24, 0x7F	; 127
    157e:	8b bf       	out	0x3b, r24	; 59
		break;
    1580:	08 95       	ret
		
		case EXTI_INT2:
		CLR_BIT(GICR,INT2);
    1582:	8b b7       	in	r24, 0x3b	; 59
    1584:	8f 7d       	andi	r24, 0xDF	; 223
    1586:	8b bf       	out	0x3b, r24	; 59
    1588:	08 95       	ret

0000158a <EXTI_SetCallBackInt0>:
	}
	
}
void EXTI_SetCallBackInt0 (void (*PtrToFunc) (void))
{
	if( PtrToFunc!=NULL )
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	21 f0       	breq	.+8      	; 0x1596 <EXTI_SetCallBackInt0+0xc>
	{
		PRIVATE_PtrCallBackInt0=PtrToFunc;
    158e:	90 93 a6 00 	sts	0x00A6, r25
    1592:	80 93 a5 00 	sts	0x00A5, r24
    1596:	08 95       	ret

00001598 <EXTI_SetCallBackInt1>:
	}
}
void EXTI_SetCallBackInt1 (void (*PtrToFunc) (void))
{
	if( PtrToFunc!=NULL )
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	21 f0       	breq	.+8      	; 0x15a4 <EXTI_SetCallBackInt1+0xc>
	{
		PRIVATE_PtrCallBackInt1=PtrToFunc;
    159c:	90 93 a8 00 	sts	0x00A8, r25
    15a0:	80 93 a7 00 	sts	0x00A7, r24
    15a4:	08 95       	ret

000015a6 <EXTI_SetCallBackInt2>:
	}
}
void EXTI_SetCallBackInt2 (void (*PtrToFunc) (void))
{
	if( PtrToFunc!=NULL )
    15a6:	00 97       	sbiw	r24, 0x00	; 0
    15a8:	21 f0       	breq	.+8      	; 0x15b2 <EXTI_SetCallBackInt2+0xc>
	{
		PRIVATE_PtrCallBackInt2=PtrToFunc;
    15aa:	90 93 aa 00 	sts	0x00AA, r25
    15ae:	80 93 a9 00 	sts	0x00A9, r24
    15b2:	08 95       	ret

000015b4 <__vector_1>:
}


void  __vector_1(void) __attribute__((signal)); 
void  __vector_1(void)
{
    15b4:	1f 92       	push	r1
    15b6:	0f 92       	push	r0
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	0f 92       	push	r0
    15bc:	11 24       	eor	r1, r1
    15be:	2f 93       	push	r18
    15c0:	3f 93       	push	r19
    15c2:	4f 93       	push	r20
    15c4:	5f 93       	push	r21
    15c6:	6f 93       	push	r22
    15c8:	7f 93       	push	r23
    15ca:	8f 93       	push	r24
    15cc:	9f 93       	push	r25
    15ce:	af 93       	push	r26
    15d0:	bf 93       	push	r27
    15d2:	ef 93       	push	r30
    15d4:	ff 93       	push	r31
	if (PRIVATE_PtrCallBackInt0 != NULL)
    15d6:	e0 91 a5 00 	lds	r30, 0x00A5
    15da:	f0 91 a6 00 	lds	r31, 0x00A6
    15de:	30 97       	sbiw	r30, 0x00	; 0
    15e0:	09 f0       	breq	.+2      	; 0x15e4 <__vector_1+0x30>
	{
		PRIVATE_PtrCallBackInt0();
    15e2:	09 95       	icall
	}
}
    15e4:	ff 91       	pop	r31
    15e6:	ef 91       	pop	r30
    15e8:	bf 91       	pop	r27
    15ea:	af 91       	pop	r26
    15ec:	9f 91       	pop	r25
    15ee:	8f 91       	pop	r24
    15f0:	7f 91       	pop	r23
    15f2:	6f 91       	pop	r22
    15f4:	5f 91       	pop	r21
    15f6:	4f 91       	pop	r20
    15f8:	3f 91       	pop	r19
    15fa:	2f 91       	pop	r18
    15fc:	0f 90       	pop	r0
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	0f 90       	pop	r0
    1602:	1f 90       	pop	r1
    1604:	18 95       	reti

00001606 <__vector_3>:



void  __vector_3(void) __attribute__((signal)); 
void  __vector_3(void)
{
    1606:	1f 92       	push	r1
    1608:	0f 92       	push	r0
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	0f 92       	push	r0
    160e:	11 24       	eor	r1, r1
    1610:	2f 93       	push	r18
    1612:	3f 93       	push	r19
    1614:	4f 93       	push	r20
    1616:	5f 93       	push	r21
    1618:	6f 93       	push	r22
    161a:	7f 93       	push	r23
    161c:	8f 93       	push	r24
    161e:	9f 93       	push	r25
    1620:	af 93       	push	r26
    1622:	bf 93       	push	r27
    1624:	ef 93       	push	r30
    1626:	ff 93       	push	r31
	if (PRIVATE_PtrCallBackInt2 != NULL)
    1628:	e0 91 a9 00 	lds	r30, 0x00A9
    162c:	f0 91 aa 00 	lds	r31, 0x00AA
    1630:	30 97       	sbiw	r30, 0x00	; 0
    1632:	09 f0       	breq	.+2      	; 0x1636 <__vector_3+0x30>
	{
		PRIVATE_PtrCallBackInt2();
    1634:	09 95       	icall
	}
    1636:	ff 91       	pop	r31
    1638:	ef 91       	pop	r30
    163a:	bf 91       	pop	r27
    163c:	af 91       	pop	r26
    163e:	9f 91       	pop	r25
    1640:	8f 91       	pop	r24
    1642:	7f 91       	pop	r23
    1644:	6f 91       	pop	r22
    1646:	5f 91       	pop	r21
    1648:	4f 91       	pop	r20
    164a:	3f 91       	pop	r19
    164c:	2f 91       	pop	r18
    164e:	0f 90       	pop	r0
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	0f 90       	pop	r0
    1654:	1f 90       	pop	r1
    1656:	18 95       	reti

00001658 <GLBI_Enable>:
#include "../include/GLBI_interfase.h"
#include "../include/GLBI_private.h"
 
 void GLBI_Enable()
 {
	 SET_BIT(SREG,I);
    1658:	8f b7       	in	r24, 0x3f	; 63
    165a:	80 68       	ori	r24, 0x80	; 128
    165c:	8f bf       	out	0x3f, r24	; 63
    165e:	08 95       	ret

00001660 <TMR0_init>:
void TMR0_init(void)
{
#if TIMER0_MODE == TIMER0_NormalMode
	
	/*Select mode = Normal Mode  */
	CLR_BIT(TCCR0,WGM00);
    1660:	83 b7       	in	r24, 0x33	; 51
    1662:	8f 7b       	andi	r24, 0xBF	; 191
    1664:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,WGM01);
    1666:	83 b7       	in	r24, 0x33	; 51
    1668:	87 7f       	andi	r24, 0xF7	; 247
    166a:	83 bf       	out	0x33, r24	; 51
	
	/* preload value */
	TCNT0 = TMR0_PreloadValue;
    166c:	12 be       	out	0x32, r1	; 50
	
	/*enable OVf */
	SET_BIT(TIMSK,TOIE0);
    166e:	89 b7       	in	r24, 0x39	; 57
    1670:	81 60       	ori	r24, 0x01	; 1
    1672:	89 bf       	out	0x39, r24	; 57
	SET_BIT(TCCR0,COM00);
	SET_BIT(TCCR0,COM01);
    #endif

#endif
}
    1674:	08 95       	ret

00001676 <TMR0_Start>:

void TMR0_Start(void)
{
#if TIMER0_Prescaller==TIMER0_Prescaller_1
	SET_BIT(TCCR0,CS00);
    1676:	83 b7       	in	r24, 0x33	; 51
    1678:	81 60       	ori	r24, 0x01	; 1
    167a:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
    167c:	83 b7       	in	r24, 0x33	; 51
    167e:	8d 7f       	andi	r24, 0xFD	; 253
    1680:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS02);
    1682:	83 b7       	in	r24, 0x33	; 51
    1684:	8b 7f       	andi	r24, 0xFB	; 251
    1686:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS00);
	CLR_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS02);

#endif
}
    1688:	08 95       	ret

0000168a <TMR0_Stop>:

void TMR0_Stop(void)
{
	/*	Prescaller = 0	*/
	CLR_BIT(TCCR0,CS00);
    168a:	83 b7       	in	r24, 0x33	; 51
    168c:	8e 7f       	andi	r24, 0xFE	; 254
    168e:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
    1690:	83 b7       	in	r24, 0x33	; 51
    1692:	8d 7f       	andi	r24, 0xFD	; 253
    1694:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS02);
    1696:	83 b7       	in	r24, 0x33	; 51
    1698:	8b 7f       	andi	r24, 0xFB	; 251
    169a:	83 bf       	out	0x33, r24	; 51
}
    169c:	08 95       	ret

0000169e <TMR0_SetDelay_ms_UsingCTC>:
// }

void TMR0_SetDelay_ms_UsingCTC(u16 Delay_ms)
{
	//	Under Condition Tick Time = 4MS   -> Prescaller 64
	OCR0 = 249 ;
    169e:	29 ef       	ldi	r18, 0xF9	; 249
    16a0:	2c bf       	out	0x3c, r18	; 60
	Private_CTC_Counter=Delay_ms;
    16a2:	90 93 ac 00 	sts	0x00AC, r25
    16a6:	80 93 ab 00 	sts	0x00AB, r24
}
    16aa:	08 95       	ret

000016ac <TMR0_SetCompareMatchValue_FastPWM_NonInverting>:

void TMR0_SetCompareMatchValue_FastPWM_NonInverting(f32 DutyCycle)
{
	#if FastPWM_Mode == FastPWM_NonInverting_Mode
	/* non inverting */
	OCR0=((DutyCycle/100)*256)-1;          //TAKE CARE OVERFLOW 
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	48 ec       	ldi	r20, 0xC8	; 200
    16b2:	52 e4       	ldi	r21, 0x42	; 66
    16b4:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__divsf3>
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e8       	ldi	r20, 0x80	; 128
    16be:	53 e4       	ldi	r21, 0x43	; 67
    16c0:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__mulsf3>
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e8       	ldi	r20, 0x80	; 128
    16ca:	5f e3       	ldi	r21, 0x3F	; 63
    16cc:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__subsf3>
    16d0:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__fixunssfsi>
    16d4:	6c bf       	out	0x3c, r22	; 60
	#elif FastPWM_Mode == FastPWM_Inverting_Mode
	/*  inverting */
	OCR0=((DutyCycle/100)*256)-1;          //TAKE CARE OVERFLOW 
	#endif
}
    16d6:	08 95       	ret

000016d8 <TMR0_SetCallBackOverFlow>:

void TMR0_SetCallBackOverFlow (void (*PtrToFunc) (void))
{
	if( PtrToFunc!=NULL )
    16d8:	00 97       	sbiw	r24, 0x00	; 0
    16da:	21 f0       	breq	.+8      	; 0x16e4 <TMR0_SetCallBackOverFlow+0xc>
	{
		PRIVATE_PtrCallBackOverFlowFlag=PtrToFunc;
    16dc:	90 93 ae 00 	sts	0x00AE, r25
    16e0:	80 93 ad 00 	sts	0x00AD, r24
    16e4:	08 95       	ret

000016e6 <TMR0_SetCallBackCTC>:
	}
}

void TMR0_SetCallBackCTC(void (*PtrToFunc)(void))
{
	if( PtrToFunc!=NULL )
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	21 f0       	breq	.+8      	; 0x16f2 <TMR0_SetCallBackCTC+0xc>
	{
		PRIVATE_PtrCallBackCTC=PtrToFunc;
    16ea:	90 93 b0 00 	sts	0x00B0, r25
    16ee:	80 93 af 00 	sts	0x00AF, r24
    16f2:	08 95       	ret

000016f4 <__vector_10>:



void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    16f4:	1f 92       	push	r1
    16f6:	0f 92       	push	r0
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	0f 92       	push	r0
    16fc:	11 24       	eor	r1, r1
    16fe:	2f 93       	push	r18
    1700:	3f 93       	push	r19
    1702:	4f 93       	push	r20
    1704:	5f 93       	push	r21
    1706:	6f 93       	push	r22
    1708:	7f 93       	push	r23
    170a:	8f 93       	push	r24
    170c:	9f 93       	push	r25
    170e:	af 93       	push	r26
    1710:	bf 93       	push	r27
    1712:	ef 93       	push	r30
    1714:	ff 93       	push	r31
	static u16 CTC_Counter =0;
	CTC_Counter++;
    1716:	80 91 b1 00 	lds	r24, 0x00B1
    171a:	90 91 b2 00 	lds	r25, 0x00B2
    171e:	01 96       	adiw	r24, 0x01	; 1
    1720:	90 93 b2 00 	sts	0x00B2, r25
    1724:	80 93 b1 00 	sts	0x00B1, r24
	
	if( Private_CTC_Counter == CTC_Counter)
    1728:	20 91 ab 00 	lds	r18, 0x00AB
    172c:	30 91 ac 00 	lds	r19, 0x00AC
    1730:	82 17       	cp	r24, r18
    1732:	93 07       	cpc	r25, r19
    1734:	59 f4       	brne	.+22     	; 0x174c <__vector_10+0x58>
	{
		CTC_Counter = 0;
    1736:	10 92 b2 00 	sts	0x00B2, r1
    173a:	10 92 b1 00 	sts	0x00B1, r1
		if (PRIVATE_PtrCallBackCTC != NULL)
    173e:	e0 91 af 00 	lds	r30, 0x00AF
    1742:	f0 91 b0 00 	lds	r31, 0x00B0
    1746:	30 97       	sbiw	r30, 0x00	; 0
    1748:	09 f0       	breq	.+2      	; 0x174c <__vector_10+0x58>
		{
			PRIVATE_PtrCallBackCTC();
    174a:	09 95       	icall
		}
	}
	
}
    174c:	ff 91       	pop	r31
    174e:	ef 91       	pop	r30
    1750:	bf 91       	pop	r27
    1752:	af 91       	pop	r26
    1754:	9f 91       	pop	r25
    1756:	8f 91       	pop	r24
    1758:	7f 91       	pop	r23
    175a:	6f 91       	pop	r22
    175c:	5f 91       	pop	r21
    175e:	4f 91       	pop	r20
    1760:	3f 91       	pop	r19
    1762:	2f 91       	pop	r18
    1764:	0f 90       	pop	r0
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	0f 90       	pop	r0
    176a:	1f 90       	pop	r1
    176c:	18 95       	reti

0000176e <TMR1_init>:


void TMR1_init(void)
{
	/*Select Mode : mode 14  */
	CLR_BIT(TCCR1A,WGM10);
    176e:	8f b5       	in	r24, 0x2f	; 47
    1770:	8e 7f       	andi	r24, 0xFE	; 254
    1772:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,WGM11);
    1774:	8f b5       	in	r24, 0x2f	; 47
    1776:	82 60       	ori	r24, 0x02	; 2
    1778:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B,WGM12);
    177a:	8e b5       	in	r24, 0x2e	; 46
    177c:	88 60       	ori	r24, 0x08	; 8
    177e:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,WGM13);
    1780:	8e b5       	in	r24, 0x2e	; 46
    1782:	80 61       	ori	r24, 0x10	; 16
    1784:	8e bd       	out	0x2e, r24	; 46
	
	CLR_BIT(TCCR1A,COM1A0);
    1786:	8f b5       	in	r24, 0x2f	; 47
    1788:	8f 7b       	andi	r24, 0xBF	; 191
    178a:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,COM1A1);
    178c:	8f b5       	in	r24, 0x2f	; 47
    178e:	80 68       	ori	r24, 0x80	; 128
    1790:	8f bd       	out	0x2f, r24	; 47
	
	CLR_BIT(TCCR1A,COM1B0);
    1792:	8f b5       	in	r24, 0x2f	; 47
    1794:	8f 7e       	andi	r24, 0xEF	; 239
    1796:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,COM1B1);
    1798:	8f b5       	in	r24, 0x2f	; 47
    179a:	80 62       	ori	r24, 0x20	; 32
    179c:	8f bd       	out	0x2f, r24	; 47
}
    179e:	08 95       	ret

000017a0 <TMR1_Start>:

void TMR1_Start(void)
{
	/*select prescaler : 64*/
	
	SET_BIT(TCCR1B,CS10);
    17a0:	8e b5       	in	r24, 0x2e	; 46
    17a2:	81 60       	ori	r24, 0x01	; 1
    17a4:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,CS11);
    17a6:	8e b5       	in	r24, 0x2e	; 46
    17a8:	82 60       	ori	r24, 0x02	; 2
    17aa:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,CS12);
    17ac:	8e b5       	in	r24, 0x2e	; 46
    17ae:	8b 7f       	andi	r24, 0xFB	; 251
    17b0:	8e bd       	out	0x2e, r24	; 46
}
    17b2:	08 95       	ret

000017b4 <TMR1_Stop>:


void TMR1_Stop(void)
{
	CLR_BIT(TCCR1B,CS10);
    17b4:	8e b5       	in	r24, 0x2e	; 46
    17b6:	8e 7f       	andi	r24, 0xFE	; 254
    17b8:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,CS11);
    17ba:	8e b5       	in	r24, 0x2e	; 46
    17bc:	8d 7f       	andi	r24, 0xFD	; 253
    17be:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,CS12);
    17c0:	8e b5       	in	r24, 0x2e	; 46
    17c2:	8b 7f       	andi	r24, 0xFB	; 251
    17c4:	8e bd       	out	0x2e, r24	; 46
}
    17c6:	08 95       	ret

000017c8 <TMR1_SetDutyCycle_And_Freq_Value>:


void TMR1_SetDutyCycle_And_Freq_Value(u16 Freq ,f32 Duty)
{
    17c8:	cf 92       	push	r12
    17ca:	df 92       	push	r13
    17cc:	ef 92       	push	r14
    17ce:	ff 92       	push	r15
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	ec 01       	movw	r28, r24
    17d6:	6a 01       	movw	r12, r20
    17d8:	7b 01       	movw	r14, r22
	// 	OCR1BL=Duty;
	if(Duty<=100)
    17da:	cb 01       	movw	r24, r22
    17dc:	ba 01       	movw	r22, r20
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	48 ec       	ldi	r20, 0xC8	; 200
    17e4:	52 e4       	ldi	r21, 0x42	; 66
    17e6:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__cmpsf2>
    17ea:	18 16       	cp	r1, r24
    17ec:	5c f1       	brlt	.+86     	; 0x1844 <TMR1_SetDutyCycle_And_Freq_Value+0x7c>
	{
		ICR1L =((1000000UL/Freq)/4)-1;
    17ee:	9e 01       	movw	r18, r28
    17f0:	40 e0       	ldi	r20, 0x00	; 0
    17f2:	50 e0       	ldi	r21, 0x00	; 0
    17f4:	60 e9       	ldi	r22, 0x90	; 144
    17f6:	70 ed       	ldi	r23, 0xD0	; 208
    17f8:	83 e0       	ldi	r24, 0x03	; 3
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	0e 94 0a 10 	call	0x2014	; 0x2014 <__udivmodsi4>
    1800:	21 50       	subi	r18, 0x01	; 1
    1802:	30 40       	sbci	r19, 0x00	; 0
    1804:	37 bd       	out	0x27, r19	; 39
    1806:	26 bd       	out	0x26, r18	; 38
		OCR1AL=((Duty*(ICR1L+1))/100.0)-1;
    1808:	66 b5       	in	r22, 0x26	; 38
    180a:	77 b5       	in	r23, 0x27	; 39
    180c:	6f 5f       	subi	r22, 0xFF	; 255
    180e:	7f 4f       	sbci	r23, 0xFF	; 255
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__floatunsisf>
    1818:	a7 01       	movw	r20, r14
    181a:	96 01       	movw	r18, r12
    181c:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__mulsf3>
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	48 ec       	ldi	r20, 0xC8	; 200
    1826:	52 e4       	ldi	r21, 0x42	; 66
    1828:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__divsf3>
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	40 e8       	ldi	r20, 0x80	; 128
    1832:	5f e3       	ldi	r21, 0x3F	; 63
    1834:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__subsf3>
    1838:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__fixunssfsi>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	9b bd       	out	0x2b, r25	; 43
    1842:	8a bd       	out	0x2a, r24	; 42
	}
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	ff 90       	pop	r15
    184a:	ef 90       	pop	r14
    184c:	df 90       	pop	r13
    184e:	cf 90       	pop	r12
    1850:	08 95       	ret

00001852 <TMR2_init>:
	#endif

	#elif TMR2_MODE == TMR2_PHASECORRECT_MODE
	
	/*Select mode = Phase Correct MODE */
	SET_BIT(TCCR2,WGM20);
    1852:	85 b5       	in	r24, 0x25	; 37
    1854:	80 64       	ori	r24, 0x40	; 64
    1856:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,WGM21); 
    1858:	85 b5       	in	r24, 0x25	; 37
    185a:	87 7f       	andi	r24, 0xF7	; 247
    185c:	85 bd       	out	0x25, r24	; 37
	/* non inverting */
	CLR_BIT(TCCR2,COM20);
	SET_BIT(TCCR2,COM21);
	#elif TMR2_SelectFastPWM_Mode == TMR2_FastPWM_Inverting_Mode
	/*  inverting */
	SET_BIT(TCCR2,COM20);
    185e:	85 b5       	in	r24, 0x25	; 37
    1860:	80 61       	ori	r24, 0x10	; 16
    1862:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,COM21);
    1864:	85 b5       	in	r24, 0x25	; 37
    1866:	80 62       	ori	r24, 0x20	; 32
    1868:	85 bd       	out	0x25, r24	; 37
	#endif

	#endif
	
}
    186a:	08 95       	ret

0000186c <TMR2_Start>:
	SET_BIT(TCCR2,CS20);
	SET_BIT(TCCR2,CS21);
	CLR_BIT(TCCR2,CS22);
	
#elif TMR2_PRESCALLER == TMR2_PRESCALLER_64
	CLR_BIT(TCCR2,CS20);
    186c:	85 b5       	in	r24, 0x25	; 37
    186e:	8e 7f       	andi	r24, 0xFE	; 254
    1870:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,CS21);
    1872:	85 b5       	in	r24, 0x25	; 37
    1874:	8d 7f       	andi	r24, 0xFD	; 253
    1876:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS22);
    1878:	85 b5       	in	r24, 0x25	; 37
    187a:	84 60       	ori	r24, 0x04	; 4
    187c:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS20);
	SET_BIT(TCCR2,CS21);
	SET_BIT(TCCR2,CS22);
	
#endif	
}
    187e:	08 95       	ret

00001880 <TMR2_Stop>:

void TMR2_Stop()
{
	CLR_BIT(TCCR2,CS20);
    1880:	85 b5       	in	r24, 0x25	; 37
    1882:	8e 7f       	andi	r24, 0xFE	; 254
    1884:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,CS21);
    1886:	85 b5       	in	r24, 0x25	; 37
    1888:	8d 7f       	andi	r24, 0xFD	; 253
    188a:	85 bd       	out	0x25, r24	; 37
    CLR_BIT(TCCR2,CS22);
    188c:	85 b5       	in	r24, 0x25	; 37
    188e:	8b 7f       	andi	r24, 0xFB	; 251
    1890:	85 bd       	out	0x25, r24	; 37
}	
    1892:	08 95       	ret

00001894 <TMR2_SetDelay_ms_UsingCTC>:

void TMR2_SetDelay_ms_UsingCTC(u16 Delay_ms)
{
	//	Under Condition Tick Time = 4MS   -> Prescaller 64
	
	OCR2 = 249 ;
    1894:	29 ef       	ldi	r18, 0xF9	; 249
    1896:	23 bd       	out	0x23, r18	; 35
	Private_CTC_Counter=Delay_ms;
    1898:	90 93 b4 00 	sts	0x00B4, r25
    189c:	80 93 b3 00 	sts	0x00B3, r24
}
    18a0:	08 95       	ret

000018a2 <TMR2_SetDutyCycleValue_FastPWM>:
	#if TMR2_SelectFastPWM_Mode == TMR2_FastPWM_NonInverting_Mode
	/* non inverting */
	OCR2=((DutyCycle/100)*256)-1;          //TAKE CARE OVERFLOW
	#elif TMR2_SelectFastPWM_Mode == TMR2_FastPWM_Inverting_Mode
	/*  inverting */
	OCR2=(255-(256*(DutyCycle/100)));          //TAKE CARE OVERFLOW
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	48 ec       	ldi	r20, 0xC8	; 200
    18a8:	52 e4       	ldi	r21, 0x42	; 66
    18aa:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__divsf3>
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	40 e8       	ldi	r20, 0x80	; 128
    18b4:	53 e4       	ldi	r21, 0x43	; 67
    18b6:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__mulsf3>
    18ba:	9b 01       	movw	r18, r22
    18bc:	ac 01       	movw	r20, r24
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	8f e7       	ldi	r24, 0x7F	; 127
    18c4:	93 e4       	ldi	r25, 0x43	; 67
    18c6:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__subsf3>
    18ca:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__fixunssfsi>
    18ce:	63 bd       	out	0x23, r22	; 35
	#endif
}
    18d0:	08 95       	ret

000018d2 <TMR2_SetDutyCycleValue_PhaseCorrect>:
	#if TMR2_SelectPaseCorrect_Mode == TMR2_PaseCorrect_NonInverting_Mode
	/* non inverting */
	OCR2=((DutyCycle/100)*256);          //TAKE CARE OVERFLOW
	#elif TMR2_SelectPaseCorrect_Mode == TMR2_PaseCorrect_Inverting_Mode
	/*  inverting */
	OCR2=(256-(256*(DutyCycle/100)));          //TAKE CARE OVERFLOW
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	48 ec       	ldi	r20, 0xC8	; 200
    18d8:	52 e4       	ldi	r21, 0x42	; 66
    18da:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__divsf3>
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	40 e8       	ldi	r20, 0x80	; 128
    18e4:	53 e4       	ldi	r21, 0x43	; 67
    18e6:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__mulsf3>
    18ea:	9b 01       	movw	r18, r22
    18ec:	ac 01       	movw	r20, r24
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	70 e0       	ldi	r23, 0x00	; 0
    18f2:	80 e8       	ldi	r24, 0x80	; 128
    18f4:	93 e4       	ldi	r25, 0x43	; 67
    18f6:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__subsf3>
    18fa:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__fixunssfsi>
    18fe:	63 bd       	out	0x23, r22	; 35
	#endif
}
    1900:	08 95       	ret

00001902 <TMR2_SetCallBackOverFlow>:
void TMR2_SetCallBackOverFlow(void (*PtrToFunc)(void))
{
	if( PtrToFunc!=NULL )
    1902:	00 97       	sbiw	r24, 0x00	; 0
    1904:	21 f0       	breq	.+8      	; 0x190e <TMR2_SetCallBackOverFlow+0xc>
	{
		PRIVATE_PtrCallBackOverFlowFlag=PtrToFunc;
    1906:	90 93 b6 00 	sts	0x00B6, r25
    190a:	80 93 b5 00 	sts	0x00B5, r24
    190e:	08 95       	ret

00001910 <TMR2_SetCallBackCTC>:
	}
}

void TMR2_SetCallBackCTC(void (*PtrToFunc)(void))
{
	if( PtrToFunc!=NULL )
    1910:	00 97       	sbiw	r24, 0x00	; 0
    1912:	21 f0       	breq	.+8      	; 0x191c <TMR2_SetCallBackCTC+0xc>
	{
		PRIVATE_PtrCallBackCTC=PtrToFunc;
    1914:	90 93 b8 00 	sts	0x00B8, r25
    1918:	80 93 b7 00 	sts	0x00B7, r24
    191c:	08 95       	ret

0000191e <__vector_5>:
	}
}

void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
    191e:	1f 92       	push	r1
    1920:	0f 92       	push	r0
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	0f 92       	push	r0
    1926:	11 24       	eor	r1, r1
    1928:	2f 93       	push	r18
    192a:	3f 93       	push	r19
    192c:	4f 93       	push	r20
    192e:	5f 93       	push	r21
    1930:	6f 93       	push	r22
    1932:	7f 93       	push	r23
    1934:	8f 93       	push	r24
    1936:	9f 93       	push	r25
    1938:	af 93       	push	r26
    193a:	bf 93       	push	r27
    193c:	ef 93       	push	r30
    193e:	ff 93       	push	r31
	static u16 OverFlowCounter =0;
	OverFlowCounter++;
    1940:	80 91 b9 00 	lds	r24, 0x00B9
    1944:	90 91 ba 00 	lds	r25, 0x00BA
    1948:	01 96       	adiw	r24, 0x01	; 1
    194a:	90 93 ba 00 	sts	0x00BA, r25
    194e:	80 93 b9 00 	sts	0x00B9, r24
	
	if( TMR2_OverFlowCounter == OverFlowCounter)
    1952:	23 e0       	ldi	r18, 0x03	; 3
    1954:	81 3d       	cpi	r24, 0xD1	; 209
    1956:	92 07       	cpc	r25, r18
    1958:	69 f4       	brne	.+26     	; 0x1974 <__vector_5+0x56>
	{
		OverFlowCounter = 0;
    195a:	10 92 ba 00 	sts	0x00BA, r1
    195e:	10 92 b9 00 	sts	0x00B9, r1
		TCNT2 = TMR2_PreloadValue;
    1962:	81 e7       	ldi	r24, 0x71	; 113
    1964:	84 bd       	out	0x24, r24	; 36
		if (PRIVATE_PtrCallBackOverFlowFlag != NULL)
    1966:	e0 91 b5 00 	lds	r30, 0x00B5
    196a:	f0 91 b6 00 	lds	r31, 0x00B6
    196e:	30 97       	sbiw	r30, 0x00	; 0
    1970:	09 f0       	breq	.+2      	; 0x1974 <__vector_5+0x56>
		{
			PRIVATE_PtrCallBackOverFlowFlag();
    1972:	09 95       	icall
		}
	}
	
}
    1974:	ff 91       	pop	r31
    1976:	ef 91       	pop	r30
    1978:	bf 91       	pop	r27
    197a:	af 91       	pop	r26
    197c:	9f 91       	pop	r25
    197e:	8f 91       	pop	r24
    1980:	7f 91       	pop	r23
    1982:	6f 91       	pop	r22
    1984:	5f 91       	pop	r21
    1986:	4f 91       	pop	r20
    1988:	3f 91       	pop	r19
    198a:	2f 91       	pop	r18
    198c:	0f 90       	pop	r0
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	0f 90       	pop	r0
    1992:	1f 90       	pop	r1
    1994:	18 95       	reti

00001996 <__vector_4>:

void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
    1996:	1f 92       	push	r1
    1998:	0f 92       	push	r0
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	0f 92       	push	r0
    199e:	11 24       	eor	r1, r1
    19a0:	2f 93       	push	r18
    19a2:	3f 93       	push	r19
    19a4:	4f 93       	push	r20
    19a6:	5f 93       	push	r21
    19a8:	6f 93       	push	r22
    19aa:	7f 93       	push	r23
    19ac:	8f 93       	push	r24
    19ae:	9f 93       	push	r25
    19b0:	af 93       	push	r26
    19b2:	bf 93       	push	r27
    19b4:	ef 93       	push	r30
    19b6:	ff 93       	push	r31
	static u16 CTC_Counter =0;
	CTC_Counter++;
    19b8:	80 91 bb 00 	lds	r24, 0x00BB
    19bc:	90 91 bc 00 	lds	r25, 0x00BC
    19c0:	01 96       	adiw	r24, 0x01	; 1
    19c2:	90 93 bc 00 	sts	0x00BC, r25
    19c6:	80 93 bb 00 	sts	0x00BB, r24
	
	if( Private_CTC_Counter == CTC_Counter)
    19ca:	20 91 b3 00 	lds	r18, 0x00B3
    19ce:	30 91 b4 00 	lds	r19, 0x00B4
    19d2:	82 17       	cp	r24, r18
    19d4:	93 07       	cpc	r25, r19
    19d6:	59 f4       	brne	.+22     	; 0x19ee <__vector_4+0x58>
	{
		CTC_Counter = 0;
    19d8:	10 92 bc 00 	sts	0x00BC, r1
    19dc:	10 92 bb 00 	sts	0x00BB, r1
		if (PRIVATE_PtrCallBackCTC != NULL)
    19e0:	e0 91 b7 00 	lds	r30, 0x00B7
    19e4:	f0 91 b8 00 	lds	r31, 0x00B8
    19e8:	30 97       	sbiw	r30, 0x00	; 0
    19ea:	09 f0       	breq	.+2      	; 0x19ee <__vector_4+0x58>
		{
			PRIVATE_PtrCallBackCTC();
    19ec:	09 95       	icall
		}
	}
    19ee:	ff 91       	pop	r31
    19f0:	ef 91       	pop	r30
    19f2:	bf 91       	pop	r27
    19f4:	af 91       	pop	r26
    19f6:	9f 91       	pop	r25
    19f8:	8f 91       	pop	r24
    19fa:	7f 91       	pop	r23
    19fc:	6f 91       	pop	r22
    19fe:	5f 91       	pop	r21
    1a00:	4f 91       	pop	r20
    1a02:	3f 91       	pop	r19
    1a04:	2f 91       	pop	r18
    1a06:	0f 90       	pop	r0
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	0f 90       	pop	r0
    1a0c:	1f 90       	pop	r1
    1a0e:	18 95       	reti

00001a10 <UART_init>:

#define UART_UBBR_VALUE (((F_CPU)/(UART_SelectedBoudRate*16UL))-1)

void UART_init (void)
{
	CLR_BIT(UCSRB,UCSZ2);
    1a10:	52 98       	cbi	0x0a, 2	; 10
	CLR_BIT(UCSRC_Value,UPM0);
	CLR_BIT(UCSRC_Value,UPM1);
	CLR_BIT(UCSRC_Value,UMSEL);
	SET_BIT(UCSRC_Value,URSEL);
	
	UCSRC=UCSRC_Value;      // Set UART Mode: 8-bit data, 1 stop bit, no parity (0x86)
    1a12:	86 e8       	ldi	r24, 0x86	; 134
    1a14:	80 bd       	out	0x20, r24	; 32
	
	UBRRL=UART_UBBR_VALUE;     // Set baud rate = 9600 -> 103;
    1a16:	87 e6       	ldi	r24, 0x67	; 103
    1a18:	89 b9       	out	0x09, r24	; 9
    UBRRH = (UART_UBBR_VALUE >> 8);
    1a1a:	10 bc       	out	0x20, r1	; 32
	
	CLR_BIT(UCSRA,U2X);   // Stop double speed
    1a1c:	59 98       	cbi	0x0b, 1	; 11
	
	
	SET_BIT(UCSRB,RXCIE);  // Enable Rx Interrupt 
    1a1e:	57 9a       	sbi	0x0a, 7	; 10
	SET_BIT(UCSRB,TXCIE);  // Enable Tx Interrupt 
    1a20:	56 9a       	sbi	0x0a, 6	; 10
	SET_BIT(UCSRB,UDRIE);  // Enable UDR Interrupt 
    1a22:	55 9a       	sbi	0x0a, 5	; 10
	
	SET_BIT(UCSRB,TXEN);  // Enable Tx
    1a24:	53 9a       	sbi	0x0a, 3	; 10
	SET_BIT(UCSRB,RXEN);  // Enable Rx
    1a26:	54 9a       	sbi	0x0a, 4	; 10
}
    1a28:	08 95       	ret

00001a2a <UART_ReceiveChar>:

void UART_ReceiveChar (u8* ReceiveData)
{
	if(ReceiveData!=NULL)
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	29 f0       	breq	.+10     	; 0x1a38 <UART_ReceiveChar+0xe>
	{
		while(0 == GET_BIT(UCSRA,RXC));
    1a2e:	5f 9b       	sbis	0x0b, 7	; 11
    1a30:	fe cf       	rjmp	.-4      	; 0x1a2e <UART_ReceiveChar+0x4>
		*ReceiveData=UDR;
    1a32:	2c b1       	in	r18, 0x0c	; 12
    1a34:	fc 01       	movw	r30, r24
    1a36:	20 83       	st	Z, r18
    1a38:	08 95       	ret

00001a3a <UART_TransmiteChar>:



void UART_TransmiteChar(u8 TransmiteData)
{
	UDR=TransmiteData;
    1a3a:	8c b9       	out	0x0c, r24	; 12
	while(0 == GET_BIT(UCSRA,UDRE));
    1a3c:	8b b1       	in	r24, 0x0b	; 11
    1a3e:	85 ff       	sbrs	r24, 5
    1a40:	fd cf       	rjmp	.-6      	; 0x1a3c <UART_TransmiteChar+0x2>
}
    1a42:	08 95       	ret

00001a44 <UART_TransmiteString>:

void UART_TransmiteString(u8 *TransmiteData)
{
    1a44:	0f 93       	push	r16
    1a46:	1f 93       	push	r17
    1a48:	cf 93       	push	r28
    1a4a:	8c 01       	movw	r16, r24
	u8 Index=0;

	while (TransmiteData[Index]!='\0')		/* Send string till null */
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	80 81       	ld	r24, Z
    1a50:	88 23       	and	r24, r24
    1a52:	51 f0       	breq	.+20     	; 0x1a68 <UART_TransmiteString+0x24>
	while(0 == GET_BIT(UCSRA,UDRE));
}

void UART_TransmiteString(u8 *TransmiteData)
{
	u8 Index=0;
    1a54:	c0 e0       	ldi	r28, 0x00	; 0

	while (TransmiteData[Index]!='\0')		/* Send string till null */
	{
		UART_TransmiteChar(TransmiteData[Index]);
    1a56:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <UART_TransmiteChar>
		Index++;
    1a5a:	cf 5f       	subi	r28, 0xFF	; 255

void UART_TransmiteString(u8 *TransmiteData)
{
	u8 Index=0;

	while (TransmiteData[Index]!='\0')		/* Send string till null */
    1a5c:	f8 01       	movw	r30, r16
    1a5e:	ec 0f       	add	r30, r28
    1a60:	f1 1d       	adc	r31, r1
    1a62:	80 81       	ld	r24, Z
    1a64:	88 23       	and	r24, r24
    1a66:	b9 f7       	brne	.-18     	; 0x1a56 <UART_TransmiteString+0x12>
	{
		UART_TransmiteChar(TransmiteData[Index]);
		Index++;
	}
}
    1a68:	cf 91       	pop	r28
    1a6a:	1f 91       	pop	r17
    1a6c:	0f 91       	pop	r16
    1a6e:	08 95       	ret

00001a70 <UART_CallBack_RXC>:

void UART_CallBack_RXC (void(*PtrFunction)(void))
{
	Private_UART_CallBack_RXC=PtrFunction;
    1a70:	90 93 be 00 	sts	0x00BE, r25
    1a74:	80 93 bd 00 	sts	0x00BD, r24
}
    1a78:	08 95       	ret

00001a7a <UART_CallBack_UDRE>:

void UART_CallBack_UDRE(void(*PtrFunction)(void))
{
	Private_UART_CallBack_UDRE=PtrFunction;
    1a7a:	90 93 c0 00 	sts	0x00C0, r25
    1a7e:	80 93 bf 00 	sts	0x00BF, r24
}
    1a82:	08 95       	ret

00001a84 <UART_CallBack_TXC>:

void UART_CallBack_TXC(void(*PtrFunction)(void))
{
	Private_UART_CallBack_TXC=PtrFunction;
    1a84:	90 93 c2 00 	sts	0x00C2, r25
    1a88:	80 93 c1 00 	sts	0x00C1, r24
}
    1a8c:	08 95       	ret

00001a8e <__vector_13>:


// Receive Complete Interrupt Request
void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    1a8e:	1f 92       	push	r1
    1a90:	0f 92       	push	r0
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	0f 92       	push	r0
    1a96:	11 24       	eor	r1, r1
    1a98:	2f 93       	push	r18
    1a9a:	3f 93       	push	r19
    1a9c:	4f 93       	push	r20
    1a9e:	5f 93       	push	r21
    1aa0:	6f 93       	push	r22
    1aa2:	7f 93       	push	r23
    1aa4:	8f 93       	push	r24
    1aa6:	9f 93       	push	r25
    1aa8:	af 93       	push	r26
    1aaa:	bf 93       	push	r27
    1aac:	ef 93       	push	r30
    1aae:	ff 93       	push	r31
	if (Private_UART_CallBack_RXC!=NULL)
    1ab0:	e0 91 bd 00 	lds	r30, 0x00BD
    1ab4:	f0 91 be 00 	lds	r31, 0x00BE
    1ab8:	30 97       	sbiw	r30, 0x00	; 0
    1aba:	09 f0       	breq	.+2      	; 0x1abe <__vector_13+0x30>
	{
		Private_UART_CallBack_RXC();
    1abc:	09 95       	icall
	}
}
    1abe:	ff 91       	pop	r31
    1ac0:	ef 91       	pop	r30
    1ac2:	bf 91       	pop	r27
    1ac4:	af 91       	pop	r26
    1ac6:	9f 91       	pop	r25
    1ac8:	8f 91       	pop	r24
    1aca:	7f 91       	pop	r23
    1acc:	6f 91       	pop	r22
    1ace:	5f 91       	pop	r21
    1ad0:	4f 91       	pop	r20
    1ad2:	3f 91       	pop	r19
    1ad4:	2f 91       	pop	r18
    1ad6:	0f 90       	pop	r0
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	0f 90       	pop	r0
    1adc:	1f 90       	pop	r1
    1ade:	18 95       	reti

00001ae0 <__vector_14>:

// Data Register Empty Interrupt Request
void __vector_14(void) __attribute__((signal));
void __vector_14()
{
    1ae0:	1f 92       	push	r1
    1ae2:	0f 92       	push	r0
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	0f 92       	push	r0
    1ae8:	11 24       	eor	r1, r1
    1aea:	2f 93       	push	r18
    1aec:	3f 93       	push	r19
    1aee:	4f 93       	push	r20
    1af0:	5f 93       	push	r21
    1af2:	6f 93       	push	r22
    1af4:	7f 93       	push	r23
    1af6:	8f 93       	push	r24
    1af8:	9f 93       	push	r25
    1afa:	af 93       	push	r26
    1afc:	bf 93       	push	r27
    1afe:	ef 93       	push	r30
    1b00:	ff 93       	push	r31
	if (Private_UART_CallBack_UDRE!=NULL)
    1b02:	e0 91 bf 00 	lds	r30, 0x00BF
    1b06:	f0 91 c0 00 	lds	r31, 0x00C0
    1b0a:	30 97       	sbiw	r30, 0x00	; 0
    1b0c:	09 f0       	breq	.+2      	; 0x1b10 <__vector_14+0x30>
	{
		Private_UART_CallBack_UDRE();
    1b0e:	09 95       	icall
	} 
}
    1b10:	ff 91       	pop	r31
    1b12:	ef 91       	pop	r30
    1b14:	bf 91       	pop	r27
    1b16:	af 91       	pop	r26
    1b18:	9f 91       	pop	r25
    1b1a:	8f 91       	pop	r24
    1b1c:	7f 91       	pop	r23
    1b1e:	6f 91       	pop	r22
    1b20:	5f 91       	pop	r21
    1b22:	4f 91       	pop	r20
    1b24:	3f 91       	pop	r19
    1b26:	2f 91       	pop	r18
    1b28:	0f 90       	pop	r0
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	0f 90       	pop	r0
    1b2e:	1f 90       	pop	r1
    1b30:	18 95       	reti

00001b32 <__vector_15>:

// Transmit Complete Interrupt Request
void __vector_15(void) __attribute__((signal));
void __vector_15()
{
    1b32:	1f 92       	push	r1
    1b34:	0f 92       	push	r0
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	0f 92       	push	r0
    1b3a:	11 24       	eor	r1, r1
    1b3c:	2f 93       	push	r18
    1b3e:	3f 93       	push	r19
    1b40:	4f 93       	push	r20
    1b42:	5f 93       	push	r21
    1b44:	6f 93       	push	r22
    1b46:	7f 93       	push	r23
    1b48:	8f 93       	push	r24
    1b4a:	9f 93       	push	r25
    1b4c:	af 93       	push	r26
    1b4e:	bf 93       	push	r27
    1b50:	ef 93       	push	r30
    1b52:	ff 93       	push	r31
	if (Private_UART_CallBack_TXC!=NULL)
    1b54:	e0 91 c1 00 	lds	r30, 0x00C1
    1b58:	f0 91 c2 00 	lds	r31, 0x00C2
    1b5c:	30 97       	sbiw	r30, 0x00	; 0
    1b5e:	09 f0       	breq	.+2      	; 0x1b62 <__vector_15+0x30>
	{
		Private_UART_CallBack_TXC();
    1b60:	09 95       	icall
	} 
    1b62:	ff 91       	pop	r31
    1b64:	ef 91       	pop	r30
    1b66:	bf 91       	pop	r27
    1b68:	af 91       	pop	r26
    1b6a:	9f 91       	pop	r25
    1b6c:	8f 91       	pop	r24
    1b6e:	7f 91       	pop	r23
    1b70:	6f 91       	pop	r22
    1b72:	5f 91       	pop	r21
    1b74:	4f 91       	pop	r20
    1b76:	3f 91       	pop	r19
    1b78:	2f 91       	pop	r18
    1b7a:	0f 90       	pop	r0
    1b7c:	0f be       	out	0x3f, r0	; 63
    1b7e:	0f 90       	pop	r0
    1b80:	1f 90       	pop	r1
    1b82:	18 95       	reti

00001b84 <__subsf3>:
    1b84:	50 58       	subi	r21, 0x80	; 128

00001b86 <__addsf3>:
    1b86:	bb 27       	eor	r27, r27
    1b88:	aa 27       	eor	r26, r26
    1b8a:	0e d0       	rcall	.+28     	; 0x1ba8 <__addsf3x>
    1b8c:	70 c1       	rjmp	.+736    	; 0x1e6e <__fp_round>
    1b8e:	61 d1       	rcall	.+706    	; 0x1e52 <__fp_pscA>
    1b90:	30 f0       	brcs	.+12     	; 0x1b9e <__addsf3+0x18>
    1b92:	66 d1       	rcall	.+716    	; 0x1e60 <__fp_pscB>
    1b94:	20 f0       	brcs	.+8      	; 0x1b9e <__addsf3+0x18>
    1b96:	31 f4       	brne	.+12     	; 0x1ba4 <__addsf3+0x1e>
    1b98:	9f 3f       	cpi	r25, 0xFF	; 255
    1b9a:	11 f4       	brne	.+4      	; 0x1ba0 <__addsf3+0x1a>
    1b9c:	1e f4       	brtc	.+6      	; 0x1ba4 <__addsf3+0x1e>
    1b9e:	56 c1       	rjmp	.+684    	; 0x1e4c <__fp_nan>
    1ba0:	0e f4       	brtc	.+2      	; 0x1ba4 <__addsf3+0x1e>
    1ba2:	e0 95       	com	r30
    1ba4:	e7 fb       	bst	r30, 7
    1ba6:	4c c1       	rjmp	.+664    	; 0x1e40 <__fp_inf>

00001ba8 <__addsf3x>:
    1ba8:	e9 2f       	mov	r30, r25
    1baa:	72 d1       	rcall	.+740    	; 0x1e90 <__fp_split3>
    1bac:	80 f3       	brcs	.-32     	; 0x1b8e <__addsf3+0x8>
    1bae:	ba 17       	cp	r27, r26
    1bb0:	62 07       	cpc	r22, r18
    1bb2:	73 07       	cpc	r23, r19
    1bb4:	84 07       	cpc	r24, r20
    1bb6:	95 07       	cpc	r25, r21
    1bb8:	18 f0       	brcs	.+6      	; 0x1bc0 <__addsf3x+0x18>
    1bba:	71 f4       	brne	.+28     	; 0x1bd8 <__addsf3x+0x30>
    1bbc:	9e f5       	brtc	.+102    	; 0x1c24 <__addsf3x+0x7c>
    1bbe:	8a c1       	rjmp	.+788    	; 0x1ed4 <__fp_zero>
    1bc0:	0e f4       	brtc	.+2      	; 0x1bc4 <__addsf3x+0x1c>
    1bc2:	e0 95       	com	r30
    1bc4:	0b 2e       	mov	r0, r27
    1bc6:	ba 2f       	mov	r27, r26
    1bc8:	a0 2d       	mov	r26, r0
    1bca:	0b 01       	movw	r0, r22
    1bcc:	b9 01       	movw	r22, r18
    1bce:	90 01       	movw	r18, r0
    1bd0:	0c 01       	movw	r0, r24
    1bd2:	ca 01       	movw	r24, r20
    1bd4:	a0 01       	movw	r20, r0
    1bd6:	11 24       	eor	r1, r1
    1bd8:	ff 27       	eor	r31, r31
    1bda:	59 1b       	sub	r21, r25
    1bdc:	99 f0       	breq	.+38     	; 0x1c04 <__addsf3x+0x5c>
    1bde:	59 3f       	cpi	r21, 0xF9	; 249
    1be0:	50 f4       	brcc	.+20     	; 0x1bf6 <__addsf3x+0x4e>
    1be2:	50 3e       	cpi	r21, 0xE0	; 224
    1be4:	68 f1       	brcs	.+90     	; 0x1c40 <__addsf3x+0x98>
    1be6:	1a 16       	cp	r1, r26
    1be8:	f0 40       	sbci	r31, 0x00	; 0
    1bea:	a2 2f       	mov	r26, r18
    1bec:	23 2f       	mov	r18, r19
    1bee:	34 2f       	mov	r19, r20
    1bf0:	44 27       	eor	r20, r20
    1bf2:	58 5f       	subi	r21, 0xF8	; 248
    1bf4:	f3 cf       	rjmp	.-26     	; 0x1bdc <__addsf3x+0x34>
    1bf6:	46 95       	lsr	r20
    1bf8:	37 95       	ror	r19
    1bfa:	27 95       	ror	r18
    1bfc:	a7 95       	ror	r26
    1bfe:	f0 40       	sbci	r31, 0x00	; 0
    1c00:	53 95       	inc	r21
    1c02:	c9 f7       	brne	.-14     	; 0x1bf6 <__addsf3x+0x4e>
    1c04:	7e f4       	brtc	.+30     	; 0x1c24 <__addsf3x+0x7c>
    1c06:	1f 16       	cp	r1, r31
    1c08:	ba 0b       	sbc	r27, r26
    1c0a:	62 0b       	sbc	r22, r18
    1c0c:	73 0b       	sbc	r23, r19
    1c0e:	84 0b       	sbc	r24, r20
    1c10:	ba f0       	brmi	.+46     	; 0x1c40 <__addsf3x+0x98>
    1c12:	91 50       	subi	r25, 0x01	; 1
    1c14:	a1 f0       	breq	.+40     	; 0x1c3e <__addsf3x+0x96>
    1c16:	ff 0f       	add	r31, r31
    1c18:	bb 1f       	adc	r27, r27
    1c1a:	66 1f       	adc	r22, r22
    1c1c:	77 1f       	adc	r23, r23
    1c1e:	88 1f       	adc	r24, r24
    1c20:	c2 f7       	brpl	.-16     	; 0x1c12 <__addsf3x+0x6a>
    1c22:	0e c0       	rjmp	.+28     	; 0x1c40 <__addsf3x+0x98>
    1c24:	ba 0f       	add	r27, r26
    1c26:	62 1f       	adc	r22, r18
    1c28:	73 1f       	adc	r23, r19
    1c2a:	84 1f       	adc	r24, r20
    1c2c:	48 f4       	brcc	.+18     	; 0x1c40 <__addsf3x+0x98>
    1c2e:	87 95       	ror	r24
    1c30:	77 95       	ror	r23
    1c32:	67 95       	ror	r22
    1c34:	b7 95       	ror	r27
    1c36:	f7 95       	ror	r31
    1c38:	9e 3f       	cpi	r25, 0xFE	; 254
    1c3a:	08 f0       	brcs	.+2      	; 0x1c3e <__addsf3x+0x96>
    1c3c:	b3 cf       	rjmp	.-154    	; 0x1ba4 <__addsf3+0x1e>
    1c3e:	93 95       	inc	r25
    1c40:	88 0f       	add	r24, r24
    1c42:	08 f0       	brcs	.+2      	; 0x1c46 <__addsf3x+0x9e>
    1c44:	99 27       	eor	r25, r25
    1c46:	ee 0f       	add	r30, r30
    1c48:	97 95       	ror	r25
    1c4a:	87 95       	ror	r24
    1c4c:	08 95       	ret

00001c4e <__cmpsf2>:
    1c4e:	d4 d0       	rcall	.+424    	; 0x1df8 <__fp_cmp>
    1c50:	08 f4       	brcc	.+2      	; 0x1c54 <__cmpsf2+0x6>
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	08 95       	ret

00001c56 <__divsf3>:
    1c56:	0c d0       	rcall	.+24     	; 0x1c70 <__divsf3x>
    1c58:	0a c1       	rjmp	.+532    	; 0x1e6e <__fp_round>
    1c5a:	02 d1       	rcall	.+516    	; 0x1e60 <__fp_pscB>
    1c5c:	40 f0       	brcs	.+16     	; 0x1c6e <__divsf3+0x18>
    1c5e:	f9 d0       	rcall	.+498    	; 0x1e52 <__fp_pscA>
    1c60:	30 f0       	brcs	.+12     	; 0x1c6e <__divsf3+0x18>
    1c62:	21 f4       	brne	.+8      	; 0x1c6c <__divsf3+0x16>
    1c64:	5f 3f       	cpi	r21, 0xFF	; 255
    1c66:	19 f0       	breq	.+6      	; 0x1c6e <__divsf3+0x18>
    1c68:	eb c0       	rjmp	.+470    	; 0x1e40 <__fp_inf>
    1c6a:	51 11       	cpse	r21, r1
    1c6c:	34 c1       	rjmp	.+616    	; 0x1ed6 <__fp_szero>
    1c6e:	ee c0       	rjmp	.+476    	; 0x1e4c <__fp_nan>

00001c70 <__divsf3x>:
    1c70:	0f d1       	rcall	.+542    	; 0x1e90 <__fp_split3>
    1c72:	98 f3       	brcs	.-26     	; 0x1c5a <__divsf3+0x4>

00001c74 <__divsf3_pse>:
    1c74:	99 23       	and	r25, r25
    1c76:	c9 f3       	breq	.-14     	; 0x1c6a <__divsf3+0x14>
    1c78:	55 23       	and	r21, r21
    1c7a:	b1 f3       	breq	.-20     	; 0x1c68 <__divsf3+0x12>
    1c7c:	95 1b       	sub	r25, r21
    1c7e:	55 0b       	sbc	r21, r21
    1c80:	bb 27       	eor	r27, r27
    1c82:	aa 27       	eor	r26, r26
    1c84:	62 17       	cp	r22, r18
    1c86:	73 07       	cpc	r23, r19
    1c88:	84 07       	cpc	r24, r20
    1c8a:	38 f0       	brcs	.+14     	; 0x1c9a <__divsf3_pse+0x26>
    1c8c:	9f 5f       	subi	r25, 0xFF	; 255
    1c8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c90:	22 0f       	add	r18, r18
    1c92:	33 1f       	adc	r19, r19
    1c94:	44 1f       	adc	r20, r20
    1c96:	aa 1f       	adc	r26, r26
    1c98:	a9 f3       	breq	.-22     	; 0x1c84 <__divsf3_pse+0x10>
    1c9a:	33 d0       	rcall	.+102    	; 0x1d02 <__divsf3_pse+0x8e>
    1c9c:	0e 2e       	mov	r0, r30
    1c9e:	3a f0       	brmi	.+14     	; 0x1cae <__divsf3_pse+0x3a>
    1ca0:	e0 e8       	ldi	r30, 0x80	; 128
    1ca2:	30 d0       	rcall	.+96     	; 0x1d04 <__divsf3_pse+0x90>
    1ca4:	91 50       	subi	r25, 0x01	; 1
    1ca6:	50 40       	sbci	r21, 0x00	; 0
    1ca8:	e6 95       	lsr	r30
    1caa:	00 1c       	adc	r0, r0
    1cac:	ca f7       	brpl	.-14     	; 0x1ca0 <__divsf3_pse+0x2c>
    1cae:	29 d0       	rcall	.+82     	; 0x1d02 <__divsf3_pse+0x8e>
    1cb0:	fe 2f       	mov	r31, r30
    1cb2:	27 d0       	rcall	.+78     	; 0x1d02 <__divsf3_pse+0x8e>
    1cb4:	66 0f       	add	r22, r22
    1cb6:	77 1f       	adc	r23, r23
    1cb8:	88 1f       	adc	r24, r24
    1cba:	bb 1f       	adc	r27, r27
    1cbc:	26 17       	cp	r18, r22
    1cbe:	37 07       	cpc	r19, r23
    1cc0:	48 07       	cpc	r20, r24
    1cc2:	ab 07       	cpc	r26, r27
    1cc4:	b0 e8       	ldi	r27, 0x80	; 128
    1cc6:	09 f0       	breq	.+2      	; 0x1cca <__divsf3_pse+0x56>
    1cc8:	bb 0b       	sbc	r27, r27
    1cca:	80 2d       	mov	r24, r0
    1ccc:	bf 01       	movw	r22, r30
    1cce:	ff 27       	eor	r31, r31
    1cd0:	93 58       	subi	r25, 0x83	; 131
    1cd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd4:	2a f0       	brmi	.+10     	; 0x1ce0 <__divsf3_pse+0x6c>
    1cd6:	9e 3f       	cpi	r25, 0xFE	; 254
    1cd8:	51 05       	cpc	r21, r1
    1cda:	68 f0       	brcs	.+26     	; 0x1cf6 <__divsf3_pse+0x82>
    1cdc:	b1 c0       	rjmp	.+354    	; 0x1e40 <__fp_inf>
    1cde:	fb c0       	rjmp	.+502    	; 0x1ed6 <__fp_szero>
    1ce0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ce2:	ec f3       	brlt	.-6      	; 0x1cde <__divsf3_pse+0x6a>
    1ce4:	98 3e       	cpi	r25, 0xE8	; 232
    1ce6:	dc f3       	brlt	.-10     	; 0x1cde <__divsf3_pse+0x6a>
    1ce8:	86 95       	lsr	r24
    1cea:	77 95       	ror	r23
    1cec:	67 95       	ror	r22
    1cee:	b7 95       	ror	r27
    1cf0:	f7 95       	ror	r31
    1cf2:	9f 5f       	subi	r25, 0xFF	; 255
    1cf4:	c9 f7       	brne	.-14     	; 0x1ce8 <__divsf3_pse+0x74>
    1cf6:	88 0f       	add	r24, r24
    1cf8:	91 1d       	adc	r25, r1
    1cfa:	96 95       	lsr	r25
    1cfc:	87 95       	ror	r24
    1cfe:	97 f9       	bld	r25, 7
    1d00:	08 95       	ret
    1d02:	e1 e0       	ldi	r30, 0x01	; 1
    1d04:	66 0f       	add	r22, r22
    1d06:	77 1f       	adc	r23, r23
    1d08:	88 1f       	adc	r24, r24
    1d0a:	bb 1f       	adc	r27, r27
    1d0c:	62 17       	cp	r22, r18
    1d0e:	73 07       	cpc	r23, r19
    1d10:	84 07       	cpc	r24, r20
    1d12:	ba 07       	cpc	r27, r26
    1d14:	20 f0       	brcs	.+8      	; 0x1d1e <__divsf3_pse+0xaa>
    1d16:	62 1b       	sub	r22, r18
    1d18:	73 0b       	sbc	r23, r19
    1d1a:	84 0b       	sbc	r24, r20
    1d1c:	ba 0b       	sbc	r27, r26
    1d1e:	ee 1f       	adc	r30, r30
    1d20:	88 f7       	brcc	.-30     	; 0x1d04 <__divsf3_pse+0x90>
    1d22:	e0 95       	com	r30
    1d24:	08 95       	ret

00001d26 <__fixunssfsi>:
    1d26:	bc d0       	rcall	.+376    	; 0x1ea0 <__fp_splitA>
    1d28:	88 f0       	brcs	.+34     	; 0x1d4c <__fixunssfsi+0x26>
    1d2a:	9f 57       	subi	r25, 0x7F	; 127
    1d2c:	90 f0       	brcs	.+36     	; 0x1d52 <__fixunssfsi+0x2c>
    1d2e:	b9 2f       	mov	r27, r25
    1d30:	99 27       	eor	r25, r25
    1d32:	b7 51       	subi	r27, 0x17	; 23
    1d34:	a0 f0       	brcs	.+40     	; 0x1d5e <__fixunssfsi+0x38>
    1d36:	d1 f0       	breq	.+52     	; 0x1d6c <__fixunssfsi+0x46>
    1d38:	66 0f       	add	r22, r22
    1d3a:	77 1f       	adc	r23, r23
    1d3c:	88 1f       	adc	r24, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	1a f0       	brmi	.+6      	; 0x1d48 <__fixunssfsi+0x22>
    1d42:	ba 95       	dec	r27
    1d44:	c9 f7       	brne	.-14     	; 0x1d38 <__fixunssfsi+0x12>
    1d46:	12 c0       	rjmp	.+36     	; 0x1d6c <__fixunssfsi+0x46>
    1d48:	b1 30       	cpi	r27, 0x01	; 1
    1d4a:	81 f0       	breq	.+32     	; 0x1d6c <__fixunssfsi+0x46>
    1d4c:	c3 d0       	rcall	.+390    	; 0x1ed4 <__fp_zero>
    1d4e:	b1 e0       	ldi	r27, 0x01	; 1
    1d50:	08 95       	ret
    1d52:	c0 c0       	rjmp	.+384    	; 0x1ed4 <__fp_zero>
    1d54:	67 2f       	mov	r22, r23
    1d56:	78 2f       	mov	r23, r24
    1d58:	88 27       	eor	r24, r24
    1d5a:	b8 5f       	subi	r27, 0xF8	; 248
    1d5c:	39 f0       	breq	.+14     	; 0x1d6c <__fixunssfsi+0x46>
    1d5e:	b9 3f       	cpi	r27, 0xF9	; 249
    1d60:	cc f3       	brlt	.-14     	; 0x1d54 <__fixunssfsi+0x2e>
    1d62:	86 95       	lsr	r24
    1d64:	77 95       	ror	r23
    1d66:	67 95       	ror	r22
    1d68:	b3 95       	inc	r27
    1d6a:	d9 f7       	brne	.-10     	; 0x1d62 <__fixunssfsi+0x3c>
    1d6c:	3e f4       	brtc	.+14     	; 0x1d7c <__fixunssfsi+0x56>
    1d6e:	90 95       	com	r25
    1d70:	80 95       	com	r24
    1d72:	70 95       	com	r23
    1d74:	61 95       	neg	r22
    1d76:	7f 4f       	sbci	r23, 0xFF	; 255
    1d78:	8f 4f       	sbci	r24, 0xFF	; 255
    1d7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7c:	08 95       	ret

00001d7e <__floatunsisf>:
    1d7e:	e8 94       	clt
    1d80:	09 c0       	rjmp	.+18     	; 0x1d94 <__floatsisf+0x12>

00001d82 <__floatsisf>:
    1d82:	97 fb       	bst	r25, 7
    1d84:	3e f4       	brtc	.+14     	; 0x1d94 <__floatsisf+0x12>
    1d86:	90 95       	com	r25
    1d88:	80 95       	com	r24
    1d8a:	70 95       	com	r23
    1d8c:	61 95       	neg	r22
    1d8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d90:	8f 4f       	sbci	r24, 0xFF	; 255
    1d92:	9f 4f       	sbci	r25, 0xFF	; 255
    1d94:	99 23       	and	r25, r25
    1d96:	a9 f0       	breq	.+42     	; 0x1dc2 <__floatsisf+0x40>
    1d98:	f9 2f       	mov	r31, r25
    1d9a:	96 e9       	ldi	r25, 0x96	; 150
    1d9c:	bb 27       	eor	r27, r27
    1d9e:	93 95       	inc	r25
    1da0:	f6 95       	lsr	r31
    1da2:	87 95       	ror	r24
    1da4:	77 95       	ror	r23
    1da6:	67 95       	ror	r22
    1da8:	b7 95       	ror	r27
    1daa:	f1 11       	cpse	r31, r1
    1dac:	f8 cf       	rjmp	.-16     	; 0x1d9e <__floatsisf+0x1c>
    1dae:	fa f4       	brpl	.+62     	; 0x1dee <__floatsisf+0x6c>
    1db0:	bb 0f       	add	r27, r27
    1db2:	11 f4       	brne	.+4      	; 0x1db8 <__floatsisf+0x36>
    1db4:	60 ff       	sbrs	r22, 0
    1db6:	1b c0       	rjmp	.+54     	; 0x1dee <__floatsisf+0x6c>
    1db8:	6f 5f       	subi	r22, 0xFF	; 255
    1dba:	7f 4f       	sbci	r23, 0xFF	; 255
    1dbc:	8f 4f       	sbci	r24, 0xFF	; 255
    1dbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc0:	16 c0       	rjmp	.+44     	; 0x1dee <__floatsisf+0x6c>
    1dc2:	88 23       	and	r24, r24
    1dc4:	11 f0       	breq	.+4      	; 0x1dca <__floatsisf+0x48>
    1dc6:	96 e9       	ldi	r25, 0x96	; 150
    1dc8:	11 c0       	rjmp	.+34     	; 0x1dec <__floatsisf+0x6a>
    1dca:	77 23       	and	r23, r23
    1dcc:	21 f0       	breq	.+8      	; 0x1dd6 <__floatsisf+0x54>
    1dce:	9e e8       	ldi	r25, 0x8E	; 142
    1dd0:	87 2f       	mov	r24, r23
    1dd2:	76 2f       	mov	r23, r22
    1dd4:	05 c0       	rjmp	.+10     	; 0x1de0 <__floatsisf+0x5e>
    1dd6:	66 23       	and	r22, r22
    1dd8:	71 f0       	breq	.+28     	; 0x1df6 <__floatsisf+0x74>
    1dda:	96 e8       	ldi	r25, 0x86	; 134
    1ddc:	86 2f       	mov	r24, r22
    1dde:	70 e0       	ldi	r23, 0x00	; 0
    1de0:	60 e0       	ldi	r22, 0x00	; 0
    1de2:	2a f0       	brmi	.+10     	; 0x1dee <__floatsisf+0x6c>
    1de4:	9a 95       	dec	r25
    1de6:	66 0f       	add	r22, r22
    1de8:	77 1f       	adc	r23, r23
    1dea:	88 1f       	adc	r24, r24
    1dec:	da f7       	brpl	.-10     	; 0x1de4 <__floatsisf+0x62>
    1dee:	88 0f       	add	r24, r24
    1df0:	96 95       	lsr	r25
    1df2:	87 95       	ror	r24
    1df4:	97 f9       	bld	r25, 7
    1df6:	08 95       	ret

00001df8 <__fp_cmp>:
    1df8:	99 0f       	add	r25, r25
    1dfa:	00 08       	sbc	r0, r0
    1dfc:	55 0f       	add	r21, r21
    1dfe:	aa 0b       	sbc	r26, r26
    1e00:	e0 e8       	ldi	r30, 0x80	; 128
    1e02:	fe ef       	ldi	r31, 0xFE	; 254
    1e04:	16 16       	cp	r1, r22
    1e06:	17 06       	cpc	r1, r23
    1e08:	e8 07       	cpc	r30, r24
    1e0a:	f9 07       	cpc	r31, r25
    1e0c:	c0 f0       	brcs	.+48     	; 0x1e3e <__fp_cmp+0x46>
    1e0e:	12 16       	cp	r1, r18
    1e10:	13 06       	cpc	r1, r19
    1e12:	e4 07       	cpc	r30, r20
    1e14:	f5 07       	cpc	r31, r21
    1e16:	98 f0       	brcs	.+38     	; 0x1e3e <__fp_cmp+0x46>
    1e18:	62 1b       	sub	r22, r18
    1e1a:	73 0b       	sbc	r23, r19
    1e1c:	84 0b       	sbc	r24, r20
    1e1e:	95 0b       	sbc	r25, r21
    1e20:	39 f4       	brne	.+14     	; 0x1e30 <__fp_cmp+0x38>
    1e22:	0a 26       	eor	r0, r26
    1e24:	61 f0       	breq	.+24     	; 0x1e3e <__fp_cmp+0x46>
    1e26:	23 2b       	or	r18, r19
    1e28:	24 2b       	or	r18, r20
    1e2a:	25 2b       	or	r18, r21
    1e2c:	21 f4       	brne	.+8      	; 0x1e36 <__fp_cmp+0x3e>
    1e2e:	08 95       	ret
    1e30:	0a 26       	eor	r0, r26
    1e32:	09 f4       	brne	.+2      	; 0x1e36 <__fp_cmp+0x3e>
    1e34:	a1 40       	sbci	r26, 0x01	; 1
    1e36:	a6 95       	lsr	r26
    1e38:	8f ef       	ldi	r24, 0xFF	; 255
    1e3a:	81 1d       	adc	r24, r1
    1e3c:	81 1d       	adc	r24, r1
    1e3e:	08 95       	ret

00001e40 <__fp_inf>:
    1e40:	97 f9       	bld	r25, 7
    1e42:	9f 67       	ori	r25, 0x7F	; 127
    1e44:	80 e8       	ldi	r24, 0x80	; 128
    1e46:	70 e0       	ldi	r23, 0x00	; 0
    1e48:	60 e0       	ldi	r22, 0x00	; 0
    1e4a:	08 95       	ret

00001e4c <__fp_nan>:
    1e4c:	9f ef       	ldi	r25, 0xFF	; 255
    1e4e:	80 ec       	ldi	r24, 0xC0	; 192
    1e50:	08 95       	ret

00001e52 <__fp_pscA>:
    1e52:	00 24       	eor	r0, r0
    1e54:	0a 94       	dec	r0
    1e56:	16 16       	cp	r1, r22
    1e58:	17 06       	cpc	r1, r23
    1e5a:	18 06       	cpc	r1, r24
    1e5c:	09 06       	cpc	r0, r25
    1e5e:	08 95       	ret

00001e60 <__fp_pscB>:
    1e60:	00 24       	eor	r0, r0
    1e62:	0a 94       	dec	r0
    1e64:	12 16       	cp	r1, r18
    1e66:	13 06       	cpc	r1, r19
    1e68:	14 06       	cpc	r1, r20
    1e6a:	05 06       	cpc	r0, r21
    1e6c:	08 95       	ret

00001e6e <__fp_round>:
    1e6e:	09 2e       	mov	r0, r25
    1e70:	03 94       	inc	r0
    1e72:	00 0c       	add	r0, r0
    1e74:	11 f4       	brne	.+4      	; 0x1e7a <__fp_round+0xc>
    1e76:	88 23       	and	r24, r24
    1e78:	52 f0       	brmi	.+20     	; 0x1e8e <__fp_round+0x20>
    1e7a:	bb 0f       	add	r27, r27
    1e7c:	40 f4       	brcc	.+16     	; 0x1e8e <__fp_round+0x20>
    1e7e:	bf 2b       	or	r27, r31
    1e80:	11 f4       	brne	.+4      	; 0x1e86 <__fp_round+0x18>
    1e82:	60 ff       	sbrs	r22, 0
    1e84:	04 c0       	rjmp	.+8      	; 0x1e8e <__fp_round+0x20>
    1e86:	6f 5f       	subi	r22, 0xFF	; 255
    1e88:	7f 4f       	sbci	r23, 0xFF	; 255
    1e8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e8e:	08 95       	ret

00001e90 <__fp_split3>:
    1e90:	57 fd       	sbrc	r21, 7
    1e92:	90 58       	subi	r25, 0x80	; 128
    1e94:	44 0f       	add	r20, r20
    1e96:	55 1f       	adc	r21, r21
    1e98:	59 f0       	breq	.+22     	; 0x1eb0 <__fp_splitA+0x10>
    1e9a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e9c:	71 f0       	breq	.+28     	; 0x1eba <__fp_splitA+0x1a>
    1e9e:	47 95       	ror	r20

00001ea0 <__fp_splitA>:
    1ea0:	88 0f       	add	r24, r24
    1ea2:	97 fb       	bst	r25, 7
    1ea4:	99 1f       	adc	r25, r25
    1ea6:	61 f0       	breq	.+24     	; 0x1ec0 <__fp_splitA+0x20>
    1ea8:	9f 3f       	cpi	r25, 0xFF	; 255
    1eaa:	79 f0       	breq	.+30     	; 0x1eca <__fp_splitA+0x2a>
    1eac:	87 95       	ror	r24
    1eae:	08 95       	ret
    1eb0:	12 16       	cp	r1, r18
    1eb2:	13 06       	cpc	r1, r19
    1eb4:	14 06       	cpc	r1, r20
    1eb6:	55 1f       	adc	r21, r21
    1eb8:	f2 cf       	rjmp	.-28     	; 0x1e9e <__fp_split3+0xe>
    1eba:	46 95       	lsr	r20
    1ebc:	f1 df       	rcall	.-30     	; 0x1ea0 <__fp_splitA>
    1ebe:	08 c0       	rjmp	.+16     	; 0x1ed0 <__fp_splitA+0x30>
    1ec0:	16 16       	cp	r1, r22
    1ec2:	17 06       	cpc	r1, r23
    1ec4:	18 06       	cpc	r1, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	f1 cf       	rjmp	.-30     	; 0x1eac <__fp_splitA+0xc>
    1eca:	86 95       	lsr	r24
    1ecc:	71 05       	cpc	r23, r1
    1ece:	61 05       	cpc	r22, r1
    1ed0:	08 94       	sec
    1ed2:	08 95       	ret

00001ed4 <__fp_zero>:
    1ed4:	e8 94       	clt

00001ed6 <__fp_szero>:
    1ed6:	bb 27       	eor	r27, r27
    1ed8:	66 27       	eor	r22, r22
    1eda:	77 27       	eor	r23, r23
    1edc:	cb 01       	movw	r24, r22
    1ede:	97 f9       	bld	r25, 7
    1ee0:	08 95       	ret

00001ee2 <__gesf2>:
    1ee2:	8a df       	rcall	.-236    	; 0x1df8 <__fp_cmp>
    1ee4:	08 f4       	brcc	.+2      	; 0x1ee8 <__gesf2+0x6>
    1ee6:	8f ef       	ldi	r24, 0xFF	; 255
    1ee8:	08 95       	ret

00001eea <__mulsf3>:
    1eea:	0b d0       	rcall	.+22     	; 0x1f02 <__mulsf3x>
    1eec:	c0 cf       	rjmp	.-128    	; 0x1e6e <__fp_round>
    1eee:	b1 df       	rcall	.-158    	; 0x1e52 <__fp_pscA>
    1ef0:	28 f0       	brcs	.+10     	; 0x1efc <__mulsf3+0x12>
    1ef2:	b6 df       	rcall	.-148    	; 0x1e60 <__fp_pscB>
    1ef4:	18 f0       	brcs	.+6      	; 0x1efc <__mulsf3+0x12>
    1ef6:	95 23       	and	r25, r21
    1ef8:	09 f0       	breq	.+2      	; 0x1efc <__mulsf3+0x12>
    1efa:	a2 cf       	rjmp	.-188    	; 0x1e40 <__fp_inf>
    1efc:	a7 cf       	rjmp	.-178    	; 0x1e4c <__fp_nan>
    1efe:	11 24       	eor	r1, r1
    1f00:	ea cf       	rjmp	.-44     	; 0x1ed6 <__fp_szero>

00001f02 <__mulsf3x>:
    1f02:	c6 df       	rcall	.-116    	; 0x1e90 <__fp_split3>
    1f04:	a0 f3       	brcs	.-24     	; 0x1eee <__mulsf3+0x4>

00001f06 <__mulsf3_pse>:
    1f06:	95 9f       	mul	r25, r21
    1f08:	d1 f3       	breq	.-12     	; 0x1efe <__mulsf3+0x14>
    1f0a:	95 0f       	add	r25, r21
    1f0c:	50 e0       	ldi	r21, 0x00	; 0
    1f0e:	55 1f       	adc	r21, r21
    1f10:	62 9f       	mul	r22, r18
    1f12:	f0 01       	movw	r30, r0
    1f14:	72 9f       	mul	r23, r18
    1f16:	bb 27       	eor	r27, r27
    1f18:	f0 0d       	add	r31, r0
    1f1a:	b1 1d       	adc	r27, r1
    1f1c:	63 9f       	mul	r22, r19
    1f1e:	aa 27       	eor	r26, r26
    1f20:	f0 0d       	add	r31, r0
    1f22:	b1 1d       	adc	r27, r1
    1f24:	aa 1f       	adc	r26, r26
    1f26:	64 9f       	mul	r22, r20
    1f28:	66 27       	eor	r22, r22
    1f2a:	b0 0d       	add	r27, r0
    1f2c:	a1 1d       	adc	r26, r1
    1f2e:	66 1f       	adc	r22, r22
    1f30:	82 9f       	mul	r24, r18
    1f32:	22 27       	eor	r18, r18
    1f34:	b0 0d       	add	r27, r0
    1f36:	a1 1d       	adc	r26, r1
    1f38:	62 1f       	adc	r22, r18
    1f3a:	73 9f       	mul	r23, r19
    1f3c:	b0 0d       	add	r27, r0
    1f3e:	a1 1d       	adc	r26, r1
    1f40:	62 1f       	adc	r22, r18
    1f42:	83 9f       	mul	r24, r19
    1f44:	a0 0d       	add	r26, r0
    1f46:	61 1d       	adc	r22, r1
    1f48:	22 1f       	adc	r18, r18
    1f4a:	74 9f       	mul	r23, r20
    1f4c:	33 27       	eor	r19, r19
    1f4e:	a0 0d       	add	r26, r0
    1f50:	61 1d       	adc	r22, r1
    1f52:	23 1f       	adc	r18, r19
    1f54:	84 9f       	mul	r24, r20
    1f56:	60 0d       	add	r22, r0
    1f58:	21 1d       	adc	r18, r1
    1f5a:	82 2f       	mov	r24, r18
    1f5c:	76 2f       	mov	r23, r22
    1f5e:	6a 2f       	mov	r22, r26
    1f60:	11 24       	eor	r1, r1
    1f62:	9f 57       	subi	r25, 0x7F	; 127
    1f64:	50 40       	sbci	r21, 0x00	; 0
    1f66:	8a f0       	brmi	.+34     	; 0x1f8a <__mulsf3_pse+0x84>
    1f68:	e1 f0       	breq	.+56     	; 0x1fa2 <__mulsf3_pse+0x9c>
    1f6a:	88 23       	and	r24, r24
    1f6c:	4a f0       	brmi	.+18     	; 0x1f80 <__mulsf3_pse+0x7a>
    1f6e:	ee 0f       	add	r30, r30
    1f70:	ff 1f       	adc	r31, r31
    1f72:	bb 1f       	adc	r27, r27
    1f74:	66 1f       	adc	r22, r22
    1f76:	77 1f       	adc	r23, r23
    1f78:	88 1f       	adc	r24, r24
    1f7a:	91 50       	subi	r25, 0x01	; 1
    1f7c:	50 40       	sbci	r21, 0x00	; 0
    1f7e:	a9 f7       	brne	.-22     	; 0x1f6a <__mulsf3_pse+0x64>
    1f80:	9e 3f       	cpi	r25, 0xFE	; 254
    1f82:	51 05       	cpc	r21, r1
    1f84:	70 f0       	brcs	.+28     	; 0x1fa2 <__mulsf3_pse+0x9c>
    1f86:	5c cf       	rjmp	.-328    	; 0x1e40 <__fp_inf>
    1f88:	a6 cf       	rjmp	.-180    	; 0x1ed6 <__fp_szero>
    1f8a:	5f 3f       	cpi	r21, 0xFF	; 255
    1f8c:	ec f3       	brlt	.-6      	; 0x1f88 <__mulsf3_pse+0x82>
    1f8e:	98 3e       	cpi	r25, 0xE8	; 232
    1f90:	dc f3       	brlt	.-10     	; 0x1f88 <__mulsf3_pse+0x82>
    1f92:	86 95       	lsr	r24
    1f94:	77 95       	ror	r23
    1f96:	67 95       	ror	r22
    1f98:	b7 95       	ror	r27
    1f9a:	f7 95       	ror	r31
    1f9c:	e7 95       	ror	r30
    1f9e:	9f 5f       	subi	r25, 0xFF	; 255
    1fa0:	c1 f7       	brne	.-16     	; 0x1f92 <__mulsf3_pse+0x8c>
    1fa2:	fe 2b       	or	r31, r30
    1fa4:	88 0f       	add	r24, r24
    1fa6:	91 1d       	adc	r25, r1
    1fa8:	96 95       	lsr	r25
    1faa:	87 95       	ror	r24
    1fac:	97 f9       	bld	r25, 7
    1fae:	08 95       	ret

00001fb0 <__mulsi3>:
    1fb0:	62 9f       	mul	r22, r18
    1fb2:	d0 01       	movw	r26, r0
    1fb4:	73 9f       	mul	r23, r19
    1fb6:	f0 01       	movw	r30, r0
    1fb8:	82 9f       	mul	r24, r18
    1fba:	e0 0d       	add	r30, r0
    1fbc:	f1 1d       	adc	r31, r1
    1fbe:	64 9f       	mul	r22, r20
    1fc0:	e0 0d       	add	r30, r0
    1fc2:	f1 1d       	adc	r31, r1
    1fc4:	92 9f       	mul	r25, r18
    1fc6:	f0 0d       	add	r31, r0
    1fc8:	83 9f       	mul	r24, r19
    1fca:	f0 0d       	add	r31, r0
    1fcc:	74 9f       	mul	r23, r20
    1fce:	f0 0d       	add	r31, r0
    1fd0:	65 9f       	mul	r22, r21
    1fd2:	f0 0d       	add	r31, r0
    1fd4:	99 27       	eor	r25, r25
    1fd6:	72 9f       	mul	r23, r18
    1fd8:	b0 0d       	add	r27, r0
    1fda:	e1 1d       	adc	r30, r1
    1fdc:	f9 1f       	adc	r31, r25
    1fde:	63 9f       	mul	r22, r19
    1fe0:	b0 0d       	add	r27, r0
    1fe2:	e1 1d       	adc	r30, r1
    1fe4:	f9 1f       	adc	r31, r25
    1fe6:	bd 01       	movw	r22, r26
    1fe8:	cf 01       	movw	r24, r30
    1fea:	11 24       	eor	r1, r1
    1fec:	08 95       	ret

00001fee <__divmodhi4>:
    1fee:	97 fb       	bst	r25, 7
    1ff0:	09 2e       	mov	r0, r25
    1ff2:	07 26       	eor	r0, r23
    1ff4:	0a d0       	rcall	.+20     	; 0x200a <__divmodhi4_neg1>
    1ff6:	77 fd       	sbrc	r23, 7
    1ff8:	04 d0       	rcall	.+8      	; 0x2002 <__divmodhi4_neg2>
    1ffa:	2e d0       	rcall	.+92     	; 0x2058 <__udivmodhi4>
    1ffc:	06 d0       	rcall	.+12     	; 0x200a <__divmodhi4_neg1>
    1ffe:	00 20       	and	r0, r0
    2000:	1a f4       	brpl	.+6      	; 0x2008 <__divmodhi4_exit>

00002002 <__divmodhi4_neg2>:
    2002:	70 95       	com	r23
    2004:	61 95       	neg	r22
    2006:	7f 4f       	sbci	r23, 0xFF	; 255

00002008 <__divmodhi4_exit>:
    2008:	08 95       	ret

0000200a <__divmodhi4_neg1>:
    200a:	f6 f7       	brtc	.-4      	; 0x2008 <__divmodhi4_exit>
    200c:	90 95       	com	r25
    200e:	81 95       	neg	r24
    2010:	9f 4f       	sbci	r25, 0xFF	; 255
    2012:	08 95       	ret

00002014 <__udivmodsi4>:
    2014:	a1 e2       	ldi	r26, 0x21	; 33
    2016:	1a 2e       	mov	r1, r26
    2018:	aa 1b       	sub	r26, r26
    201a:	bb 1b       	sub	r27, r27
    201c:	fd 01       	movw	r30, r26
    201e:	0d c0       	rjmp	.+26     	; 0x203a <__udivmodsi4_ep>

00002020 <__udivmodsi4_loop>:
    2020:	aa 1f       	adc	r26, r26
    2022:	bb 1f       	adc	r27, r27
    2024:	ee 1f       	adc	r30, r30
    2026:	ff 1f       	adc	r31, r31
    2028:	a2 17       	cp	r26, r18
    202a:	b3 07       	cpc	r27, r19
    202c:	e4 07       	cpc	r30, r20
    202e:	f5 07       	cpc	r31, r21
    2030:	20 f0       	brcs	.+8      	; 0x203a <__udivmodsi4_ep>
    2032:	a2 1b       	sub	r26, r18
    2034:	b3 0b       	sbc	r27, r19
    2036:	e4 0b       	sbc	r30, r20
    2038:	f5 0b       	sbc	r31, r21

0000203a <__udivmodsi4_ep>:
    203a:	66 1f       	adc	r22, r22
    203c:	77 1f       	adc	r23, r23
    203e:	88 1f       	adc	r24, r24
    2040:	99 1f       	adc	r25, r25
    2042:	1a 94       	dec	r1
    2044:	69 f7       	brne	.-38     	; 0x2020 <__udivmodsi4_loop>
    2046:	60 95       	com	r22
    2048:	70 95       	com	r23
    204a:	80 95       	com	r24
    204c:	90 95       	com	r25
    204e:	9b 01       	movw	r18, r22
    2050:	ac 01       	movw	r20, r24
    2052:	bd 01       	movw	r22, r26
    2054:	cf 01       	movw	r24, r30
    2056:	08 95       	ret

00002058 <__udivmodhi4>:
    2058:	aa 1b       	sub	r26, r26
    205a:	bb 1b       	sub	r27, r27
    205c:	51 e1       	ldi	r21, 0x11	; 17
    205e:	07 c0       	rjmp	.+14     	; 0x206e <__udivmodhi4_ep>

00002060 <__udivmodhi4_loop>:
    2060:	aa 1f       	adc	r26, r26
    2062:	bb 1f       	adc	r27, r27
    2064:	a6 17       	cp	r26, r22
    2066:	b7 07       	cpc	r27, r23
    2068:	10 f0       	brcs	.+4      	; 0x206e <__udivmodhi4_ep>
    206a:	a6 1b       	sub	r26, r22
    206c:	b7 0b       	sbc	r27, r23

0000206e <__udivmodhi4_ep>:
    206e:	88 1f       	adc	r24, r24
    2070:	99 1f       	adc	r25, r25
    2072:	5a 95       	dec	r21
    2074:	a9 f7       	brne	.-22     	; 0x2060 <__udivmodhi4_loop>
    2076:	80 95       	com	r24
    2078:	90 95       	com	r25
    207a:	bc 01       	movw	r22, r24
    207c:	cd 01       	movw	r24, r26
    207e:	08 95       	ret

00002080 <snprintf>:
    2080:	ae e0       	ldi	r26, 0x0E	; 14
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	e6 e4       	ldi	r30, 0x46	; 70
    2086:	f0 e1       	ldi	r31, 0x10	; 16
    2088:	0c 94 1e 13 	jmp	0x263c	; 0x263c <__prologue_saves__+0x1c>
    208c:	0d 89       	ldd	r16, Y+21	; 0x15
    208e:	1e 89       	ldd	r17, Y+22	; 0x16
    2090:	8f 89       	ldd	r24, Y+23	; 0x17
    2092:	98 8d       	ldd	r25, Y+24	; 0x18
    2094:	26 e0       	ldi	r18, 0x06	; 6
    2096:	2c 83       	std	Y+4, r18	; 0x04
    2098:	1a 83       	std	Y+2, r17	; 0x02
    209a:	09 83       	std	Y+1, r16	; 0x01
    209c:	97 ff       	sbrs	r25, 7
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <snprintf+0x24>
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    20a2:	90 e8       	ldi	r25, 0x80	; 128
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	9e 83       	std	Y+6, r25	; 0x06
    20a8:	8d 83       	std	Y+5, r24	; 0x05
    20aa:	ae 01       	movw	r20, r28
    20ac:	45 5e       	subi	r20, 0xE5	; 229
    20ae:	5f 4f       	sbci	r21, 0xFF	; 255
    20b0:	ce 01       	movw	r24, r28
    20b2:	01 96       	adiw	r24, 0x01	; 1
    20b4:	69 8d       	ldd	r22, Y+25	; 0x19
    20b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20b8:	0e 94 92 10 	call	0x2124	; 0x2124 <vfprintf>
    20bc:	4d 81       	ldd	r20, Y+5	; 0x05
    20be:	5e 81       	ldd	r21, Y+6	; 0x06
    20c0:	57 fd       	sbrc	r21, 7
    20c2:	0a c0       	rjmp	.+20     	; 0x20d8 <snprintf+0x58>
    20c4:	2f 81       	ldd	r18, Y+7	; 0x07
    20c6:	38 85       	ldd	r19, Y+8	; 0x08
    20c8:	42 17       	cp	r20, r18
    20ca:	53 07       	cpc	r21, r19
    20cc:	0c f4       	brge	.+2      	; 0x20d0 <snprintf+0x50>
    20ce:	9a 01       	movw	r18, r20
    20d0:	02 0f       	add	r16, r18
    20d2:	13 1f       	adc	r17, r19
    20d4:	f8 01       	movw	r30, r16
    20d6:	10 82       	st	Z, r1
    20d8:	2e 96       	adiw	r28, 0x0e	; 14
    20da:	e4 e0       	ldi	r30, 0x04	; 4
    20dc:	0c 94 3a 13 	jmp	0x2674	; 0x2674 <__epilogue_restores__+0x1c>

000020e0 <sprintf>:
    20e0:	ae e0       	ldi	r26, 0x0E	; 14
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	e6 e7       	ldi	r30, 0x76	; 118
    20e6:	f0 e1       	ldi	r31, 0x10	; 16
    20e8:	0c 94 1e 13 	jmp	0x263c	; 0x263c <__prologue_saves__+0x1c>
    20ec:	0d 89       	ldd	r16, Y+21	; 0x15
    20ee:	1e 89       	ldd	r17, Y+22	; 0x16
    20f0:	86 e0       	ldi	r24, 0x06	; 6
    20f2:	8c 83       	std	Y+4, r24	; 0x04
    20f4:	1a 83       	std	Y+2, r17	; 0x02
    20f6:	09 83       	std	Y+1, r16	; 0x01
    20f8:	8f ef       	ldi	r24, 0xFF	; 255
    20fa:	9f e7       	ldi	r25, 0x7F	; 127
    20fc:	9e 83       	std	Y+6, r25	; 0x06
    20fe:	8d 83       	std	Y+5, r24	; 0x05
    2100:	ae 01       	movw	r20, r28
    2102:	47 5e       	subi	r20, 0xE7	; 231
    2104:	5f 4f       	sbci	r21, 0xFF	; 255
    2106:	ce 01       	movw	r24, r28
    2108:	01 96       	adiw	r24, 0x01	; 1
    210a:	6f 89       	ldd	r22, Y+23	; 0x17
    210c:	78 8d       	ldd	r23, Y+24	; 0x18
    210e:	0e 94 92 10 	call	0x2124	; 0x2124 <vfprintf>
    2112:	ef 81       	ldd	r30, Y+7	; 0x07
    2114:	f8 85       	ldd	r31, Y+8	; 0x08
    2116:	e0 0f       	add	r30, r16
    2118:	f1 1f       	adc	r31, r17
    211a:	10 82       	st	Z, r1
    211c:	2e 96       	adiw	r28, 0x0e	; 14
    211e:	e4 e0       	ldi	r30, 0x04	; 4
    2120:	0c 94 3a 13 	jmp	0x2674	; 0x2674 <__epilogue_restores__+0x1c>

00002124 <vfprintf>:
    2124:	ad e0       	ldi	r26, 0x0D	; 13
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e8 e9       	ldi	r30, 0x98	; 152
    212a:	f0 e1       	ldi	r31, 0x10	; 16
    212c:	0c 94 10 13 	jmp	0x2620	; 0x2620 <__prologue_saves__>
    2130:	3c 01       	movw	r6, r24
    2132:	7d 87       	std	Y+13, r23	; 0x0d
    2134:	6c 87       	std	Y+12, r22	; 0x0c
    2136:	5a 01       	movw	r10, r20
    2138:	fc 01       	movw	r30, r24
    213a:	17 82       	std	Z+7, r1	; 0x07
    213c:	16 82       	std	Z+6, r1	; 0x06
    213e:	83 81       	ldd	r24, Z+3	; 0x03
    2140:	81 ff       	sbrs	r24, 1
    2142:	c8 c1       	rjmp	.+912    	; 0x24d4 <vfprintf+0x3b0>
    2144:	2e 01       	movw	r4, r28
    2146:	08 94       	sec
    2148:	41 1c       	adc	r4, r1
    214a:	51 1c       	adc	r5, r1
    214c:	f3 01       	movw	r30, r6
    214e:	93 81       	ldd	r25, Z+3	; 0x03
    2150:	ec 85       	ldd	r30, Y+12	; 0x0c
    2152:	fd 85       	ldd	r31, Y+13	; 0x0d
    2154:	93 fd       	sbrc	r25, 3
    2156:	85 91       	lpm	r24, Z+
    2158:	93 ff       	sbrs	r25, 3
    215a:	81 91       	ld	r24, Z+
    215c:	fd 87       	std	Y+13, r31	; 0x0d
    215e:	ec 87       	std	Y+12, r30	; 0x0c
    2160:	88 23       	and	r24, r24
    2162:	09 f4       	brne	.+2      	; 0x2166 <vfprintf+0x42>
    2164:	b3 c1       	rjmp	.+870    	; 0x24cc <vfprintf+0x3a8>
    2166:	85 32       	cpi	r24, 0x25	; 37
    2168:	41 f4       	brne	.+16     	; 0x217a <vfprintf+0x56>
    216a:	93 fd       	sbrc	r25, 3
    216c:	85 91       	lpm	r24, Z+
    216e:	93 ff       	sbrs	r25, 3
    2170:	81 91       	ld	r24, Z+
    2172:	fd 87       	std	Y+13, r31	; 0x0d
    2174:	ec 87       	std	Y+12, r30	; 0x0c
    2176:	85 32       	cpi	r24, 0x25	; 37
    2178:	29 f4       	brne	.+10     	; 0x2184 <vfprintf+0x60>
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	b3 01       	movw	r22, r6
    217e:	0e 94 86 12 	call	0x250c	; 0x250c <fputc>
    2182:	e4 cf       	rjmp	.-56     	; 0x214c <vfprintf+0x28>
    2184:	ff 24       	eor	r15, r15
    2186:	ee 24       	eor	r14, r14
    2188:	10 e0       	ldi	r17, 0x00	; 0
    218a:	10 32       	cpi	r17, 0x20	; 32
    218c:	b0 f4       	brcc	.+44     	; 0x21ba <vfprintf+0x96>
    218e:	8b 32       	cpi	r24, 0x2B	; 43
    2190:	69 f0       	breq	.+26     	; 0x21ac <vfprintf+0x88>
    2192:	8c 32       	cpi	r24, 0x2C	; 44
    2194:	28 f4       	brcc	.+10     	; 0x21a0 <vfprintf+0x7c>
    2196:	80 32       	cpi	r24, 0x20	; 32
    2198:	51 f0       	breq	.+20     	; 0x21ae <vfprintf+0x8a>
    219a:	83 32       	cpi	r24, 0x23	; 35
    219c:	71 f4       	brne	.+28     	; 0x21ba <vfprintf+0x96>
    219e:	0b c0       	rjmp	.+22     	; 0x21b6 <vfprintf+0x92>
    21a0:	8d 32       	cpi	r24, 0x2D	; 45
    21a2:	39 f0       	breq	.+14     	; 0x21b2 <vfprintf+0x8e>
    21a4:	80 33       	cpi	r24, 0x30	; 48
    21a6:	49 f4       	brne	.+18     	; 0x21ba <vfprintf+0x96>
    21a8:	11 60       	ori	r17, 0x01	; 1
    21aa:	2c c0       	rjmp	.+88     	; 0x2204 <vfprintf+0xe0>
    21ac:	12 60       	ori	r17, 0x02	; 2
    21ae:	14 60       	ori	r17, 0x04	; 4
    21b0:	29 c0       	rjmp	.+82     	; 0x2204 <vfprintf+0xe0>
    21b2:	18 60       	ori	r17, 0x08	; 8
    21b4:	27 c0       	rjmp	.+78     	; 0x2204 <vfprintf+0xe0>
    21b6:	10 61       	ori	r17, 0x10	; 16
    21b8:	25 c0       	rjmp	.+74     	; 0x2204 <vfprintf+0xe0>
    21ba:	17 fd       	sbrc	r17, 7
    21bc:	2e c0       	rjmp	.+92     	; 0x221a <vfprintf+0xf6>
    21be:	28 2f       	mov	r18, r24
    21c0:	20 53       	subi	r18, 0x30	; 48
    21c2:	2a 30       	cpi	r18, 0x0A	; 10
    21c4:	98 f4       	brcc	.+38     	; 0x21ec <vfprintf+0xc8>
    21c6:	16 ff       	sbrs	r17, 6
    21c8:	08 c0       	rjmp	.+16     	; 0x21da <vfprintf+0xb6>
    21ca:	8f 2d       	mov	r24, r15
    21cc:	88 0f       	add	r24, r24
    21ce:	f8 2e       	mov	r15, r24
    21d0:	ff 0c       	add	r15, r15
    21d2:	ff 0c       	add	r15, r15
    21d4:	f8 0e       	add	r15, r24
    21d6:	f2 0e       	add	r15, r18
    21d8:	15 c0       	rjmp	.+42     	; 0x2204 <vfprintf+0xe0>
    21da:	8e 2d       	mov	r24, r14
    21dc:	88 0f       	add	r24, r24
    21de:	e8 2e       	mov	r14, r24
    21e0:	ee 0c       	add	r14, r14
    21e2:	ee 0c       	add	r14, r14
    21e4:	e8 0e       	add	r14, r24
    21e6:	e2 0e       	add	r14, r18
    21e8:	10 62       	ori	r17, 0x20	; 32
    21ea:	0c c0       	rjmp	.+24     	; 0x2204 <vfprintf+0xe0>
    21ec:	8e 32       	cpi	r24, 0x2E	; 46
    21ee:	21 f4       	brne	.+8      	; 0x21f8 <vfprintf+0xd4>
    21f0:	16 fd       	sbrc	r17, 6
    21f2:	6c c1       	rjmp	.+728    	; 0x24cc <vfprintf+0x3a8>
    21f4:	10 64       	ori	r17, 0x40	; 64
    21f6:	06 c0       	rjmp	.+12     	; 0x2204 <vfprintf+0xe0>
    21f8:	8c 36       	cpi	r24, 0x6C	; 108
    21fa:	11 f4       	brne	.+4      	; 0x2200 <vfprintf+0xdc>
    21fc:	10 68       	ori	r17, 0x80	; 128
    21fe:	02 c0       	rjmp	.+4      	; 0x2204 <vfprintf+0xe0>
    2200:	88 36       	cpi	r24, 0x68	; 104
    2202:	59 f4       	brne	.+22     	; 0x221a <vfprintf+0xf6>
    2204:	ec 85       	ldd	r30, Y+12	; 0x0c
    2206:	fd 85       	ldd	r31, Y+13	; 0x0d
    2208:	93 fd       	sbrc	r25, 3
    220a:	85 91       	lpm	r24, Z+
    220c:	93 ff       	sbrs	r25, 3
    220e:	81 91       	ld	r24, Z+
    2210:	fd 87       	std	Y+13, r31	; 0x0d
    2212:	ec 87       	std	Y+12, r30	; 0x0c
    2214:	88 23       	and	r24, r24
    2216:	09 f0       	breq	.+2      	; 0x221a <vfprintf+0xf6>
    2218:	b8 cf       	rjmp	.-144    	; 0x218a <vfprintf+0x66>
    221a:	98 2f       	mov	r25, r24
    221c:	95 54       	subi	r25, 0x45	; 69
    221e:	93 30       	cpi	r25, 0x03	; 3
    2220:	18 f0       	brcs	.+6      	; 0x2228 <vfprintf+0x104>
    2222:	90 52       	subi	r25, 0x20	; 32
    2224:	93 30       	cpi	r25, 0x03	; 3
    2226:	38 f4       	brcc	.+14     	; 0x2236 <vfprintf+0x112>
    2228:	24 e0       	ldi	r18, 0x04	; 4
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	a2 0e       	add	r10, r18
    222e:	b3 1e       	adc	r11, r19
    2230:	3f e3       	ldi	r19, 0x3F	; 63
    2232:	39 83       	std	Y+1, r19	; 0x01
    2234:	0f c0       	rjmp	.+30     	; 0x2254 <vfprintf+0x130>
    2236:	83 36       	cpi	r24, 0x63	; 99
    2238:	31 f0       	breq	.+12     	; 0x2246 <vfprintf+0x122>
    223a:	83 37       	cpi	r24, 0x73	; 115
    223c:	81 f0       	breq	.+32     	; 0x225e <vfprintf+0x13a>
    223e:	83 35       	cpi	r24, 0x53	; 83
    2240:	09 f0       	breq	.+2      	; 0x2244 <vfprintf+0x120>
    2242:	5a c0       	rjmp	.+180    	; 0x22f8 <vfprintf+0x1d4>
    2244:	22 c0       	rjmp	.+68     	; 0x228a <vfprintf+0x166>
    2246:	f5 01       	movw	r30, r10
    2248:	80 81       	ld	r24, Z
    224a:	89 83       	std	Y+1, r24	; 0x01
    224c:	22 e0       	ldi	r18, 0x02	; 2
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	a2 0e       	add	r10, r18
    2252:	b3 1e       	adc	r11, r19
    2254:	21 e0       	ldi	r18, 0x01	; 1
    2256:	c2 2e       	mov	r12, r18
    2258:	d1 2c       	mov	r13, r1
    225a:	42 01       	movw	r8, r4
    225c:	14 c0       	rjmp	.+40     	; 0x2286 <vfprintf+0x162>
    225e:	92 e0       	ldi	r25, 0x02	; 2
    2260:	29 2e       	mov	r2, r25
    2262:	31 2c       	mov	r3, r1
    2264:	2a 0c       	add	r2, r10
    2266:	3b 1c       	adc	r3, r11
    2268:	f5 01       	movw	r30, r10
    226a:	80 80       	ld	r8, Z
    226c:	91 80       	ldd	r9, Z+1	; 0x01
    226e:	16 ff       	sbrs	r17, 6
    2270:	03 c0       	rjmp	.+6      	; 0x2278 <vfprintf+0x154>
    2272:	6f 2d       	mov	r22, r15
    2274:	70 e0       	ldi	r23, 0x00	; 0
    2276:	02 c0       	rjmp	.+4      	; 0x227c <vfprintf+0x158>
    2278:	6f ef       	ldi	r22, 0xFF	; 255
    227a:	7f ef       	ldi	r23, 0xFF	; 255
    227c:	c4 01       	movw	r24, r8
    227e:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <strnlen>
    2282:	6c 01       	movw	r12, r24
    2284:	51 01       	movw	r10, r2
    2286:	1f 77       	andi	r17, 0x7F	; 127
    2288:	15 c0       	rjmp	.+42     	; 0x22b4 <vfprintf+0x190>
    228a:	82 e0       	ldi	r24, 0x02	; 2
    228c:	28 2e       	mov	r2, r24
    228e:	31 2c       	mov	r3, r1
    2290:	2a 0c       	add	r2, r10
    2292:	3b 1c       	adc	r3, r11
    2294:	f5 01       	movw	r30, r10
    2296:	80 80       	ld	r8, Z
    2298:	91 80       	ldd	r9, Z+1	; 0x01
    229a:	16 ff       	sbrs	r17, 6
    229c:	03 c0       	rjmp	.+6      	; 0x22a4 <vfprintf+0x180>
    229e:	6f 2d       	mov	r22, r15
    22a0:	70 e0       	ldi	r23, 0x00	; 0
    22a2:	02 c0       	rjmp	.+4      	; 0x22a8 <vfprintf+0x184>
    22a4:	6f ef       	ldi	r22, 0xFF	; 255
    22a6:	7f ef       	ldi	r23, 0xFF	; 255
    22a8:	c4 01       	movw	r24, r8
    22aa:	0e 94 70 12 	call	0x24e0	; 0x24e0 <strnlen_P>
    22ae:	6c 01       	movw	r12, r24
    22b0:	10 68       	ori	r17, 0x80	; 128
    22b2:	51 01       	movw	r10, r2
    22b4:	13 fd       	sbrc	r17, 3
    22b6:	1c c0       	rjmp	.+56     	; 0x22f0 <vfprintf+0x1cc>
    22b8:	06 c0       	rjmp	.+12     	; 0x22c6 <vfprintf+0x1a2>
    22ba:	80 e2       	ldi	r24, 0x20	; 32
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	b3 01       	movw	r22, r6
    22c0:	0e 94 86 12 	call	0x250c	; 0x250c <fputc>
    22c4:	ea 94       	dec	r14
    22c6:	8e 2d       	mov	r24, r14
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	c8 16       	cp	r12, r24
    22cc:	d9 06       	cpc	r13, r25
    22ce:	a8 f3       	brcs	.-22     	; 0x22ba <vfprintf+0x196>
    22d0:	0f c0       	rjmp	.+30     	; 0x22f0 <vfprintf+0x1cc>
    22d2:	f4 01       	movw	r30, r8
    22d4:	17 fd       	sbrc	r17, 7
    22d6:	85 91       	lpm	r24, Z+
    22d8:	17 ff       	sbrs	r17, 7
    22da:	81 91       	ld	r24, Z+
    22dc:	4f 01       	movw	r8, r30
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	b3 01       	movw	r22, r6
    22e2:	0e 94 86 12 	call	0x250c	; 0x250c <fputc>
    22e6:	e1 10       	cpse	r14, r1
    22e8:	ea 94       	dec	r14
    22ea:	08 94       	sec
    22ec:	c1 08       	sbc	r12, r1
    22ee:	d1 08       	sbc	r13, r1
    22f0:	c1 14       	cp	r12, r1
    22f2:	d1 04       	cpc	r13, r1
    22f4:	71 f7       	brne	.-36     	; 0x22d2 <vfprintf+0x1ae>
    22f6:	e7 c0       	rjmp	.+462    	; 0x24c6 <vfprintf+0x3a2>
    22f8:	84 36       	cpi	r24, 0x64	; 100
    22fa:	11 f0       	breq	.+4      	; 0x2300 <vfprintf+0x1dc>
    22fc:	89 36       	cpi	r24, 0x69	; 105
    22fe:	51 f5       	brne	.+84     	; 0x2354 <vfprintf+0x230>
    2300:	f5 01       	movw	r30, r10
    2302:	17 ff       	sbrs	r17, 7
    2304:	07 c0       	rjmp	.+14     	; 0x2314 <vfprintf+0x1f0>
    2306:	80 81       	ld	r24, Z
    2308:	91 81       	ldd	r25, Z+1	; 0x01
    230a:	a2 81       	ldd	r26, Z+2	; 0x02
    230c:	b3 81       	ldd	r27, Z+3	; 0x03
    230e:	24 e0       	ldi	r18, 0x04	; 4
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	08 c0       	rjmp	.+16     	; 0x2324 <vfprintf+0x200>
    2314:	80 81       	ld	r24, Z
    2316:	91 81       	ldd	r25, Z+1	; 0x01
    2318:	aa 27       	eor	r26, r26
    231a:	97 fd       	sbrc	r25, 7
    231c:	a0 95       	com	r26
    231e:	ba 2f       	mov	r27, r26
    2320:	22 e0       	ldi	r18, 0x02	; 2
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	a2 0e       	add	r10, r18
    2326:	b3 1e       	adc	r11, r19
    2328:	01 2f       	mov	r16, r17
    232a:	0f 76       	andi	r16, 0x6F	; 111
    232c:	b7 ff       	sbrs	r27, 7
    232e:	08 c0       	rjmp	.+16     	; 0x2340 <vfprintf+0x21c>
    2330:	b0 95       	com	r27
    2332:	a0 95       	com	r26
    2334:	90 95       	com	r25
    2336:	81 95       	neg	r24
    2338:	9f 4f       	sbci	r25, 0xFF	; 255
    233a:	af 4f       	sbci	r26, 0xFF	; 255
    233c:	bf 4f       	sbci	r27, 0xFF	; 255
    233e:	00 68       	ori	r16, 0x80	; 128
    2340:	bc 01       	movw	r22, r24
    2342:	cd 01       	movw	r24, r26
    2344:	a2 01       	movw	r20, r4
    2346:	2a e0       	ldi	r18, 0x0A	; 10
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	0e 94 b2 12 	call	0x2564	; 0x2564 <__ultoa_invert>
    234e:	d8 2e       	mov	r13, r24
    2350:	d4 18       	sub	r13, r4
    2352:	3f c0       	rjmp	.+126    	; 0x23d2 <vfprintf+0x2ae>
    2354:	85 37       	cpi	r24, 0x75	; 117
    2356:	21 f4       	brne	.+8      	; 0x2360 <vfprintf+0x23c>
    2358:	1f 7e       	andi	r17, 0xEF	; 239
    235a:	2a e0       	ldi	r18, 0x0A	; 10
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	20 c0       	rjmp	.+64     	; 0x23a0 <vfprintf+0x27c>
    2360:	19 7f       	andi	r17, 0xF9	; 249
    2362:	8f 36       	cpi	r24, 0x6F	; 111
    2364:	a9 f0       	breq	.+42     	; 0x2390 <vfprintf+0x26c>
    2366:	80 37       	cpi	r24, 0x70	; 112
    2368:	20 f4       	brcc	.+8      	; 0x2372 <vfprintf+0x24e>
    236a:	88 35       	cpi	r24, 0x58	; 88
    236c:	09 f0       	breq	.+2      	; 0x2370 <vfprintf+0x24c>
    236e:	ae c0       	rjmp	.+348    	; 0x24cc <vfprintf+0x3a8>
    2370:	0b c0       	rjmp	.+22     	; 0x2388 <vfprintf+0x264>
    2372:	80 37       	cpi	r24, 0x70	; 112
    2374:	21 f0       	breq	.+8      	; 0x237e <vfprintf+0x25a>
    2376:	88 37       	cpi	r24, 0x78	; 120
    2378:	09 f0       	breq	.+2      	; 0x237c <vfprintf+0x258>
    237a:	a8 c0       	rjmp	.+336    	; 0x24cc <vfprintf+0x3a8>
    237c:	01 c0       	rjmp	.+2      	; 0x2380 <vfprintf+0x25c>
    237e:	10 61       	ori	r17, 0x10	; 16
    2380:	14 ff       	sbrs	r17, 4
    2382:	09 c0       	rjmp	.+18     	; 0x2396 <vfprintf+0x272>
    2384:	14 60       	ori	r17, 0x04	; 4
    2386:	07 c0       	rjmp	.+14     	; 0x2396 <vfprintf+0x272>
    2388:	14 ff       	sbrs	r17, 4
    238a:	08 c0       	rjmp	.+16     	; 0x239c <vfprintf+0x278>
    238c:	16 60       	ori	r17, 0x06	; 6
    238e:	06 c0       	rjmp	.+12     	; 0x239c <vfprintf+0x278>
    2390:	28 e0       	ldi	r18, 0x08	; 8
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	05 c0       	rjmp	.+10     	; 0x23a0 <vfprintf+0x27c>
    2396:	20 e1       	ldi	r18, 0x10	; 16
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	02 c0       	rjmp	.+4      	; 0x23a0 <vfprintf+0x27c>
    239c:	20 e1       	ldi	r18, 0x10	; 16
    239e:	32 e0       	ldi	r19, 0x02	; 2
    23a0:	f5 01       	movw	r30, r10
    23a2:	17 ff       	sbrs	r17, 7
    23a4:	07 c0       	rjmp	.+14     	; 0x23b4 <vfprintf+0x290>
    23a6:	60 81       	ld	r22, Z
    23a8:	71 81       	ldd	r23, Z+1	; 0x01
    23aa:	82 81       	ldd	r24, Z+2	; 0x02
    23ac:	93 81       	ldd	r25, Z+3	; 0x03
    23ae:	44 e0       	ldi	r20, 0x04	; 4
    23b0:	50 e0       	ldi	r21, 0x00	; 0
    23b2:	06 c0       	rjmp	.+12     	; 0x23c0 <vfprintf+0x29c>
    23b4:	60 81       	ld	r22, Z
    23b6:	71 81       	ldd	r23, Z+1	; 0x01
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	42 e0       	ldi	r20, 0x02	; 2
    23be:	50 e0       	ldi	r21, 0x00	; 0
    23c0:	a4 0e       	add	r10, r20
    23c2:	b5 1e       	adc	r11, r21
    23c4:	a2 01       	movw	r20, r4
    23c6:	0e 94 b2 12 	call	0x2564	; 0x2564 <__ultoa_invert>
    23ca:	d8 2e       	mov	r13, r24
    23cc:	d4 18       	sub	r13, r4
    23ce:	01 2f       	mov	r16, r17
    23d0:	0f 77       	andi	r16, 0x7F	; 127
    23d2:	06 ff       	sbrs	r16, 6
    23d4:	09 c0       	rjmp	.+18     	; 0x23e8 <vfprintf+0x2c4>
    23d6:	0e 7f       	andi	r16, 0xFE	; 254
    23d8:	df 14       	cp	r13, r15
    23da:	30 f4       	brcc	.+12     	; 0x23e8 <vfprintf+0x2c4>
    23dc:	04 ff       	sbrs	r16, 4
    23de:	06 c0       	rjmp	.+12     	; 0x23ec <vfprintf+0x2c8>
    23e0:	02 fd       	sbrc	r16, 2
    23e2:	04 c0       	rjmp	.+8      	; 0x23ec <vfprintf+0x2c8>
    23e4:	0f 7e       	andi	r16, 0xEF	; 239
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <vfprintf+0x2c8>
    23e8:	1d 2d       	mov	r17, r13
    23ea:	01 c0       	rjmp	.+2      	; 0x23ee <vfprintf+0x2ca>
    23ec:	1f 2d       	mov	r17, r15
    23ee:	80 2f       	mov	r24, r16
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	04 ff       	sbrs	r16, 4
    23f4:	0c c0       	rjmp	.+24     	; 0x240e <vfprintf+0x2ea>
    23f6:	fe 01       	movw	r30, r28
    23f8:	ed 0d       	add	r30, r13
    23fa:	f1 1d       	adc	r31, r1
    23fc:	20 81       	ld	r18, Z
    23fe:	20 33       	cpi	r18, 0x30	; 48
    2400:	11 f4       	brne	.+4      	; 0x2406 <vfprintf+0x2e2>
    2402:	09 7e       	andi	r16, 0xE9	; 233
    2404:	09 c0       	rjmp	.+18     	; 0x2418 <vfprintf+0x2f4>
    2406:	02 ff       	sbrs	r16, 2
    2408:	06 c0       	rjmp	.+12     	; 0x2416 <vfprintf+0x2f2>
    240a:	1e 5f       	subi	r17, 0xFE	; 254
    240c:	05 c0       	rjmp	.+10     	; 0x2418 <vfprintf+0x2f4>
    240e:	86 78       	andi	r24, 0x86	; 134
    2410:	90 70       	andi	r25, 0x00	; 0
    2412:	00 97       	sbiw	r24, 0x00	; 0
    2414:	09 f0       	breq	.+2      	; 0x2418 <vfprintf+0x2f4>
    2416:	1f 5f       	subi	r17, 0xFF	; 255
    2418:	80 2e       	mov	r8, r16
    241a:	99 24       	eor	r9, r9
    241c:	03 fd       	sbrc	r16, 3
    241e:	12 c0       	rjmp	.+36     	; 0x2444 <vfprintf+0x320>
    2420:	00 ff       	sbrs	r16, 0
    2422:	0d c0       	rjmp	.+26     	; 0x243e <vfprintf+0x31a>
    2424:	fd 2c       	mov	r15, r13
    2426:	1e 15       	cp	r17, r14
    2428:	50 f4       	brcc	.+20     	; 0x243e <vfprintf+0x31a>
    242a:	fe 0c       	add	r15, r14
    242c:	f1 1a       	sub	r15, r17
    242e:	1e 2d       	mov	r17, r14
    2430:	06 c0       	rjmp	.+12     	; 0x243e <vfprintf+0x31a>
    2432:	80 e2       	ldi	r24, 0x20	; 32
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	b3 01       	movw	r22, r6
    2438:	0e 94 86 12 	call	0x250c	; 0x250c <fputc>
    243c:	1f 5f       	subi	r17, 0xFF	; 255
    243e:	1e 15       	cp	r17, r14
    2440:	c0 f3       	brcs	.-16     	; 0x2432 <vfprintf+0x30e>
    2442:	04 c0       	rjmp	.+8      	; 0x244c <vfprintf+0x328>
    2444:	1e 15       	cp	r17, r14
    2446:	10 f4       	brcc	.+4      	; 0x244c <vfprintf+0x328>
    2448:	e1 1a       	sub	r14, r17
    244a:	01 c0       	rjmp	.+2      	; 0x244e <vfprintf+0x32a>
    244c:	ee 24       	eor	r14, r14
    244e:	84 fe       	sbrs	r8, 4
    2450:	0f c0       	rjmp	.+30     	; 0x2470 <vfprintf+0x34c>
    2452:	80 e3       	ldi	r24, 0x30	; 48
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	b3 01       	movw	r22, r6
    2458:	0e 94 86 12 	call	0x250c	; 0x250c <fputc>
    245c:	82 fe       	sbrs	r8, 2
    245e:	1f c0       	rjmp	.+62     	; 0x249e <vfprintf+0x37a>
    2460:	81 fe       	sbrs	r8, 1
    2462:	03 c0       	rjmp	.+6      	; 0x246a <vfprintf+0x346>
    2464:	88 e5       	ldi	r24, 0x58	; 88
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	10 c0       	rjmp	.+32     	; 0x248a <vfprintf+0x366>
    246a:	88 e7       	ldi	r24, 0x78	; 120
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	0d c0       	rjmp	.+26     	; 0x248a <vfprintf+0x366>
    2470:	c4 01       	movw	r24, r8
    2472:	86 78       	andi	r24, 0x86	; 134
    2474:	90 70       	andi	r25, 0x00	; 0
    2476:	00 97       	sbiw	r24, 0x00	; 0
    2478:	91 f0       	breq	.+36     	; 0x249e <vfprintf+0x37a>
    247a:	81 fc       	sbrc	r8, 1
    247c:	02 c0       	rjmp	.+4      	; 0x2482 <vfprintf+0x35e>
    247e:	80 e2       	ldi	r24, 0x20	; 32
    2480:	01 c0       	rjmp	.+2      	; 0x2484 <vfprintf+0x360>
    2482:	8b e2       	ldi	r24, 0x2B	; 43
    2484:	07 fd       	sbrc	r16, 7
    2486:	8d e2       	ldi	r24, 0x2D	; 45
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	b3 01       	movw	r22, r6
    248c:	0e 94 86 12 	call	0x250c	; 0x250c <fputc>
    2490:	06 c0       	rjmp	.+12     	; 0x249e <vfprintf+0x37a>
    2492:	80 e3       	ldi	r24, 0x30	; 48
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	b3 01       	movw	r22, r6
    2498:	0e 94 86 12 	call	0x250c	; 0x250c <fputc>
    249c:	fa 94       	dec	r15
    249e:	df 14       	cp	r13, r15
    24a0:	c0 f3       	brcs	.-16     	; 0x2492 <vfprintf+0x36e>
    24a2:	da 94       	dec	r13
    24a4:	f2 01       	movw	r30, r4
    24a6:	ed 0d       	add	r30, r13
    24a8:	f1 1d       	adc	r31, r1
    24aa:	80 81       	ld	r24, Z
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	b3 01       	movw	r22, r6
    24b0:	0e 94 86 12 	call	0x250c	; 0x250c <fputc>
    24b4:	dd 20       	and	r13, r13
    24b6:	a9 f7       	brne	.-22     	; 0x24a2 <vfprintf+0x37e>
    24b8:	06 c0       	rjmp	.+12     	; 0x24c6 <vfprintf+0x3a2>
    24ba:	80 e2       	ldi	r24, 0x20	; 32
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	b3 01       	movw	r22, r6
    24c0:	0e 94 86 12 	call	0x250c	; 0x250c <fputc>
    24c4:	ea 94       	dec	r14
    24c6:	ee 20       	and	r14, r14
    24c8:	c1 f7       	brne	.-16     	; 0x24ba <vfprintf+0x396>
    24ca:	40 ce       	rjmp	.-896    	; 0x214c <vfprintf+0x28>
    24cc:	f3 01       	movw	r30, r6
    24ce:	86 81       	ldd	r24, Z+6	; 0x06
    24d0:	97 81       	ldd	r25, Z+7	; 0x07
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <vfprintf+0x3b4>
    24d4:	8f ef       	ldi	r24, 0xFF	; 255
    24d6:	9f ef       	ldi	r25, 0xFF	; 255
    24d8:	2d 96       	adiw	r28, 0x0d	; 13
    24da:	e2 e1       	ldi	r30, 0x12	; 18
    24dc:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <__epilogue_restores__>

000024e0 <strnlen_P>:
    24e0:	fc 01       	movw	r30, r24
    24e2:	05 90       	lpm	r0, Z+
    24e4:	61 50       	subi	r22, 0x01	; 1
    24e6:	70 40       	sbci	r23, 0x00	; 0
    24e8:	01 10       	cpse	r0, r1
    24ea:	d8 f7       	brcc	.-10     	; 0x24e2 <strnlen_P+0x2>
    24ec:	80 95       	com	r24
    24ee:	90 95       	com	r25
    24f0:	8e 0f       	add	r24, r30
    24f2:	9f 1f       	adc	r25, r31
    24f4:	08 95       	ret

000024f6 <strnlen>:
    24f6:	fc 01       	movw	r30, r24
    24f8:	61 50       	subi	r22, 0x01	; 1
    24fa:	70 40       	sbci	r23, 0x00	; 0
    24fc:	01 90       	ld	r0, Z+
    24fe:	01 10       	cpse	r0, r1
    2500:	d8 f7       	brcc	.-10     	; 0x24f8 <strnlen+0x2>
    2502:	80 95       	com	r24
    2504:	90 95       	com	r25
    2506:	8e 0f       	add	r24, r30
    2508:	9f 1f       	adc	r25, r31
    250a:	08 95       	ret

0000250c <fputc>:
    250c:	0f 93       	push	r16
    250e:	1f 93       	push	r17
    2510:	cf 93       	push	r28
    2512:	df 93       	push	r29
    2514:	8c 01       	movw	r16, r24
    2516:	eb 01       	movw	r28, r22
    2518:	8b 81       	ldd	r24, Y+3	; 0x03
    251a:	81 ff       	sbrs	r24, 1
    251c:	1b c0       	rjmp	.+54     	; 0x2554 <fputc+0x48>
    251e:	82 ff       	sbrs	r24, 2
    2520:	0d c0       	rjmp	.+26     	; 0x253c <fputc+0x30>
    2522:	2e 81       	ldd	r18, Y+6	; 0x06
    2524:	3f 81       	ldd	r19, Y+7	; 0x07
    2526:	8c 81       	ldd	r24, Y+4	; 0x04
    2528:	9d 81       	ldd	r25, Y+5	; 0x05
    252a:	28 17       	cp	r18, r24
    252c:	39 07       	cpc	r19, r25
    252e:	64 f4       	brge	.+24     	; 0x2548 <fputc+0x3c>
    2530:	e8 81       	ld	r30, Y
    2532:	f9 81       	ldd	r31, Y+1	; 0x01
    2534:	01 93       	st	Z+, r16
    2536:	f9 83       	std	Y+1, r31	; 0x01
    2538:	e8 83       	st	Y, r30
    253a:	06 c0       	rjmp	.+12     	; 0x2548 <fputc+0x3c>
    253c:	e8 85       	ldd	r30, Y+8	; 0x08
    253e:	f9 85       	ldd	r31, Y+9	; 0x09
    2540:	80 2f       	mov	r24, r16
    2542:	09 95       	icall
    2544:	00 97       	sbiw	r24, 0x00	; 0
    2546:	31 f4       	brne	.+12     	; 0x2554 <fputc+0x48>
    2548:	8e 81       	ldd	r24, Y+6	; 0x06
    254a:	9f 81       	ldd	r25, Y+7	; 0x07
    254c:	01 96       	adiw	r24, 0x01	; 1
    254e:	9f 83       	std	Y+7, r25	; 0x07
    2550:	8e 83       	std	Y+6, r24	; 0x06
    2552:	02 c0       	rjmp	.+4      	; 0x2558 <fputc+0x4c>
    2554:	0f ef       	ldi	r16, 0xFF	; 255
    2556:	1f ef       	ldi	r17, 0xFF	; 255
    2558:	c8 01       	movw	r24, r16
    255a:	df 91       	pop	r29
    255c:	cf 91       	pop	r28
    255e:	1f 91       	pop	r17
    2560:	0f 91       	pop	r16
    2562:	08 95       	ret

00002564 <__ultoa_invert>:
    2564:	fa 01       	movw	r30, r20
    2566:	aa 27       	eor	r26, r26
    2568:	28 30       	cpi	r18, 0x08	; 8
    256a:	51 f1       	breq	.+84     	; 0x25c0 <__ultoa_invert+0x5c>
    256c:	20 31       	cpi	r18, 0x10	; 16
    256e:	81 f1       	breq	.+96     	; 0x25d0 <__ultoa_invert+0x6c>
    2570:	e8 94       	clt
    2572:	6f 93       	push	r22
    2574:	6e 7f       	andi	r22, 0xFE	; 254
    2576:	6e 5f       	subi	r22, 0xFE	; 254
    2578:	7f 4f       	sbci	r23, 0xFF	; 255
    257a:	8f 4f       	sbci	r24, 0xFF	; 255
    257c:	9f 4f       	sbci	r25, 0xFF	; 255
    257e:	af 4f       	sbci	r26, 0xFF	; 255
    2580:	b1 e0       	ldi	r27, 0x01	; 1
    2582:	3e d0       	rcall	.+124    	; 0x2600 <__ultoa_invert+0x9c>
    2584:	b4 e0       	ldi	r27, 0x04	; 4
    2586:	3c d0       	rcall	.+120    	; 0x2600 <__ultoa_invert+0x9c>
    2588:	67 0f       	add	r22, r23
    258a:	78 1f       	adc	r23, r24
    258c:	89 1f       	adc	r24, r25
    258e:	9a 1f       	adc	r25, r26
    2590:	a1 1d       	adc	r26, r1
    2592:	68 0f       	add	r22, r24
    2594:	79 1f       	adc	r23, r25
    2596:	8a 1f       	adc	r24, r26
    2598:	91 1d       	adc	r25, r1
    259a:	a1 1d       	adc	r26, r1
    259c:	6a 0f       	add	r22, r26
    259e:	71 1d       	adc	r23, r1
    25a0:	81 1d       	adc	r24, r1
    25a2:	91 1d       	adc	r25, r1
    25a4:	a1 1d       	adc	r26, r1
    25a6:	20 d0       	rcall	.+64     	; 0x25e8 <__ultoa_invert+0x84>
    25a8:	09 f4       	brne	.+2      	; 0x25ac <__ultoa_invert+0x48>
    25aa:	68 94       	set
    25ac:	3f 91       	pop	r19
    25ae:	2a e0       	ldi	r18, 0x0A	; 10
    25b0:	26 9f       	mul	r18, r22
    25b2:	11 24       	eor	r1, r1
    25b4:	30 19       	sub	r19, r0
    25b6:	30 5d       	subi	r19, 0xD0	; 208
    25b8:	31 93       	st	Z+, r19
    25ba:	de f6       	brtc	.-74     	; 0x2572 <__ultoa_invert+0xe>
    25bc:	cf 01       	movw	r24, r30
    25be:	08 95       	ret
    25c0:	46 2f       	mov	r20, r22
    25c2:	47 70       	andi	r20, 0x07	; 7
    25c4:	40 5d       	subi	r20, 0xD0	; 208
    25c6:	41 93       	st	Z+, r20
    25c8:	b3 e0       	ldi	r27, 0x03	; 3
    25ca:	0f d0       	rcall	.+30     	; 0x25ea <__ultoa_invert+0x86>
    25cc:	c9 f7       	brne	.-14     	; 0x25c0 <__ultoa_invert+0x5c>
    25ce:	f6 cf       	rjmp	.-20     	; 0x25bc <__ultoa_invert+0x58>
    25d0:	46 2f       	mov	r20, r22
    25d2:	4f 70       	andi	r20, 0x0F	; 15
    25d4:	40 5d       	subi	r20, 0xD0	; 208
    25d6:	4a 33       	cpi	r20, 0x3A	; 58
    25d8:	18 f0       	brcs	.+6      	; 0x25e0 <__ultoa_invert+0x7c>
    25da:	49 5d       	subi	r20, 0xD9	; 217
    25dc:	31 fd       	sbrc	r19, 1
    25de:	40 52       	subi	r20, 0x20	; 32
    25e0:	41 93       	st	Z+, r20
    25e2:	02 d0       	rcall	.+4      	; 0x25e8 <__ultoa_invert+0x84>
    25e4:	a9 f7       	brne	.-22     	; 0x25d0 <__ultoa_invert+0x6c>
    25e6:	ea cf       	rjmp	.-44     	; 0x25bc <__ultoa_invert+0x58>
    25e8:	b4 e0       	ldi	r27, 0x04	; 4
    25ea:	a6 95       	lsr	r26
    25ec:	97 95       	ror	r25
    25ee:	87 95       	ror	r24
    25f0:	77 95       	ror	r23
    25f2:	67 95       	ror	r22
    25f4:	ba 95       	dec	r27
    25f6:	c9 f7       	brne	.-14     	; 0x25ea <__ultoa_invert+0x86>
    25f8:	00 97       	sbiw	r24, 0x00	; 0
    25fa:	61 05       	cpc	r22, r1
    25fc:	71 05       	cpc	r23, r1
    25fe:	08 95       	ret
    2600:	9b 01       	movw	r18, r22
    2602:	ac 01       	movw	r20, r24
    2604:	0a 2e       	mov	r0, r26
    2606:	06 94       	lsr	r0
    2608:	57 95       	ror	r21
    260a:	47 95       	ror	r20
    260c:	37 95       	ror	r19
    260e:	27 95       	ror	r18
    2610:	ba 95       	dec	r27
    2612:	c9 f7       	brne	.-14     	; 0x2606 <__ultoa_invert+0xa2>
    2614:	62 0f       	add	r22, r18
    2616:	73 1f       	adc	r23, r19
    2618:	84 1f       	adc	r24, r20
    261a:	95 1f       	adc	r25, r21
    261c:	a0 1d       	adc	r26, r0
    261e:	08 95       	ret

00002620 <__prologue_saves__>:
    2620:	2f 92       	push	r2
    2622:	3f 92       	push	r3
    2624:	4f 92       	push	r4
    2626:	5f 92       	push	r5
    2628:	6f 92       	push	r6
    262a:	7f 92       	push	r7
    262c:	8f 92       	push	r8
    262e:	9f 92       	push	r9
    2630:	af 92       	push	r10
    2632:	bf 92       	push	r11
    2634:	cf 92       	push	r12
    2636:	df 92       	push	r13
    2638:	ef 92       	push	r14
    263a:	ff 92       	push	r15
    263c:	0f 93       	push	r16
    263e:	1f 93       	push	r17
    2640:	cf 93       	push	r28
    2642:	df 93       	push	r29
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
    2648:	ca 1b       	sub	r28, r26
    264a:	db 0b       	sbc	r29, r27
    264c:	0f b6       	in	r0, 0x3f	; 63
    264e:	f8 94       	cli
    2650:	de bf       	out	0x3e, r29	; 62
    2652:	0f be       	out	0x3f, r0	; 63
    2654:	cd bf       	out	0x3d, r28	; 61
    2656:	09 94       	ijmp

00002658 <__epilogue_restores__>:
    2658:	2a 88       	ldd	r2, Y+18	; 0x12
    265a:	39 88       	ldd	r3, Y+17	; 0x11
    265c:	48 88       	ldd	r4, Y+16	; 0x10
    265e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2660:	6e 84       	ldd	r6, Y+14	; 0x0e
    2662:	7d 84       	ldd	r7, Y+13	; 0x0d
    2664:	8c 84       	ldd	r8, Y+12	; 0x0c
    2666:	9b 84       	ldd	r9, Y+11	; 0x0b
    2668:	aa 84       	ldd	r10, Y+10	; 0x0a
    266a:	b9 84       	ldd	r11, Y+9	; 0x09
    266c:	c8 84       	ldd	r12, Y+8	; 0x08
    266e:	df 80       	ldd	r13, Y+7	; 0x07
    2670:	ee 80       	ldd	r14, Y+6	; 0x06
    2672:	fd 80       	ldd	r15, Y+5	; 0x05
    2674:	0c 81       	ldd	r16, Y+4	; 0x04
    2676:	1b 81       	ldd	r17, Y+3	; 0x03
    2678:	aa 81       	ldd	r26, Y+2	; 0x02
    267a:	b9 81       	ldd	r27, Y+1	; 0x01
    267c:	ce 0f       	add	r28, r30
    267e:	d1 1d       	adc	r29, r1
    2680:	0f b6       	in	r0, 0x3f	; 63
    2682:	f8 94       	cli
    2684:	de bf       	out	0x3e, r29	; 62
    2686:	0f be       	out	0x3f, r0	; 63
    2688:	cd bf       	out	0x3d, r28	; 61
    268a:	ed 01       	movw	r28, r26
    268c:	08 95       	ret

0000268e <_exit>:
    268e:	f8 94       	cli

00002690 <__stop_program>:
    2690:	ff cf       	rjmp	.-2      	; 0x2690 <__stop_program>
