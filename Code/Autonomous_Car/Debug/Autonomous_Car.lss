
Autonomous_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002316  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00002316  000023aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  0080008c  0080008c  000023d6  2**0
                  ALLOC
  3 .stab         00002928  00000000  00000000  000023d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000839  00000000  00000000  00004d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000380  00000000  00000000  00005540  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003003  00000000  00000000  000058c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011ef  00000000  00000000  000088c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e2e  00000000  00000000  00009ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ca4  00000000  00000000  0000b8e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f7d  00000000  00000000  0000c584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020e3  00000000  00000000  0000d501  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000f5e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ab 04 	jmp	0x956	; 0x956 <__vector_1>
       8:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__vector_2>
       c:	0c 94 6a 09 	jmp	0x12d4	; 0x12d4 <__vector_3>
      10:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <__vector_4>
      14:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <__vector_10>
      2c:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__vector_13>
      38:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <__vector_14>
      3c:	0c 94 19 0c 	jmp	0x1832	; 0x1832 <__vector_15>
      40:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3b       	cpi	r26, 0xB5	; 181
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ba 00 	call	0x174	; 0x174 <main>
      8a:	0c 94 89 11 	jmp	0x2312	; 0x2312 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SwitchMode>:
}
*/

void SwitchMode(void)
{
	WATCHDOG_Enable(WatchDog_u8_5VCC_TIME_OUT_1_0SEC);
      92:	86 e0       	ldi	r24, 0x06	; 6
      94:	0e 94 42 0c 	call	0x1884	; 0x1884 <WATCHDOG_Enable>
      98:	08 95       	ret

0000009a <BlueToothMode_SuperLoop>:
	}
}


void BlueToothMode_SuperLoop()
{
      9a:	cf 93       	push	r28
      9c:	df 93       	push	r29
      9e:	0f 92       	push	r0
      a0:	cd b7       	in	r28, 0x3d	; 61
      a2:	de b7       	in	r29, 0x3e	; 62
	u8 BlueToothValue ;
	while(1)
	{
		BLUETOOTH_ReceiveChar(&BlueToothValue);
      a4:	ce 01       	movw	r24, r28
      a6:	01 96       	adiw	r24, 0x01	; 1
      a8:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <BLUETOOTH_ReceiveChar>
		switch(BlueToothValue)
      ac:	89 81       	ldd	r24, Y+1	; 0x01
      ae:	88 35       	cpi	r24, 0x58	; 88
      b0:	09 f4       	brne	.+2      	; 0xb4 <BlueToothMode_SuperLoop+0x1a>
      b2:	44 c0       	rjmp	.+136    	; 0x13c <BlueToothMode_SuperLoop+0xa2>
      b4:	89 35       	cpi	r24, 0x59	; 89
      b6:	68 f4       	brcc	.+26     	; 0xd2 <BlueToothMode_SuperLoop+0x38>
      b8:	85 35       	cpi	r24, 0x55	; 85
      ba:	d1 f0       	breq	.+52     	; 0xf0 <BlueToothMode_SuperLoop+0x56>
      bc:	86 35       	cpi	r24, 0x56	; 86
      be:	18 f4       	brcc	.+6      	; 0xc6 <BlueToothMode_SuperLoop+0x2c>
      c0:	83 34       	cpi	r24, 0x43	; 67
      c2:	81 f7       	brne	.-32     	; 0xa4 <BlueToothMode_SuperLoop+0xa>
      c4:	29 c0       	rjmp	.+82     	; 0x118 <BlueToothMode_SuperLoop+0x7e>
      c6:	86 35       	cpi	r24, 0x56	; 86
      c8:	09 f4       	brne	.+2      	; 0xcc <BlueToothMode_SuperLoop+0x32>
      ca:	4a c0       	rjmp	.+148    	; 0x160 <BlueToothMode_SuperLoop+0xc6>
      cc:	87 35       	cpi	r24, 0x57	; 87
      ce:	51 f7       	brne	.-44     	; 0xa4 <BlueToothMode_SuperLoop+0xa>
      d0:	19 c0       	rjmp	.+50     	; 0x104 <BlueToothMode_SuperLoop+0x6a>
      d2:	86 37       	cpi	r24, 0x76	; 118
      d4:	09 f4       	brne	.+2      	; 0xd8 <BlueToothMode_SuperLoop+0x3e>
      d6:	49 c0       	rjmp	.+146    	; 0x16a <BlueToothMode_SuperLoop+0xd0>
      d8:	87 37       	cpi	r24, 0x77	; 119
      da:	28 f4       	brcc	.+10     	; 0xe6 <BlueToothMode_SuperLoop+0x4c>
      dc:	83 36       	cpi	r24, 0x63	; 99
      de:	29 f1       	breq	.+74     	; 0x12a <BlueToothMode_SuperLoop+0x90>
      e0:	85 37       	cpi	r24, 0x75	; 117
      e2:	01 f7       	brne	.-64     	; 0xa4 <BlueToothMode_SuperLoop+0xa>
      e4:	0a c0       	rjmp	.+20     	; 0xfa <BlueToothMode_SuperLoop+0x60>
      e6:	87 37       	cpi	r24, 0x77	; 119
      e8:	91 f0       	breq	.+36     	; 0x10e <BlueToothMode_SuperLoop+0x74>
      ea:	88 37       	cpi	r24, 0x78	; 120
      ec:	d9 f6       	brne	.-74     	; 0xa4 <BlueToothMode_SuperLoop+0xa>
      ee:	2f c0       	rjmp	.+94     	; 0x14e <BlueToothMode_SuperLoop+0xb4>
			case '0' :
			//WHEEL_SpeedDOWN();
			break;
			
			case 'U' :         //BACK LIGHT ON
			LED_TurnON(LED_BACK_PORT,LED_BACK_PIN);
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	62 e0       	ldi	r22, 0x02	; 2
      f4:	0e 94 07 04 	call	0x80e	; 0x80e <LED_TurnON>
			break;
      f8:	d5 cf       	rjmp	.-86     	; 0xa4 <BlueToothMode_SuperLoop+0xa>
			
			case 'u' :         //BACK LIGHT OFF
			LED_TurnOFF(LED_BACK_PORT,LED_BACK_PIN);
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	62 e0       	ldi	r22, 0x02	; 2
      fe:	0e 94 0f 04 	call	0x81e	; 0x81e <LED_TurnOFF>
			break;
     102:	d0 cf       	rjmp	.-96     	; 0xa4 <BlueToothMode_SuperLoop+0xa>
			
			case 'W' :         //Flash  ON
			LED_TurnON(LED_FLASH_PORT,LED_FLASH_PIN);
     104:	80 e0       	ldi	r24, 0x00	; 0
     106:	61 e0       	ldi	r22, 0x01	; 1
     108:	0e 94 07 04 	call	0x80e	; 0x80e <LED_TurnON>
			break;
     10c:	cb cf       	rjmp	.-106    	; 0xa4 <BlueToothMode_SuperLoop+0xa>
			
			case 'w' :         //Flash  OFF
			LED_TurnOFF(LED_FLASH_PORT,LED_FLASH_PIN);
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	61 e0       	ldi	r22, 0x01	; 1
     112:	0e 94 0f 04 	call	0x81e	; 0x81e <LED_TurnOFF>
			break;
     116:	c6 cf       	rjmp	.-116    	; 0xa4 <BlueToothMode_SuperLoop+0xa>
			
			case 'C' :         //FR  ON
			LED_TurnON(LED_FORWARD_RIGHT_PORT,LED2_FORWARD_RIGHT_PIN);
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	64 e0       	ldi	r22, 0x04	; 4
     11c:	0e 94 07 04 	call	0x80e	; 0x80e <LED_TurnON>
			LED_TurnOFF(LED_FORWARD_LEFT_PORT,LED2_FORWARD_LEFT_PIN);
     120:	80 e0       	ldi	r24, 0x00	; 0
     122:	63 e0       	ldi	r22, 0x03	; 3
     124:	0e 94 0f 04 	call	0x81e	; 0x81e <LED_TurnOFF>
			break;
     128:	bd cf       	rjmp	.-134    	; 0xa4 <BlueToothMode_SuperLoop+0xa>
			
			case 'c' :         //FR  OFF
			LED_TurnOFF(LED_FORWARD_RIGHT_PORT,LED2_FORWARD_RIGHT_PIN);
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	64 e0       	ldi	r22, 0x04	; 4
     12e:	0e 94 0f 04 	call	0x81e	; 0x81e <LED_TurnOFF>
			LED_TurnOFF(LED_FORWARD_LEFT_PORT,LED2_FORWARD_LEFT_PIN);
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	63 e0       	ldi	r22, 0x03	; 3
     136:	0e 94 0f 04 	call	0x81e	; 0x81e <LED_TurnOFF>
			break;
     13a:	b4 cf       	rjmp	.-152    	; 0xa4 <BlueToothMode_SuperLoop+0xa>
			
			case 'X' :         //FL  ON
			LED_TurnOFF(LED_FORWARD_RIGHT_PORT,LED2_FORWARD_RIGHT_PIN);
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	64 e0       	ldi	r22, 0x04	; 4
     140:	0e 94 0f 04 	call	0x81e	; 0x81e <LED_TurnOFF>
			LED_TurnON(LED_FORWARD_LEFT_PORT,LED2_FORWARD_LEFT_PIN);
     144:	80 e0       	ldi	r24, 0x00	; 0
     146:	63 e0       	ldi	r22, 0x03	; 3
     148:	0e 94 07 04 	call	0x80e	; 0x80e <LED_TurnON>
			break;
     14c:	ab cf       	rjmp	.-170    	; 0xa4 <BlueToothMode_SuperLoop+0xa>
			
			case 'x' :         //FL  OFF
			LED_TurnOFF(LED_FORWARD_RIGHT_PORT,LED2_FORWARD_RIGHT_PIN);
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	64 e0       	ldi	r22, 0x04	; 4
     152:	0e 94 0f 04 	call	0x81e	; 0x81e <LED_TurnOFF>
			LED_TurnOFF(LED_FORWARD_LEFT_PORT,LED2_FORWARD_LEFT_PIN);
     156:	80 e0       	ldi	r24, 0x00	; 0
     158:	63 e0       	ldi	r22, 0x03	; 3
     15a:	0e 94 0f 04 	call	0x81e	; 0x81e <LED_TurnOFF>
			break;
     15e:	a2 cf       	rjmp	.-188    	; 0xa4 <BlueToothMode_SuperLoop+0xa>
			
			
			case 'V' :         //Horn  ON
			BUZZER_TurnOn(BUZZER_PORT,BUZZER_PIN);
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	65 e0       	ldi	r22, 0x05	; 5
     164:	0e 94 8f 01 	call	0x31e	; 0x31e <BUZZER_TurnOn>
			break;
     168:	9d cf       	rjmp	.-198    	; 0xa4 <BlueToothMode_SuperLoop+0xa>
			
			case 'v' :         //Horn  OFF
			BUZZER_TurnOff(BUZZER_PORT,BUZZER_PIN);
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	65 e0       	ldi	r22, 0x05	; 5
     16e:	0e 94 97 01 	call	0x32e	; 0x32e <BUZZER_TurnOff>
			break;
     172:	98 cf       	rjmp	.-208    	; 0xa4 <BlueToothMode_SuperLoop+0xa>

00000174 <main>:
#define BLUETOOTH_MODE  1



int main(void)
{
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
     178:	00 d0       	rcall	.+0      	; 0x17a <main+0x6>
     17a:	0f 92       	push	r0
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
	u8 ModeValue ;
	u16 LdrValue;
	
	WATCHDOG_Disable();
     180:	0e 94 49 0c 	call	0x1892	; 0x1892 <WATCHDOG_Disable>
	
	GLBI_Enable();
     184:	0e 94 93 09 	call	0x1326	; 0x1326 <GLBI_Enable>
	
	EXTI_Enable(EXTI_INT0,EXTI_ANY_LOGICAL_CHANGE);         //For Ultrasonic
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	63 e0       	ldi	r22, 0x03	; 3
     18c:	0e 94 b1 08 	call	0x1162	; 0x1162 <EXTI_Enable>
	EXTI_Enable(EXTI_INT1,EXTI_ANY_LOGICAL_CHANGE);         // for Change Mode
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	63 e0       	ldi	r22, 0x03	; 3
     194:	0e 94 b1 08 	call	0x1162	; 0x1162 <EXTI_Enable>
	EXTI_SetCallBackInt1(&SwitchMode);
     198:	89 e4       	ldi	r24, 0x49	; 73
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	0e 94 33 09 	call	0x1266	; 0x1266 <EXTI_SetCallBackInt1>
	
	BUTTON_init(BUTTON_MODE_PORT,BUTTON_MODE_PIN);
     1a0:	83 e0       	ldi	r24, 0x03	; 3
     1a2:	63 e0       	ldi	r22, 0x03	; 3
     1a4:	0e 94 71 01 	call	0x2e2	; 0x2e2 <BUTTON_init>
	BUTTON_ReadValue(BUTTON_MODE_PORT,BUTTON_MODE_PIN,&ModeValue,BUTTON_PullDown);
     1a8:	83 e0       	ldi	r24, 0x03	; 3
     1aa:	63 e0       	ldi	r22, 0x03	; 3
     1ac:	ae 01       	movw	r20, r28
     1ae:	4f 5f       	subi	r20, 0xFF	; 255
     1b0:	5f 4f       	sbci	r21, 0xFF	; 255
     1b2:	20 e0       	ldi	r18, 0x00	; 0
     1b4:	0e 94 80 01 	call	0x300	; 0x300 <BUTTON_ReadValue>
	
	LCD_init();
     1b8:	0e 94 1c 02 	call	0x438	; 0x438 <LCD_init>
	LDR_init(LDR_PORT,LDR_PIN);
     1bc:	80 e0       	ldi	r24, 0x00	; 0
     1be:	60 e0       	ldi	r22, 0x00	; 0
     1c0:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LDR_init>
	
	LED_init(LED_BACK_PORT,LED_BACK_PIN);
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	62 e0       	ldi	r22, 0x02	; 2
     1c8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <LED_init>
	LED_init(LED_FORWARD_RIGHT_PORT,LED2_FORWARD_RIGHT_PIN);
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	64 e0       	ldi	r22, 0x04	; 4
     1d0:	0e 94 ff 03 	call	0x7fe	; 0x7fe <LED_init>
	LED_init(LED_FORWARD_LEFT_PORT,LED2_FORWARD_LEFT_PIN);
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	63 e0       	ldi	r22, 0x03	; 3
     1d8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <LED_init>
	LED_init(LED_FLASH_PORT,LED_FLASH_PIN);
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	61 e0       	ldi	r22, 0x01	; 1
     1e0:	0e 94 ff 03 	call	0x7fe	; 0x7fe <LED_init>
	BUZZER_init(BUZZER_PORT,BUZZER_PIN);
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	65 e0       	ldi	r22, 0x05	; 5
     1e8:	0e 94 87 01 	call	0x30e	; 0x30e <BUZZER_init>
	
	LED_TurnOFF(LED_FORWARD_RIGHT_PORT,LED2_FORWARD_RIGHT_PIN);
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	64 e0       	ldi	r22, 0x04	; 4
     1f0:	0e 94 0f 04 	call	0x81e	; 0x81e <LED_TurnOFF>
	LED_TurnOFF(LED_FORWARD_LEFT_PORT,LED2_FORWARD_LEFT_PIN);
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	63 e0       	ldi	r22, 0x03	; 3
     1f8:	0e 94 0f 04 	call	0x81e	; 0x81e <LED_TurnOFF>
	LED_TurnOFF(LED_BACK_PORT,LED_BACK_PIN);
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	62 e0       	ldi	r22, 0x02	; 2
     200:	0e 94 0f 04 	call	0x81e	; 0x81e <LED_TurnOFF>
	LED_TurnOFF(LED_FLASH_PORT,LED_FLASH_PIN);
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	61 e0       	ldi	r22, 0x01	; 1
     208:	0e 94 0f 04 	call	0x81e	; 0x81e <LED_TurnOFF>
	BUZZER_TurnOff(BUZZER_PORT,BUZZER_PIN);
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	65 e0       	ldi	r22, 0x05	; 5
     210:	0e 94 97 01 	call	0x32e	; 0x32e <BUZZER_TurnOff>
	
	LDR_ReadValue(ADC_CHANNEL_0,&LdrValue);
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	be 01       	movw	r22, r28
     218:	6e 5f       	subi	r22, 0xFE	; 254
     21a:	7f 4f       	sbci	r23, 0xFF	; 255
     21c:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <LDR_ReadValue>
	LCD_GoToLocation(1,1);
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	61 e0       	ldi	r22, 0x01	; 1
     224:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LCD_GoToLocation>
	LCD_SendIntegarNumber(LdrValue);
     228:	8a 81       	ldd	r24, Y+2	; 0x02
     22a:	9b 81       	ldd	r25, Y+3	; 0x03
     22c:	0e 94 81 03 	call	0x702	; 0x702 <LCD_SendIntegarNumber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     230:	8f ef       	ldi	r24, 0xFF	; 255
     232:	9d e3       	ldi	r25, 0x3D	; 61
     234:	a9 e4       	ldi	r26, 0x49	; 73
     236:	81 50       	subi	r24, 0x01	; 1
     238:	90 40       	sbci	r25, 0x00	; 0
     23a:	a0 40       	sbci	r26, 0x00	; 0
     23c:	e1 f7       	brne	.-8      	; 0x236 <main+0xc2>
     23e:	00 c0       	rjmp	.+0      	; 0x240 <main+0xcc>
     240:	00 00       	nop
	_delay_ms(1500);
	if (LdrValue>=500)
     242:	8a 81       	ldd	r24, Y+2	; 0x02
     244:	9b 81       	ldd	r25, Y+3	; 0x03
     246:	a1 e0       	ldi	r26, 0x01	; 1
     248:	84 3f       	cpi	r24, 0xF4	; 244
     24a:	9a 07       	cpc	r25, r26
     24c:	28 f0       	brcs	.+10     	; 0x258 <main+0xe4>
	{
		LED_TurnON(LED_FLASH_PORT,LED_FLASH_PIN);
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	61 e0       	ldi	r22, 0x01	; 1
     252:	0e 94 07 04 	call	0x80e	; 0x80e <LED_TurnON>
     256:	04 c0       	rjmp	.+8      	; 0x260 <main+0xec>
	}
	else
	{
		LED_TurnOFF(LED_FLASH_PORT,LED_FLASH_PIN);
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	61 e0       	ldi	r22, 0x01	; 1
     25c:	0e 94 0f 04 	call	0x81e	; 0x81e <LED_TurnOFF>
	}
	
	if (ULTRASONIC_MODE == ModeValue)
     260:	89 81       	ldd	r24, Y+1	; 0x01
     262:	88 23       	and	r24, r24
     264:	e9 f4       	brne	.+58     	; 0x2a0 <main+0x12c>
	{
		LCD_GoToLocation(1,2);
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	62 e0       	ldi	r22, 0x02	; 2
     26a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LCD_GoToLocation>
		LCD_SendString("Ultrasonic ON");
     26e:	80 e6       	ldi	r24, 0x60	; 96
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_SendString>
     276:	8f ef       	ldi	r24, 0xFF	; 255
     278:	97 ea       	ldi	r25, 0xA7	; 167
     27a:	a1 e6       	ldi	r26, 0x61	; 97
     27c:	81 50       	subi	r24, 0x01	; 1
     27e:	90 40       	sbci	r25, 0x00	; 0
     280:	a0 40       	sbci	r26, 0x00	; 0
     282:	e1 f7       	brne	.-8      	; 0x27c <main+0x108>
     284:	00 c0       	rjmp	.+0      	; 0x286 <main+0x112>
     286:	00 00       	nop
		_delay_ms(2000);
		
		SERVO_init();
     288:	0e 94 1e 04 	call	0x83c	; 0x83c <SERVO_init>
		ULTRA_init();
     28c:	0e 94 66 04 	call	0x8cc	; 0x8cc <ULTRA_init>
		
		BLUETOOTH_init();
		
		BlueToothMode_SuperLoop();
	}
}
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	0f 90       	pop	r0
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	08 95       	ret
		ULTRA_init();
		//UltraSonicMode_SuperLoop()
	} 
	else
	{
		LCD_GoToLocation(1,2);
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	62 e0       	ldi	r22, 0x02	; 2
     2a4:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LCD_GoToLocation>
		LCD_SendString("BlueTooth ON");
     2a8:	8e e6       	ldi	r24, 0x6E	; 110
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_SendString>
     2b0:	8f ef       	ldi	r24, 0xFF	; 255
     2b2:	97 ea       	ldi	r25, 0xA7	; 167
     2b4:	a1 e6       	ldi	r26, 0x61	; 97
     2b6:	81 50       	subi	r24, 0x01	; 1
     2b8:	90 40       	sbci	r25, 0x00	; 0
     2ba:	a0 40       	sbci	r26, 0x00	; 0
     2bc:	e1 f7       	brne	.-8      	; 0x2b6 <main+0x142>
     2be:	00 c0       	rjmp	.+0      	; 0x2c0 <main+0x14c>
     2c0:	00 00       	nop
		_delay_ms(2000);
		
		BLUETOOTH_init();
     2c2:	0e 94 65 01 	call	0x2ca	; 0x2ca <BLUETOOTH_init>
		
		BlueToothMode_SuperLoop();
     2c6:	0e 94 4d 00 	call	0x9a	; 0x9a <BlueToothMode_SuperLoop>

000002ca <BLUETOOTH_init>:
#include "../include/BLUETOOTH_private.h"


void BLUETOOTH_init(void)
{
	UART_init();
     2ca:	0e 94 88 0b 	call	0x1710	; 0x1710 <UART_init>
}
     2ce:	08 95       	ret

000002d0 <BLUETOOTH_TransimitChar>:

void BLUETOOTH_TransimitChar(u8 TransimitData)
{
	UART_TransmiteChar(TransimitData);
     2d0:	0e 94 9d 0b 	call	0x173a	; 0x173a <UART_TransmiteChar>
}
     2d4:	08 95       	ret

000002d6 <BLUETOOTH_ReceiveChar>:

void BLUETOOTH_ReceiveChar(u8* ReceiveData)
{
	UART_ReceiveChar(ReceiveData);
     2d6:	0e 94 95 0b 	call	0x172a	; 0x172a <UART_ReceiveChar>
}
     2da:	08 95       	ret

000002dc <BLUETOOTH_TransimitString>:

void BLUETOOTH_TransimitString (u8* TransimitData)
{
	UART_TransmiteString(TransimitData);
     2dc:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_TransmiteString>
     2e0:	08 95       	ret

000002e2 <BUTTON_init>:
#include "../include/BUTTON_private.h"


void BUTTON_init(u8 ButtonPort ,u8 ButtonPin)
{
	if (ButtonPort <=3 && ButtonPin<=7)
     2e2:	84 30       	cpi	r24, 0x04	; 4
     2e4:	28 f4       	brcc	.+10     	; 0x2f0 <BUTTON_init+0xe>
     2e6:	68 30       	cpi	r22, 0x08	; 8
     2e8:	18 f4       	brcc	.+6      	; 0x2f0 <BUTTON_init+0xe>
	{
		DIO_SetPinDirection(ButtonPort,ButtonPin,DIO_PIN_INPUT);
     2ea:	40 e0       	ldi	r20, 0x00	; 0
     2ec:	0e 94 d1 05 	call	0xba2	; 0xba2 <DIO_SetPinDirection>
     2f0:	08 95       	ret

000002f2 <BUTTON_ActivePullUp>:
	}
}

void BUTTON_ActivePullUp(u8 ButtonPort ,u8 ButtonPin)
{
	if (ButtonPort <=3 && ButtonPin<=7)
     2f2:	84 30       	cpi	r24, 0x04	; 4
     2f4:	20 f4       	brcc	.+8      	; 0x2fe <BUTTON_ActivePullUp+0xc>
     2f6:	68 30       	cpi	r22, 0x08	; 8
     2f8:	10 f4       	brcc	.+4      	; 0x2fe <BUTTON_ActivePullUp+0xc>
	{
		DIO_activePinInPullUpResistance(ButtonPort,ButtonPin);
     2fa:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_activePinInPullUpResistance>
     2fe:	08 95       	ret

00000300 <BUTTON_ReadValue>:
	}
}

void BUTTON_ReadValue(u8 ButtonPort ,u8 ButtonPin,u8* PinValue,u8 BUTTON_STATUE)
{
	if (ButtonPort <=3 && ButtonPin<=7)
     300:	84 30       	cpi	r24, 0x04	; 4
     302:	20 f4       	brcc	.+8      	; 0x30c <BUTTON_ReadValue+0xc>
     304:	68 30       	cpi	r22, 0x08	; 8
     306:	10 f4       	brcc	.+4      	; 0x30c <BUTTON_ReadValue+0xc>
	{
		DIO_ReadValue(ButtonPort,ButtonPin,PinValue);
     308:	0e 94 4b 07 	call	0xe96	; 0xe96 <DIO_ReadValue>
     30c:	08 95       	ret

0000030e <BUZZER_init>:
#include "../include/BUZZER_interface.h"
#include "../include/BUZZER_private.h"

void BUZZER_init(u8 BuzzerPort ,u8 BuzzerPin )
{
	if(BuzzerPort<=3 && BuzzerPin<=7)
     30e:	84 30       	cpi	r24, 0x04	; 4
     310:	28 f4       	brcc	.+10     	; 0x31c <BUZZER_init+0xe>
     312:	68 30       	cpi	r22, 0x08	; 8
     314:	18 f4       	brcc	.+6      	; 0x31c <BUZZER_init+0xe>
	{
		DIO_SetPinDirection(BuzzerPort,BuzzerPin,DIO_PIN_OUTPUT);
     316:	41 e0       	ldi	r20, 0x01	; 1
     318:	0e 94 d1 05 	call	0xba2	; 0xba2 <DIO_SetPinDirection>
     31c:	08 95       	ret

0000031e <BUZZER_TurnOn>:
}


void BUZZER_TurnOn(u8 BuzzerPort ,u8 BuzzerPin )
{
	if(BuzzerPort<=3 && BuzzerPin<=7)
     31e:	84 30       	cpi	r24, 0x04	; 4
     320:	28 f4       	brcc	.+10     	; 0x32c <BUZZER_TurnOn+0xe>
     322:	68 30       	cpi	r22, 0x08	; 8
     324:	18 f4       	brcc	.+6      	; 0x32c <BUZZER_TurnOn+0xe>
	{
		DIO_SetPinValue(BuzzerPort,BuzzerPin,DIO_PIN_HIGH);
     326:	41 e0       	ldi	r20, 0x01	; 1
     328:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
     32c:	08 95       	ret

0000032e <BUZZER_TurnOff>:
	}
}

void BUZZER_TurnOff(u8 BuzzerPort ,u8 BuzzerPin )
{
	if(BuzzerPort<=3 && BuzzerPin<=7)
     32e:	84 30       	cpi	r24, 0x04	; 4
     330:	28 f4       	brcc	.+10     	; 0x33c <BUZZER_TurnOff+0xe>
     332:	68 30       	cpi	r22, 0x08	; 8
     334:	18 f4       	brcc	.+6      	; 0x33c <BUZZER_TurnOff+0xe>
	{
		DIO_SetPinValue(BuzzerPort,BuzzerPin,DIO_PIN_LOW);
     336:	40 e0       	ldi	r20, 0x00	; 0
     338:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
     33c:	08 95       	ret

0000033e <BUZZER_Toggle>:
	}
}	

void BUZZER_Toggle(u8 BuzzerPort ,u8 BuzzerPin )
{
	if(BuzzerPort<=3 && BuzzerPin<=7)
     33e:	84 30       	cpi	r24, 0x04	; 4
     340:	20 f4       	brcc	.+8      	; 0x34a <BUZZER_Toggle+0xc>
     342:	68 30       	cpi	r22, 0x08	; 8
     344:	10 f4       	brcc	.+4      	; 0x34a <BUZZER_Toggle+0xc>
	{
		DIO_TogglePinValue(BuzzerPort,BuzzerPin);
     346:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DIO_TogglePinValue>
     34a:	08 95       	ret

0000034c <private_WriteHalfPort>:
{
	LCD_sendComnd(ShiftCmnd);
}

void private_WriteHalfPort (u8 Value)
{
     34c:	cf 93       	push	r28
     34e:	c8 2f       	mov	r28, r24
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit0)) ? (DIO_SetPinValue(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_HIGH));
     350:	80 fd       	sbrc	r24, 0
     352:	06 c0       	rjmp	.+12     	; 0x360 <private_WriteHalfPort+0x14>
     354:	82 e0       	ldi	r24, 0x02	; 2
     356:	64 e0       	ldi	r22, 0x04	; 4
     358:	40 e0       	ldi	r20, 0x00	; 0
     35a:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
     35e:	05 c0       	rjmp	.+10     	; 0x36a <private_WriteHalfPort+0x1e>
     360:	82 e0       	ldi	r24, 0x02	; 2
     362:	64 e0       	ldi	r22, 0x04	; 4
     364:	41 e0       	ldi	r20, 0x01	; 1
     366:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit1)) ? (DIO_SetPinValue(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_HIGH));
     36a:	8c 2f       	mov	r24, r28
     36c:	86 95       	lsr	r24
     36e:	80 fd       	sbrc	r24, 0
     370:	06 c0       	rjmp	.+12     	; 0x37e <private_WriteHalfPort+0x32>
     372:	82 e0       	ldi	r24, 0x02	; 2
     374:	65 e0       	ldi	r22, 0x05	; 5
     376:	40 e0       	ldi	r20, 0x00	; 0
     378:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
     37c:	05 c0       	rjmp	.+10     	; 0x388 <private_WriteHalfPort+0x3c>
     37e:	82 e0       	ldi	r24, 0x02	; 2
     380:	65 e0       	ldi	r22, 0x05	; 5
     382:	41 e0       	ldi	r20, 0x01	; 1
     384:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit2)) ? (DIO_SetPinValue(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_HIGH));
     388:	8c 2f       	mov	r24, r28
     38a:	86 95       	lsr	r24
     38c:	86 95       	lsr	r24
     38e:	80 fd       	sbrc	r24, 0
     390:	06 c0       	rjmp	.+12     	; 0x39e <private_WriteHalfPort+0x52>
     392:	82 e0       	ldi	r24, 0x02	; 2
     394:	66 e0       	ldi	r22, 0x06	; 6
     396:	40 e0       	ldi	r20, 0x00	; 0
     398:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
     39c:	05 c0       	rjmp	.+10     	; 0x3a8 <private_WriteHalfPort+0x5c>
     39e:	82 e0       	ldi	r24, 0x02	; 2
     3a0:	66 e0       	ldi	r22, 0x06	; 6
     3a2:	41 e0       	ldi	r20, 0x01	; 1
     3a4:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit3)) ? (DIO_SetPinValue(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_HIGH));
     3a8:	c6 95       	lsr	r28
     3aa:	c6 95       	lsr	r28
     3ac:	c6 95       	lsr	r28
     3ae:	c0 fd       	sbrc	r28, 0
     3b0:	06 c0       	rjmp	.+12     	; 0x3be <private_WriteHalfPort+0x72>
     3b2:	82 e0       	ldi	r24, 0x02	; 2
     3b4:	67 e0       	ldi	r22, 0x07	; 7
     3b6:	40 e0       	ldi	r20, 0x00	; 0
     3b8:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
     3bc:	05 c0       	rjmp	.+10     	; 0x3c8 <private_WriteHalfPort+0x7c>
     3be:	82 e0       	ldi	r24, 0x02	; 2
     3c0:	67 e0       	ldi	r22, 0x07	; 7
     3c2:	41 e0       	ldi	r20, 0x01	; 1
     3c4:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
}
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <LCD_sendComnd>:
	
	#endif
}

void LCD_sendComnd(u8 Cmnd)
{
     3cc:	cf 93       	push	r28
     3ce:	c8 2f       	mov	r28, r24
	#if   LCD_MODE == LCD_FourBitMode
	
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	61 e0       	ldi	r22, 0x01	; 1
     3d4:	40 e0       	ldi	r20, 0x00	; 0
     3d6:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	62 e0       	ldi	r22, 0x02	; 2
     3de:	40 e0       	ldi	r20, 0x00	; 0
     3e0:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
	
	private_WriteHalfPort(Cmnd>>4);                                    //PORTA_REG= (PORTA_REG & 0x0f) | (Cmnd & 0xf0)
     3e4:	8c 2f       	mov	r24, r28
     3e6:	82 95       	swap	r24
     3e8:	8f 70       	andi	r24, 0x0F	; 15
     3ea:	0e 94 a6 01 	call	0x34c	; 0x34c <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	63 e0       	ldi	r22, 0x03	; 3
     3f2:	41 e0       	ldi	r20, 0x01	; 1
     3f4:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
     3f8:	8f e9       	ldi	r24, 0x9F	; 159
     3fa:	9f e0       	ldi	r25, 0x0F	; 15
     3fc:	01 97       	sbiw	r24, 0x01	; 1
     3fe:	f1 f7       	brne	.-4      	; 0x3fc <LCD_sendComnd+0x30>
     400:	00 c0       	rjmp	.+0      	; 0x402 <LCD_sendComnd+0x36>
     402:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	63 e0       	ldi	r22, 0x03	; 3
     408:	40 e0       	ldi	r20, 0x00	; 0
     40a:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
	
	private_WriteHalfPort(Cmnd);                                      //PORTA_REG= (PORTA_REG & 0x0f) | ((Cmnd & 0xf0) <<4)
     40e:	8c 2f       	mov	r24, r28
     410:	0e 94 a6 01 	call	0x34c	; 0x34c <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	63 e0       	ldi	r22, 0x03	; 3
     418:	41 e0       	ldi	r20, 0x01	; 1
     41a:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
     41e:	8f e9       	ldi	r24, 0x9F	; 159
     420:	9f e0       	ldi	r25, 0x0F	; 15
     422:	01 97       	sbiw	r24, 0x01	; 1
     424:	f1 f7       	brne	.-4      	; 0x422 <LCD_sendComnd+0x56>
     426:	00 c0       	rjmp	.+0      	; 0x428 <LCD_sendComnd+0x5c>
     428:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	63 e0       	ldi	r22, 0x03	; 3
     42e:	40 e0       	ldi	r20, 0x00	; 0
     430:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#endif
	
}
     434:	cf 91       	pop	r28
     436:	08 95       	ret

00000438 <LCD_init>:

void LCD_init(void)
{
	#if   LCD_MODE == LCD_FourBitMode 
	//SET PIN AS OUTPUT
	DIO_SetPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_OUTPUT);
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	61 e0       	ldi	r22, 0x01	; 1
     43c:	41 e0       	ldi	r20, 0x01	; 1
     43e:	0e 94 d1 05 	call	0xba2	; 0xba2 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_OUTPUT);
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	62 e0       	ldi	r22, 0x02	; 2
     446:	41 e0       	ldi	r20, 0x01	; 1
     448:	0e 94 d1 05 	call	0xba2	; 0xba2 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_OUTPUT);
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	63 e0       	ldi	r22, 0x03	; 3
     450:	41 e0       	ldi	r20, 0x01	; 1
     452:	0e 94 d1 05 	call	0xba2	; 0xba2 <DIO_SetPinDirection>
	
	
	DIO_SetPinDirection(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_OUTPUT);
     456:	82 e0       	ldi	r24, 0x02	; 2
     458:	64 e0       	ldi	r22, 0x04	; 4
     45a:	41 e0       	ldi	r20, 0x01	; 1
     45c:	0e 94 d1 05 	call	0xba2	; 0xba2 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_OUTPUT);
     460:	82 e0       	ldi	r24, 0x02	; 2
     462:	65 e0       	ldi	r22, 0x05	; 5
     464:	41 e0       	ldi	r20, 0x01	; 1
     466:	0e 94 d1 05 	call	0xba2	; 0xba2 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_OUTPUT);
     46a:	82 e0       	ldi	r24, 0x02	; 2
     46c:	66 e0       	ldi	r22, 0x06	; 6
     46e:	41 e0       	ldi	r20, 0x01	; 1
     470:	0e 94 d1 05 	call	0xba2	; 0xba2 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_OUTPUT);
     474:	82 e0       	ldi	r24, 0x02	; 2
     476:	67 e0       	ldi	r22, 0x07	; 7
     478:	41 e0       	ldi	r20, 0x01	; 1
     47a:	0e 94 d1 05 	call	0xba2	; 0xba2 <DIO_SetPinDirection>
     47e:	8f e7       	ldi	r24, 0x7F	; 127
     480:	95 eb       	ldi	r25, 0xB5	; 181
     482:	a1 e0       	ldi	r26, 0x01	; 1
     484:	81 50       	subi	r24, 0x01	; 1
     486:	90 40       	sbci	r25, 0x00	; 0
     488:	a0 40       	sbci	r26, 0x00	; 0
     48a:	e1 f7       	brne	.-8      	; 0x484 <LCD_init+0x4c>
     48c:	00 c0       	rjmp	.+0      	; 0x48e <LCD_init+0x56>
     48e:	00 00       	nop
	
	
	_delay_ms(35);
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	61 e0       	ldi	r22, 0x01	; 1
     494:	40 e0       	ldi	r20, 0x00	; 0
     496:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	62 e0       	ldi	r22, 0x02	; 2
     49e:	40 e0       	ldi	r20, 0x00	; 0
     4a0:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
	private_WriteHalfPort(LCD_COMMAND_FOR_FOUR_BIT_MODE);
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	0e 94 a6 01 	call	0x34c	; 0x34c <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	63 e0       	ldi	r22, 0x03	; 3
     4ae:	41 e0       	ldi	r20, 0x01	; 1
     4b0:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
     4b4:	af e9       	ldi	r26, 0x9F	; 159
     4b6:	bf e0       	ldi	r27, 0x0F	; 15
     4b8:	11 97       	sbiw	r26, 0x01	; 1
     4ba:	f1 f7       	brne	.-4      	; 0x4b8 <LCD_init+0x80>
     4bc:	00 c0       	rjmp	.+0      	; 0x4be <LCD_init+0x86>
     4be:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	63 e0       	ldi	r22, 0x03	; 3
     4c4:	40 e0       	ldi	r20, 0x00	; 0
     4c6:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
	
	LCD_sendComnd(LCD_FUNCTION_SET);
     4ca:	88 e2       	ldi	r24, 0x28	; 40
     4cc:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4d0:	b0 ef       	ldi	r27, 0xF0	; 240
     4d2:	ba 95       	dec	r27
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <LCD_init+0x9a>
	_delay_us(45);
	
	LCD_sendComnd(LCD_DISPLAY_ON_OFF_CONTROL);
     4d6:	8c e0       	ldi	r24, 0x0C	; 12
     4d8:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LCD_sendComnd>
     4dc:	80 ef       	ldi	r24, 0xF0	; 240
     4de:	8a 95       	dec	r24
     4e0:	f1 f7       	brne	.-4      	; 0x4de <LCD_init+0xa6>
	_delay_us(45);
	
	LCD_sendComnd(LCD_DESPLAY_CLEAR);
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4e8:	af e3       	ldi	r26, 0x3F	; 63
     4ea:	bf e1       	ldi	r27, 0x1F	; 31
     4ec:	11 97       	sbiw	r26, 0x01	; 1
     4ee:	f1 f7       	brne	.-4      	; 0x4ec <LCD_init+0xb4>
     4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <LCD_init+0xba>
     4f2:	00 00       	nop
	_delay_ms(2);
	
	LCD_sendComnd(LCD_ENTRY_MODE_SET);
     4f4:	86 e0       	ldi	r24, 0x06	; 6
     4f6:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4fa:	b0 ef       	ldi	r27, 0xF0	; 240
     4fc:	ba 95       	dec	r27
     4fe:	f1 f7       	brne	.-4      	; 0x4fc <LCD_init+0xc4>
	
	LCD_sendComnd(LCD_ENTRY_MODE_SET);
	_delay_us(45);
	
	#endif
}
     500:	08 95       	ret

00000502 <LCD_sendChar>:
	
}


void LCD_sendChar(u8 Character_Data)
{
     502:	cf 93       	push	r28
     504:	c8 2f       	mov	r28, r24
	#if   LCD_MODE == LCD_FourBitMode
	
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	61 e0       	ldi	r22, 0x01	; 1
     50a:	41 e0       	ldi	r20, 0x01	; 1
     50c:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	62 e0       	ldi	r22, 0x02	; 2
     514:	40 e0       	ldi	r20, 0x00	; 0
     516:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
	
	private_WriteHalfPort(Character_Data>>4);                        //PORTA_REG= (PORTA_REG & 0x0f) | (Character_Data & 0xf0)
     51a:	8c 2f       	mov	r24, r28
     51c:	82 95       	swap	r24
     51e:	8f 70       	andi	r24, 0x0F	; 15
     520:	0e 94 a6 01 	call	0x34c	; 0x34c <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	63 e0       	ldi	r22, 0x03	; 3
     528:	41 e0       	ldi	r20, 0x01	; 1
     52a:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     52e:	8f e9       	ldi	r24, 0x9F	; 159
     530:	9f e0       	ldi	r25, 0x0F	; 15
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <LCD_sendChar+0x30>
     536:	00 c0       	rjmp	.+0      	; 0x538 <LCD_sendChar+0x36>
     538:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	63 e0       	ldi	r22, 0x03	; 3
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
	
	private_WriteHalfPort(Character_Data);                         //PORTA_REG= (PORTA_REG & 0x0f) | ((Character_Data & 0xf0) <<4)
     544:	8c 2f       	mov	r24, r28
     546:	0e 94 a6 01 	call	0x34c	; 0x34c <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	63 e0       	ldi	r22, 0x03	; 3
     54e:	41 e0       	ldi	r20, 0x01	; 1
     550:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
     554:	8f e9       	ldi	r24, 0x9F	; 159
     556:	9f e0       	ldi	r25, 0x0F	; 15
     558:	01 97       	sbiw	r24, 0x01	; 1
     55a:	f1 f7       	brne	.-4      	; 0x558 <LCD_sendChar+0x56>
     55c:	00 c0       	rjmp	.+0      	; 0x55e <LCD_sendChar+0x5c>
     55e:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	63 e0       	ldi	r22, 0x03	; 3
     564:	40 e0       	ldi	r20, 0x00	; 0
     566:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#endif
}
     56a:	cf 91       	pop	r28
     56c:	08 95       	ret

0000056e <LCD_SendString>:

void LCD_SendString (u8 *String_Data)
{
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	ec 01       	movw	r28, r24
	while((*String_Data)!='\0')
     574:	88 81       	ld	r24, Y
     576:	88 23       	and	r24, r24
     578:	31 f0       	breq	.+12     	; 0x586 <LCD_SendString+0x18>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#endif
}

void LCD_SendString (u8 *String_Data)
     57a:	21 96       	adiw	r28, 0x01	; 1
{
	while((*String_Data)!='\0')
	{
		LCD_sendChar(*String_Data);
     57c:	0e 94 81 02 	call	0x502	; 0x502 <LCD_sendChar>
	#endif
}

void LCD_SendString (u8 *String_Data)
{
	while((*String_Data)!='\0')
     580:	89 91       	ld	r24, Y+
     582:	88 23       	and	r24, r24
     584:	d9 f7       	brne	.-10     	; 0x57c <LCD_SendString+0xe>
	{
		LCD_sendChar(*String_Data);
		String_Data++;
	}
}
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	08 95       	ret

0000058c <LCD_SendRealNumber>:

void LCD_SendRealNumber(f64 Number)
{
     58c:	8f 92       	push	r8
     58e:	9f 92       	push	r9
     590:	af 92       	push	r10
     592:	bf 92       	push	r11
     594:	cf 92       	push	r12
     596:	df 92       	push	r13
     598:	ef 92       	push	r14
     59a:	ff 92       	push	r15
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
     5a8:	60 97       	sbiw	r28, 0x10	; 16
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	f8 94       	cli
     5ae:	de bf       	out	0x3e, r29	; 62
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	cd bf       	out	0x3d, r28	; 61
     5b4:	6b 01       	movw	r12, r22
     5b6:	7c 01       	movw	r14, r24
	u8 str [16];
	u8 *tmpsign = (Number < 0)? "-" : "";
     5b8:	20 e0       	ldi	r18, 0x00	; 0
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	a9 01       	movw	r20, r18
     5be:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__cmpsf2>
     5c2:	88 23       	and	r24, r24
     5c4:	5c f4       	brge	.+22     	; 0x5dc <LCD_SendRealNumber+0x50>
	f32 tmpval = (Number < 0)? -Number : Number;
     5c6:	f7 fa       	bst	r15, 7
     5c8:	f0 94       	com	r15
     5ca:	f7 f8       	bld	r15, 7
     5cc:	f0 94       	com	r15
}

void LCD_SendRealNumber(f64 Number)
{
	u8 str [16];
	u8 *tmpsign = (Number < 0)? "-" : "";
     5ce:	0f 2e       	mov	r0, r31
     5d0:	fb e7       	ldi	r31, 0x7B	; 123
     5d2:	8f 2e       	mov	r8, r31
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	9f 2e       	mov	r9, r31
     5d8:	f0 2d       	mov	r31, r0
     5da:	06 c0       	rjmp	.+12     	; 0x5e8 <LCD_SendRealNumber+0x5c>
     5dc:	0f 2e       	mov	r0, r31
     5de:	fd e7       	ldi	r31, 0x7D	; 125
     5e0:	8f 2e       	mov	r8, r31
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	9f 2e       	mov	r9, r31
     5e6:	f0 2d       	mov	r31, r0
	f32 tmpval = (Number < 0)? -Number : Number;
	u16 tmpint1 = (u16)tmpval;
     5e8:	c7 01       	movw	r24, r14
     5ea:	b6 01       	movw	r22, r12
     5ec:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__fixunssfsi>
     5f0:	dc 01       	movw	r26, r24
     5f2:	cb 01       	movw	r24, r22
	f32 tmpfrac = tmpval - (float)tmpint1;
	u16 tmpint2 = tmpfrac * 10000;
	sprintf(str,"%s%d.%04d", tmpsign, tmpint1, tmpint2);
     5f4:	2d b7       	in	r18, 0x3d	; 61
     5f6:	3e b7       	in	r19, 0x3e	; 62
     5f8:	2a 50       	subi	r18, 0x0A	; 10
     5fa:	30 40       	sbci	r19, 0x00	; 0
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	3e bf       	out	0x3e, r19	; 62
     602:	0f be       	out	0x3f, r0	; 63
     604:	2d bf       	out	0x3d, r18	; 61
     606:	0d b7       	in	r16, 0x3d	; 61
     608:	1e b7       	in	r17, 0x3e	; 62
     60a:	0f 5f       	subi	r16, 0xFF	; 255
     60c:	1f 4f       	sbci	r17, 0xFF	; 255
     60e:	5e 01       	movw	r10, r28
     610:	08 94       	sec
     612:	a1 1c       	adc	r10, r1
     614:	b1 1c       	adc	r11, r1
     616:	ed b7       	in	r30, 0x3d	; 61
     618:	fe b7       	in	r31, 0x3e	; 62
     61a:	b2 82       	std	Z+2, r11	; 0x02
     61c:	a1 82       	std	Z+1, r10	; 0x01
     61e:	2e e7       	ldi	r18, 0x7E	; 126
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	f8 01       	movw	r30, r16
     624:	33 83       	std	Z+3, r19	; 0x03
     626:	22 83       	std	Z+2, r18	; 0x02
     628:	95 82       	std	Z+5, r9	; 0x05
     62a:	84 82       	std	Z+4, r8	; 0x04
     62c:	97 83       	std	Z+7, r25	; 0x07
     62e:	86 83       	std	Z+6, r24	; 0x06
{
	u8 str [16];
	u8 *tmpsign = (Number < 0)? "-" : "";
	f32 tmpval = (Number < 0)? -Number : Number;
	u16 tmpint1 = (u16)tmpval;
	f32 tmpfrac = tmpval - (float)tmpint1;
     630:	bc 01       	movw	r22, r24
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__floatunsisf>
     63a:	9b 01       	movw	r18, r22
     63c:	ac 01       	movw	r20, r24
     63e:	c7 01       	movw	r24, r14
     640:	b6 01       	movw	r22, r12
     642:	0e 94 4e 0c 	call	0x189c	; 0x189c <__subsf3>
	u16 tmpint2 = tmpfrac * 10000;
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e4       	ldi	r19, 0x40	; 64
     64a:	4c e1       	ldi	r20, 0x1C	; 28
     64c:	56 e4       	ldi	r21, 0x46	; 70
     64e:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__mulsf3>
     652:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__fixunssfsi>
     656:	dc 01       	movw	r26, r24
     658:	cb 01       	movw	r24, r22
	sprintf(str,"%s%d.%04d", tmpsign, tmpint1, tmpint2);
     65a:	f8 01       	movw	r30, r16
     65c:	91 87       	std	Z+9, r25	; 0x09
     65e:	80 87       	std	Z+8, r24	; 0x08
     660:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <sprintf>
	LCD_SendString(str);
     664:	2d b7       	in	r18, 0x3d	; 61
     666:	3e b7       	in	r19, 0x3e	; 62
     668:	26 5f       	subi	r18, 0xF6	; 246
     66a:	3f 4f       	sbci	r19, 0xFF	; 255
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	3e bf       	out	0x3e, r19	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	2d bf       	out	0x3d, r18	; 61
     676:	c5 01       	movw	r24, r10
     678:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_SendString>
}
     67c:	60 96       	adiw	r28, 0x10	; 16
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	f8 94       	cli
     682:	de bf       	out	0x3e, r29	; 62
     684:	0f be       	out	0x3f, r0	; 63
     686:	cd bf       	out	0x3d, r28	; 61
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	1f 91       	pop	r17
     68e:	0f 91       	pop	r16
     690:	ff 90       	pop	r15
     692:	ef 90       	pop	r14
     694:	df 90       	pop	r13
     696:	cf 90       	pop	r12
     698:	bf 90       	pop	r11
     69a:	af 90       	pop	r10
     69c:	9f 90       	pop	r9
     69e:	8f 90       	pop	r8
     6a0:	08 95       	ret

000006a2 <LCD_ClearDesplay>:

void LCD_ClearDesplay()
{
	LCD_sendComnd (LCD_DESPLAY_CLEAR);
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LCD_sendComnd>
     6a8:	8f e3       	ldi	r24, 0x3F	; 63
     6aa:	9f e1       	ldi	r25, 0x1F	; 31
     6ac:	01 97       	sbiw	r24, 0x01	; 1
     6ae:	f1 f7       	brne	.-4      	; 0x6ac <LCD_ClearDesplay+0xa>
     6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <LCD_ClearDesplay+0x10>
     6b2:	00 00       	nop
	_delay_ms(2);
	LCD_sendComnd (LCD_Cursor_At_Home_position);	
     6b4:	80 e8       	ldi	r24, 0x80	; 128
     6b6:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LCD_sendComnd>
}
     6ba:	08 95       	ret

000006bc <LCD_GoToLocation>:

void LCD_GoToLocation(u8 X_Location, u8 LineNumber)
{
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	00 d0       	rcall	.+0      	; 0x6c2 <LCD_GoToLocation+0x6>
     6c2:	00 d0       	rcall	.+0      	; 0x6c4 <LCD_GoToLocation+0x8>
     6c4:	cd b7       	in	r28, 0x3d	; 61
     6c6:	de b7       	in	r29, 0x3e	; 62
	u8 FirstLocation[] = {0x80, 0xC0, 0x94, 0xD4};
     6c8:	90 e8       	ldi	r25, 0x80	; 128
     6ca:	99 83       	std	Y+1, r25	; 0x01
     6cc:	90 ec       	ldi	r25, 0xC0	; 192
     6ce:	9a 83       	std	Y+2, r25	; 0x02
     6d0:	94 e9       	ldi	r25, 0x94	; 148
     6d2:	9b 83       	std	Y+3, r25	; 0x03
     6d4:	94 ed       	ldi	r25, 0xD4	; 212
     6d6:	9c 83       	std	Y+4, r25	; 0x04
	LCD_sendComnd(FirstLocation[LineNumber-1] + X_Location-1);
     6d8:	81 50       	subi	r24, 0x01	; 1
     6da:	fe 01       	movw	r30, r28
     6dc:	e6 0f       	add	r30, r22
     6de:	f1 1d       	adc	r31, r1
     6e0:	90 81       	ld	r25, Z
     6e2:	89 0f       	add	r24, r25
     6e4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6e8:	8f e9       	ldi	r24, 0x9F	; 159
     6ea:	9f e0       	ldi	r25, 0x0F	; 15
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <LCD_GoToLocation+0x30>
     6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <LCD_GoToLocation+0x36>
     6f2:	00 00       	nop
	_delay_us(1000);
}
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	08 95       	ret

00000702 <LCD_SendIntegarNumber>:

void LCD_SendIntegarNumber(u16 IntegerNumber)
{
     702:	0f 93       	push	r16
     704:	1f 93       	push	r17
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
     70e:	a0 97       	sbiw	r28, 0x20	; 32
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	f8 94       	cli
     714:	de bf       	out	0x3e, r29	; 62
     716:	0f be       	out	0x3f, r0	; 63
     718:	cd bf       	out	0x3d, r28	; 61
	u16 NumberString[16];
	snprintf(NumberString,17,"%d",IntegerNumber);
     71a:	2d b7       	in	r18, 0x3d	; 61
     71c:	3e b7       	in	r19, 0x3e	; 62
     71e:	28 50       	subi	r18, 0x08	; 8
     720:	30 40       	sbci	r19, 0x00	; 0
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	3e bf       	out	0x3e, r19	; 62
     728:	0f be       	out	0x3f, r0	; 63
     72a:	2d bf       	out	0x3d, r18	; 61
     72c:	ed b7       	in	r30, 0x3d	; 61
     72e:	fe b7       	in	r31, 0x3e	; 62
     730:	31 96       	adiw	r30, 0x01	; 1
     732:	8e 01       	movw	r16, r28
     734:	0f 5f       	subi	r16, 0xFF	; 255
     736:	1f 4f       	sbci	r17, 0xFF	; 255
     738:	ad b7       	in	r26, 0x3d	; 61
     73a:	be b7       	in	r27, 0x3e	; 62
     73c:	12 96       	adiw	r26, 0x02	; 2
     73e:	1c 93       	st	X, r17
     740:	0e 93       	st	-X, r16
     742:	11 97       	sbiw	r26, 0x01	; 1
     744:	21 e1       	ldi	r18, 0x11	; 17
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	33 83       	std	Z+3, r19	; 0x03
     74a:	22 83       	std	Z+2, r18	; 0x02
     74c:	28 e8       	ldi	r18, 0x88	; 136
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	35 83       	std	Z+5, r19	; 0x05
     752:	24 83       	std	Z+4, r18	; 0x04
     754:	97 83       	std	Z+7, r25	; 0x07
     756:	86 83       	std	Z+6, r24	; 0x06
     758:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <snprintf>
	LCD_SendString(NumberString);
     75c:	2d b7       	in	r18, 0x3d	; 61
     75e:	3e b7       	in	r19, 0x3e	; 62
     760:	28 5f       	subi	r18, 0xF8	; 248
     762:	3f 4f       	sbci	r19, 0xFF	; 255
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	f8 94       	cli
     768:	3e bf       	out	0x3e, r19	; 62
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	2d bf       	out	0x3d, r18	; 61
     76e:	c8 01       	movw	r24, r16
     770:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_SendString>
}
     774:	a0 96       	adiw	r28, 0x20	; 32
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	f8 94       	cli
     77a:	de bf       	out	0x3e, r29	; 62
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	cd bf       	out	0x3d, r28	; 61
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	1f 91       	pop	r17
     786:	0f 91       	pop	r16
     788:	08 95       	ret

0000078a <LCD_SendNumberToLocation>:


void LCD_SendNumberToLocation(u16 Number,u8 X_Location, u8 LineNumber)
{
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	ec 01       	movw	r28, r24
     790:	86 2f       	mov	r24, r22
	LCD_GoToLocation(X_Location,LineNumber);
     792:	64 2f       	mov	r22, r20
     794:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LCD_GoToLocation>
	LCD_SendIntegarNumber(Number);
     798:	ce 01       	movw	r24, r28
     79a:	0e 94 81 03 	call	0x702	; 0x702 <LCD_SendIntegarNumber>
}
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	08 95       	ret

000007a4 <LCD_Shift>:


void LCD_Shift(u8 ShiftCmnd)
{
	LCD_sendComnd(ShiftCmnd);
     7a4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LCD_sendComnd>
}
     7a8:	08 95       	ret

000007aa <LDR_init>:
#include "../include/LDR_interface.h"
#include "../include/LDR_private.h"

void LDR_init(u8 PortId ,u8 PinId)
{
	if (PortId<=3 && PinId <=7  )
     7aa:	84 30       	cpi	r24, 0x04	; 4
     7ac:	48 f4       	brcc	.+18     	; 0x7c0 <LDR_init+0x16>
     7ae:	68 30       	cpi	r22, 0x08	; 8
     7b0:	38 f4       	brcc	.+14     	; 0x7c0 <LDR_init+0x16>
	{
		DIO_SetPinDirection(PortId,PinId,DIO_PIN_INPUT);
     7b2:	40 e0       	ldi	r20, 0x00	; 0
     7b4:	0e 94 d1 05 	call	0xba2	; 0xba2 <DIO_SetPinDirection>
		ADC_init(ADC_REFERENCE_AVCC,ADC_Prescaller_128);
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	60 e8       	ldi	r22, 0x80	; 128
     7bc:	0e 94 09 05 	call	0xa12	; 0xa12 <ADC_init>
     7c0:	08 95       	ret

000007c2 <LDR_ReadValue>:
		//No Thing
	}
}

void LDR_ReadValue(u8 ChannalId,u16 *AnalogLdrValue)
{
     7c2:	0f 93       	push	r16
     7c4:	1f 93       	push	r17
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	00 d0       	rcall	.+0      	; 0x7cc <LDR_ReadValue+0xa>
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
     7d0:	8b 01       	movw	r16, r22
	u16 DigitalLdrValue ;
	if (AnalogLdrValue != NULL && ChannalId<=7)
     7d2:	61 15       	cp	r22, r1
     7d4:	71 05       	cpc	r23, r1
     7d6:	61 f0       	breq	.+24     	; 0x7f0 <LDR_ReadValue+0x2e>
     7d8:	88 30       	cpi	r24, 0x08	; 8
     7da:	50 f4       	brcc	.+20     	; 0x7f0 <LDR_ReadValue+0x2e>
	{
		ADC_ReadDigitalValue(ChannalId,&DigitalLdrValue);
     7dc:	be 01       	movw	r22, r28
     7de:	6f 5f       	subi	r22, 0xFF	; 255
     7e0:	7f 4f       	sbci	r23, 0xFF	; 255
     7e2:	0e 94 4e 05 	call	0xa9c	; 0xa9c <ADC_ReadDigitalValue>
		*AnalogLdrValue=DigitalLdrValue;
     7e6:	89 81       	ldd	r24, Y+1	; 0x01
     7e8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ea:	f8 01       	movw	r30, r16
     7ec:	91 83       	std	Z+1, r25	; 0x01
     7ee:	80 83       	st	Z, r24
	}
	else
	{
		//No Thing
	}
     7f0:	0f 90       	pop	r0
     7f2:	0f 90       	pop	r0
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	08 95       	ret

000007fe <LED_init>:
#include "../include/LED_config.h"


void LED_init(u8 LedPort,u8 LedPin)
{
	if (LedPort <=3 && LedPin<=7)
     7fe:	84 30       	cpi	r24, 0x04	; 4
     800:	28 f4       	brcc	.+10     	; 0x80c <LED_init+0xe>
     802:	68 30       	cpi	r22, 0x08	; 8
     804:	18 f4       	brcc	.+6      	; 0x80c <LED_init+0xe>
	{
		DIO_SetPinDirection(LedPort,LedPin,DIO_PIN_OUTPUT);
     806:	41 e0       	ldi	r20, 0x01	; 1
     808:	0e 94 d1 05 	call	0xba2	; 0xba2 <DIO_SetPinDirection>
     80c:	08 95       	ret

0000080e <LED_TurnON>:
}


void LED_TurnON(u8 LedPort,u8 LedPin)
{
	if (LedPort <=3 && LedPin<=7)
     80e:	84 30       	cpi	r24, 0x04	; 4
     810:	28 f4       	brcc	.+10     	; 0x81c <LED_TurnON+0xe>
     812:	68 30       	cpi	r22, 0x08	; 8
     814:	18 f4       	brcc	.+6      	; 0x81c <LED_TurnON+0xe>
	{
		DIO_SetPinValue(LedPort,LedPin,DIO_PIN_HIGH);
     816:	41 e0       	ldi	r20, 0x01	; 1
     818:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
     81c:	08 95       	ret

0000081e <LED_TurnOFF>:
}


void LED_TurnOFF(u8 LedPort,u8 LedPin)
{
	if (LedPort <=3 && LedPin<=7)
     81e:	84 30       	cpi	r24, 0x04	; 4
     820:	28 f4       	brcc	.+10     	; 0x82c <LED_TurnOFF+0xe>
     822:	68 30       	cpi	r22, 0x08	; 8
     824:	18 f4       	brcc	.+6      	; 0x82c <LED_TurnOFF+0xe>
	{
		DIO_SetPinValue(LedPort,LedPin,DIO_PIN_LOW);
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
     82c:	08 95       	ret

0000082e <LED_Toggle>:
}


void LED_Toggle(u8 LedPort,u8 LedPin)
{
	 if (LedPort <=3 && LedPin<=7)
     82e:	84 30       	cpi	r24, 0x04	; 4
     830:	20 f4       	brcc	.+8      	; 0x83a <LED_Toggle+0xc>
     832:	68 30       	cpi	r22, 0x08	; 8
     834:	10 f4       	brcc	.+4      	; 0x83a <LED_Toggle+0xc>
	 {
		DIO_TogglePinValue(LedPort,LedPin);
     836:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DIO_TogglePinValue>
     83a:	08 95       	ret

0000083c <SERVO_init>:

#include "../include/SERVO_interface.h"

void SERVO_init(void)
{
	TMR1_init();
     83c:	0e 94 34 0a 	call	0x1468	; 0x1468 <TMR1_init>
	DIO_SetPinDirection(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT);
     840:	83 e0       	ldi	r24, 0x03	; 3
     842:	65 e0       	ldi	r22, 0x05	; 5
     844:	41 e0       	ldi	r20, 0x01	; 1
     846:	0e 94 d1 05 	call	0xba2	; 0xba2 <DIO_SetPinDirection>
	//DIO_setPinDirection(SERVO_ENABLE_PORT, SERVO_ENABLE_PIN, DIO_PIN_INPUT);
	//DIO_setPinValue(SERVO_ENABLE_PORT, SERVO_ENABLE_PIN, DIO_PIN_HIGH);
	TMR1_start();
     84a:	0e 94 4f 0a 	call	0x149e	; 0x149e <TMR1_start>
}
     84e:	08 95       	ret

00000850 <SERVO_Left>:


void SERVO_Left(void)
{
	
	TMR1_setFastPWM_usingMode14(2,50);
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e4       	ldi	r25, 0x40	; 64
     858:	42 e3       	ldi	r20, 0x32	; 50
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	0e 94 66 0a 	call	0x14cc	; 0x14cc <TMR1_setFastPWM_usingMode14>
}
     860:	08 95       	ret

00000862 <SERVO_Right>:

void SERVO_Right(void)
{	
	TMR1_setFastPWM_usingMode14(12,50);
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	80 e4       	ldi	r24, 0x40	; 64
     868:	91 e4       	ldi	r25, 0x41	; 65
     86a:	42 e3       	ldi	r20, 0x32	; 50
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	0e 94 66 0a 	call	0x14cc	; 0x14cc <TMR1_setFastPWM_usingMode14>
}
     872:	08 95       	ret

00000874 <SERVO_Forward>:

void SERVO_Forward(void)
{
	TMR1_setFastPWM_usingMode14(7,50);
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	80 ee       	ldi	r24, 0xE0	; 224
     87a:	90 e4       	ldi	r25, 0x40	; 64
     87c:	42 e3       	ldi	r20, 0x32	; 50
     87e:	50 e0       	ldi	r21, 0x00	; 0
     880:	0e 94 66 0a 	call	0x14cc	; 0x14cc <TMR1_setFastPWM_usingMode14>
}
     884:	08 95       	ret

00000886 <SERVO_AnyAngle>:

void SERVO_AnyAngle(u8 AngleinDegrees)
{
	if(AngleinDegrees <= 180 && AngleinDegrees >= 0)
     886:	85 3b       	cpi	r24, 0xB5	; 181
     888:	b0 f4       	brcc	.+44     	; 0x8b6 <SERVO_AnyAngle+0x30>
	{
		f32 Duty = ( (f32)AngleinDegrees/18.0 ) + 2.0;
     88a:	68 2f       	mov	r22, r24
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__floatunsisf>
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	40 e9       	ldi	r20, 0x90	; 144
     89c:	51 e4       	ldi	r21, 0x41	; 65
     89e:	0e 94 b7 0c 	call	0x196e	; 0x196e <__divsf3>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e4       	ldi	r21, 0x40	; 64
     8aa:	0e 94 4f 0c 	call	0x189e	; 0x189e <__addsf3>
		TMR1_setFastPWM_usingMode14(Duty,50);
     8ae:	42 e3       	ldi	r20, 0x32	; 50
     8b0:	50 e0       	ldi	r21, 0x00	; 0
     8b2:	0e 94 66 0a 	call	0x14cc	; 0x14cc <TMR1_setFastPWM_usingMode14>
     8b6:	08 95       	ret

000008b8 <TAKE_NUM_OVF>:
		 }
 }
 
 void TAKE_NUM_OVF(void)
 {
	 NOVF++;
     8b8:	80 91 8c 00 	lds	r24, 0x008C
     8bc:	90 91 8d 00 	lds	r25, 0x008D
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	90 93 8d 00 	sts	0x008D, r25
     8c6:	80 93 8c 00 	sts	0x008C, r24
     8ca:	08 95       	ret

000008cc <ULTRA_init>:
volatile flag=0;
u16 NOVF=0;

void ULTRA_init()
{
			DIO_SetPinDirection   (DIO_PORTD, DIO_PIN2, DIO_PIN_INPUT);    //E
     8cc:	83 e0       	ldi	r24, 0x03	; 3
     8ce:	62 e0       	ldi	r22, 0x02	; 2
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	0e 94 d1 05 	call	0xba2	; 0xba2 <DIO_SetPinDirection>
			DIO_SetPinDirection  (DIO_PORTB, DIO_PIN6, DIO_PIN_OUTPUT);  // T
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	66 e0       	ldi	r22, 0x06	; 6
     8da:	41 e0       	ldi	r20, 0x01	; 1
     8dc:	0e 94 d1 05 	call	0xba2	; 0xba2 <DIO_SetPinDirection>
			LCD_init();
     8e0:	0e 94 1c 02 	call	0x438	; 0x438 <LCD_init>
			GLBI_Enable();
     8e4:	0e 94 93 09 	call	0x1326	; 0x1326 <GLBI_Enable>
			TM0_init();
     8e8:	0e 94 97 09 	call	0x132e	; 0x132e <TM0_init>
			EXTI_Enable(EXTI_INT0,EXTI_ANY_LOGICAL_CHANGE);
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	63 e0       	ldi	r22, 0x03	; 3
     8f0:	0e 94 b1 08 	call	0x1162	; 0x1162 <EXTI_Enable>
			TM0_setCALLbACK(&TAKE_NUM_OVF);
     8f4:	8c e5       	ldi	r24, 0x5C	; 92
     8f6:	94 e0       	ldi	r25, 0x04	; 4
     8f8:	0e 94 bf 09 	call	0x137e	; 0x137e <TM0_setCALLbACK>
	
	
}
     8fc:	08 95       	ret

000008fe <ULTRA_Getdistance>:

void ULTRA_Getdistance(f32 *distance)
{
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	ec 01       	movw	r28, r24
	if(flag==0)
     904:	80 91 8e 00 	lds	r24, 0x008E
     908:	90 91 8f 00 	lds	r25, 0x008F
     90c:	00 97       	sbiw	r24, 0x00	; 0
     90e:	a1 f4       	brne	.+40     	; 0x938 <ULTRA_Getdistance+0x3a>
	{
	   DIO_SetPinValue(DIO_PORTB, DIO_PIN6, DIO_PIN_HIGH);
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	66 e0       	ldi	r22, 0x06	; 6
     914:	41 e0       	ldi	r20, 0x01	; 1
     916:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
     91a:	85 e3       	ldi	r24, 0x35	; 53
     91c:	8a 95       	dec	r24
     91e:	f1 f7       	brne	.-4      	; 0x91c <ULTRA_Getdistance+0x1e>
     920:	00 00       	nop
	   _delay_us(10);
	   DIO_SetPinValue(DIO_PORTB, DIO_PIN6, DIO_PIN_LOW);
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	66 e0       	ldi	r22, 0x06	; 6
     926:	40 e0       	ldi	r20, 0x00	; 0
     928:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_SetPinValue>
	    flag=1;
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	90 93 8f 00 	sts	0x008F, r25
     934:	80 93 8e 00 	sts	0x008E, r24
	}		
		
		*distance=count_distance;
     938:	80 91 91 00 	lds	r24, 0x0091
     93c:	90 91 92 00 	lds	r25, 0x0092
     940:	a0 91 93 00 	lds	r26, 0x0093
     944:	b0 91 94 00 	lds	r27, 0x0094
     948:	88 83       	st	Y, r24
     94a:	99 83       	std	Y+1, r25	; 0x01
     94c:	aa 83       	std	Y+2, r26	; 0x02
     94e:	bb 83       	std	Y+3, r27	; 0x03
}
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	08 95       	ret

00000956 <__vector_1>:

void  __vector_1(void) __attribute__((signal));
 void  __vector_1(void)
 {
     956:	1f 92       	push	r1
     958:	0f 92       	push	r0
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	0f 92       	push	r0
     95e:	11 24       	eor	r1, r1
     960:	2f 93       	push	r18
     962:	3f 93       	push	r19
     964:	4f 93       	push	r20
     966:	5f 93       	push	r21
     968:	6f 93       	push	r22
     96a:	7f 93       	push	r23
     96c:	8f 93       	push	r24
     96e:	9f 93       	push	r25
     970:	af 93       	push	r26
     972:	bf 93       	push	r27
     974:	ef 93       	push	r30
     976:	ff 93       	push	r31
		 i++;
     978:	80 91 90 00 	lds	r24, 0x0090
     97c:	8f 5f       	subi	r24, 0xFF	; 255
     97e:	80 93 90 00 	sts	0x0090, r24
		 if(i==1)
     982:	80 91 90 00 	lds	r24, 0x0090
     986:	81 30       	cpi	r24, 0x01	; 1
     988:	31 f4       	brne	.+12     	; 0x996 <__vector_1+0x40>
		 {
			  NOVF=0;
     98a:	10 92 8d 00 	sts	0x008D, r1
     98e:	10 92 8c 00 	sts	0x008C, r1
			  TM0_start();
     992:	0e 94 a2 09 	call	0x1344	; 0x1344 <TM0_start>
		 }
		 
		 if(i==2)
     996:	80 91 90 00 	lds	r24, 0x0090
     99a:	82 30       	cpi	r24, 0x02	; 2
     99c:	49 f5       	brne	.+82     	; 0x9f0 <__vector_1+0x9a>
		 {
			  TM0_stop();
     99e:	0e 94 ac 09 	call	0x1358	; 0x1358 <TM0_stop>
			 count_distance=(TCNT0+((NOVF)*(256)))*(0.0686);
     9a2:	82 b7       	in	r24, 0x32	; 50
     9a4:	70 91 8c 00 	lds	r23, 0x008C
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	68 0f       	add	r22, r24
     9ac:	71 1d       	adc	r23, r1
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__floatunsisf>
     9b6:	28 e2       	ldi	r18, 0x28	; 40
     9b8:	3e e7       	ldi	r19, 0x7E	; 126
     9ba:	4c e8       	ldi	r20, 0x8C	; 140
     9bc:	5d e3       	ldi	r21, 0x3D	; 61
     9be:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__mulsf3>
     9c2:	46 2f       	mov	r20, r22
     9c4:	57 2f       	mov	r21, r23
     9c6:	68 2f       	mov	r22, r24
     9c8:	79 2f       	mov	r23, r25
     9ca:	40 93 91 00 	sts	0x0091, r20
     9ce:	50 93 92 00 	sts	0x0092, r21
     9d2:	60 93 93 00 	sts	0x0093, r22
     9d6:	70 93 94 00 	sts	0x0094, r23
			 TCNT0=0;
     9da:	12 be       	out	0x32, r1	; 50
			 i=0;
     9dc:	10 92 90 00 	sts	0x0090, r1
			flag=0;
     9e0:	10 92 8f 00 	sts	0x008F, r1
     9e4:	10 92 8e 00 	sts	0x008E, r1
			NOVF=0;
     9e8:	10 92 8d 00 	sts	0x008D, r1
     9ec:	10 92 8c 00 	sts	0x008C, r1
		 }
 }
     9f0:	ff 91       	pop	r31
     9f2:	ef 91       	pop	r30
     9f4:	bf 91       	pop	r27
     9f6:	af 91       	pop	r26
     9f8:	9f 91       	pop	r25
     9fa:	8f 91       	pop	r24
     9fc:	7f 91       	pop	r23
     9fe:	6f 91       	pop	r22
     a00:	5f 91       	pop	r21
     a02:	4f 91       	pop	r20
     a04:	3f 91       	pop	r19
     a06:	2f 91       	pop	r18
     a08:	0f 90       	pop	r0
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	0f 90       	pop	r0
     a0e:	1f 90       	pop	r1
     a10:	18 95       	reti

00000a12 <ADC_init>:
static void (*PRIVATE_PtrCallBackADC) (void) = NULL;

void ADC_init(u8 RefrenceVolt,u8 ADC_Prescaller)
{
	/*	Select reference voltage	*/
	switch (RefrenceVolt)
     a12:	82 30       	cpi	r24, 0x02	; 2
     a14:	29 f0       	breq	.+10     	; 0xa20 <ADC_init+0xe>
     a16:	83 30       	cpi	r24, 0x03	; 3
     a18:	49 f0       	breq	.+18     	; 0xa2c <ADC_init+0x1a>
     a1a:	81 30       	cpi	r24, 0x01	; 1
     a1c:	49 f4       	brne	.+18     	; 0xa30 <ADC_init+0x1e>
     a1e:	03 c0       	rjmp	.+6      	; 0xa26 <ADC_init+0x14>
	{
		case ADC_REFERENCE_AREF:
		CLR_BIT(ADMUX,REFS0);
     a20:	3e 98       	cbi	0x07, 6	; 7
		CLR_BIT(ADMUX,REFS1);
     a22:	3f 98       	cbi	0x07, 7	; 7
		break;
     a24:	05 c0       	rjmp	.+10     	; 0xa30 <ADC_init+0x1e>
		
		case ADC_REFERENCE_AVCC:
		SET_BIT(ADMUX,REFS0);
     a26:	3e 9a       	sbi	0x07, 6	; 7
		CLR_BIT(ADMUX,REFS1);
     a28:	3f 98       	cbi	0x07, 7	; 7
		break;
     a2a:	02 c0       	rjmp	.+4      	; 0xa30 <ADC_init+0x1e>
		
		case ADC_REFERENCE_INTERNAL:
		SET_BIT(ADMUX,REFS0);
     a2c:	3e 9a       	sbi	0x07, 6	; 7
		SET_BIT(ADMUX,REFS1);
     a2e:	3f 9a       	sbi	0x07, 7	; 7
		break;
	}
	
	/*		ADCR	*/
	CLR_BIT(ADMUX,ADLAR);
     a30:	3d 98       	cbi	0x07, 5	; 7
	
	/*auto trigger mode (1) or single conversion mode (0) */
	CLR_BIT(ADCSRA,ADATE);
     a32:	35 98       	cbi	0x06, 5	; 6
	
	/*	Interrupt enable	*/
	CLR_BIT(ADCSRA,ADIE);
     a34:	33 98       	cbi	0x06, 3	; 6
	
	/*	Prescaller Select 128 for 16MHZ(125 KHZ)	*/
	
	if (ADC_Prescaller >= 2 && ADC_Prescaller <= 128 )
     a36:	86 2f       	mov	r24, r22
     a38:	82 50       	subi	r24, 0x02	; 2
     a3a:	8f 37       	cpi	r24, 0x7F	; 127
     a3c:	68 f5       	brcc	.+90     	; 0xa98 <ADC_init+0x86>
	{
		switch(ADC_Prescaller)
     a3e:	60 31       	cpi	r22, 0x10	; 16
     a40:	e1 f0       	breq	.+56     	; 0xa7a <ADC_init+0x68>
     a42:	61 31       	cpi	r22, 0x11	; 17
     a44:	38 f4       	brcc	.+14     	; 0xa54 <ADC_init+0x42>
     a46:	64 30       	cpi	r22, 0x04	; 4
     a48:	81 f0       	breq	.+32     	; 0xa6a <ADC_init+0x58>
     a4a:	68 30       	cpi	r22, 0x08	; 8
     a4c:	91 f0       	breq	.+36     	; 0xa72 <ADC_init+0x60>
     a4e:	62 30       	cpi	r22, 0x02	; 2
     a50:	19 f5       	brne	.+70     	; 0xa98 <ADC_init+0x86>
     a52:	07 c0       	rjmp	.+14     	; 0xa62 <ADC_init+0x50>
     a54:	60 34       	cpi	r22, 0x40	; 64
     a56:	c9 f0       	breq	.+50     	; 0xa8a <ADC_init+0x78>
     a58:	60 38       	cpi	r22, 0x80	; 128
     a5a:	d9 f0       	breq	.+54     	; 0xa92 <ADC_init+0x80>
     a5c:	60 32       	cpi	r22, 0x20	; 32
     a5e:	e1 f4       	brne	.+56     	; 0xa98 <ADC_init+0x86>
     a60:	10 c0       	rjmp	.+32     	; 0xa82 <ADC_init+0x70>
		{
			case ADC_Prescaller_2:
			CLR_BIT(ADCSRA,ADPS0);
     a62:	30 98       	cbi	0x06, 0	; 6
			CLR_BIT(ADCSRA,ADPS1);
     a64:	31 98       	cbi	0x06, 1	; 6
			CLR_BIT(ADCSRA,ADPS2);
     a66:	32 98       	cbi	0x06, 2	; 6
			break;
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <ADC_init+0x86>
			
			case ADC_Prescaller_4:
			CLR_BIT(ADCSRA,ADPS0);
     a6a:	30 98       	cbi	0x06, 0	; 6
			SET_BIT(ADCSRA,ADPS1);
     a6c:	31 9a       	sbi	0x06, 1	; 6
			CLR_BIT(ADCSRA,ADPS2);
     a6e:	32 98       	cbi	0x06, 2	; 6
			break;
     a70:	13 c0       	rjmp	.+38     	; 0xa98 <ADC_init+0x86>
			
			case ADC_Prescaller_8:
			SET_BIT(ADCSRA,ADPS0);
     a72:	30 9a       	sbi	0x06, 0	; 6
			SET_BIT(ADCSRA,ADPS1);
     a74:	31 9a       	sbi	0x06, 1	; 6
			CLR_BIT(ADCSRA,ADPS2);
     a76:	32 98       	cbi	0x06, 2	; 6
			break;
     a78:	0f c0       	rjmp	.+30     	; 0xa98 <ADC_init+0x86>
			
			case ADC_Prescaller_16:
			CLR_BIT(ADCSRA,ADPS0);
     a7a:	30 98       	cbi	0x06, 0	; 6
			CLR_BIT(ADCSRA,ADPS1);
     a7c:	31 98       	cbi	0x06, 1	; 6
			SET_BIT(ADCSRA,ADPS2);
     a7e:	32 9a       	sbi	0x06, 2	; 6
			break;
     a80:	0b c0       	rjmp	.+22     	; 0xa98 <ADC_init+0x86>
			
			case ADC_Prescaller_32:
			SET_BIT(ADCSRA,ADPS0);
     a82:	30 9a       	sbi	0x06, 0	; 6
			CLR_BIT(ADCSRA,ADPS1);
     a84:	31 98       	cbi	0x06, 1	; 6
			SET_BIT(ADCSRA,ADPS2);
     a86:	32 9a       	sbi	0x06, 2	; 6
			break;
     a88:	07 c0       	rjmp	.+14     	; 0xa98 <ADC_init+0x86>
			
			case ADC_Prescaller_64:
			CLR_BIT(ADCSRA,ADPS0);
     a8a:	30 98       	cbi	0x06, 0	; 6
			SET_BIT(ADCSRA,ADPS1);
     a8c:	31 9a       	sbi	0x06, 1	; 6
			SET_BIT(ADCSRA,ADPS2);
     a8e:	32 9a       	sbi	0x06, 2	; 6
			break;
     a90:	03 c0       	rjmp	.+6      	; 0xa98 <ADC_init+0x86>
			
			case ADC_Prescaller_128:
			SET_BIT(ADCSRA,ADPS0);
     a92:	30 9a       	sbi	0x06, 0	; 6
			SET_BIT(ADCSRA,ADPS1);
     a94:	31 9a       	sbi	0x06, 1	; 6
			SET_BIT(ADCSRA,ADPS2);
     a96:	32 9a       	sbi	0x06, 2	; 6
	{
		//No Thing 
	}
	
	/*Enable ADC */                          //best in last line in function
	SET_BIT(ADCSRA,ADEN);
     a98:	37 9a       	sbi	0x06, 7	; 6
}
     a9a:	08 95       	ret

00000a9c <ADC_ReadDigitalValue>:

void ADC_ReadDigitalValue(u8 ChannelId ,u16* DigitalValue)
{
	if( DigitalValue != NULL && ChannelId <32 )
     a9c:	61 15       	cp	r22, r1
     a9e:	71 05       	cpc	r23, r1
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <ADC_ReadDigitalValue+0x8>
     aa2:	4e c0       	rjmp	.+156    	; 0xb40 <ADC_ReadDigitalValue+0xa4>
     aa4:	80 32       	cpi	r24, 0x20	; 32
     aa6:	08 f0       	brcs	.+2      	; 0xaaa <ADC_ReadDigitalValue+0xe>
     aa8:	4b c0       	rjmp	.+150    	; 0xb40 <ADC_ReadDigitalValue+0xa4>
		/*	type without 32 switch case but take care about #define of channel id */
// 		ADMUX & = 0xE0;
// 		ADMUX | = ChannelId;


		switch (ChannelId)
     aaa:	83 30       	cpi	r24, 0x03	; 3
     aac:	11 f1       	breq	.+68     	; 0xaf2 <ADC_ReadDigitalValue+0x56>
     aae:	84 30       	cpi	r24, 0x04	; 4
     ab0:	28 f4       	brcc	.+10     	; 0xabc <ADC_ReadDigitalValue+0x20>
     ab2:	81 30       	cpi	r24, 0x01	; 1
     ab4:	91 f0       	breq	.+36     	; 0xada <ADC_ReadDigitalValue+0x3e>
     ab6:	82 30       	cpi	r24, 0x02	; 2
     ab8:	b0 f4       	brcc	.+44     	; 0xae6 <ADC_ReadDigitalValue+0x4a>
     aba:	09 c0       	rjmp	.+18     	; 0xace <ADC_ReadDigitalValue+0x32>
     abc:	85 30       	cpi	r24, 0x05	; 5
     abe:	29 f1       	breq	.+74     	; 0xb0a <ADC_ReadDigitalValue+0x6e>
     ac0:	85 30       	cpi	r24, 0x05	; 5
     ac2:	e8 f0       	brcs	.+58     	; 0xafe <ADC_ReadDigitalValue+0x62>
     ac4:	86 30       	cpi	r24, 0x06	; 6
     ac6:	39 f1       	breq	.+78     	; 0xb16 <ADC_ReadDigitalValue+0x7a>
     ac8:	87 30       	cpi	r24, 0x07	; 7
     aca:	81 f5       	brne	.+96     	; 0xb2c <ADC_ReadDigitalValue+0x90>
     acc:	2a c0       	rjmp	.+84     	; 0xb22 <ADC_ReadDigitalValue+0x86>
		{
			case ADC_CHANNEL_0:
			CLR_BIT(ADMUX,MUX0);
     ace:	38 98       	cbi	0x07, 0	; 7
			CLR_BIT(ADMUX,MUX1);
     ad0:	39 98       	cbi	0x07, 1	; 7
			CLR_BIT(ADMUX,MUX2);
     ad2:	3a 98       	cbi	0x07, 2	; 7
			CLR_BIT(ADMUX,MUX3);
     ad4:	3b 98       	cbi	0x07, 3	; 7
			CLR_BIT(ADMUX,MUX4);
     ad6:	3c 98       	cbi	0x07, 4	; 7
			break;
     ad8:	29 c0       	rjmp	.+82     	; 0xb2c <ADC_ReadDigitalValue+0x90>
			
			case ADC_CHANNEL_1:
			SET_BIT(ADMUX,MUX0);
     ada:	38 9a       	sbi	0x07, 0	; 7
			CLR_BIT(ADMUX,MUX1);
     adc:	39 98       	cbi	0x07, 1	; 7
			CLR_BIT(ADMUX,MUX2);
     ade:	3a 98       	cbi	0x07, 2	; 7
			CLR_BIT(ADMUX,MUX3);
     ae0:	3b 98       	cbi	0x07, 3	; 7
			CLR_BIT(ADMUX,MUX4);
     ae2:	3c 98       	cbi	0x07, 4	; 7
			break;
     ae4:	23 c0       	rjmp	.+70     	; 0xb2c <ADC_ReadDigitalValue+0x90>
			
			case ADC_CHANNEL_2:
			CLR_BIT(ADMUX,MUX0);
     ae6:	38 98       	cbi	0x07, 0	; 7
			SET_BIT(ADMUX,MUX1);
     ae8:	39 9a       	sbi	0x07, 1	; 7
			CLR_BIT(ADMUX,MUX2);
     aea:	3a 98       	cbi	0x07, 2	; 7
			CLR_BIT(ADMUX,MUX3);
     aec:	3b 98       	cbi	0x07, 3	; 7
			CLR_BIT(ADMUX,MUX4);
     aee:	3c 98       	cbi	0x07, 4	; 7
			break;
     af0:	1d c0       	rjmp	.+58     	; 0xb2c <ADC_ReadDigitalValue+0x90>
			
			case ADC_CHANNEL_3:
			SET_BIT(ADMUX,MUX0);
     af2:	38 9a       	sbi	0x07, 0	; 7
			SET_BIT(ADMUX,MUX1);
     af4:	39 9a       	sbi	0x07, 1	; 7
			CLR_BIT(ADMUX,MUX2);
     af6:	3a 98       	cbi	0x07, 2	; 7
			CLR_BIT(ADMUX,MUX3);
     af8:	3b 98       	cbi	0x07, 3	; 7
			CLR_BIT(ADMUX,MUX4);
     afa:	3c 98       	cbi	0x07, 4	; 7
			break;
     afc:	17 c0       	rjmp	.+46     	; 0xb2c <ADC_ReadDigitalValue+0x90>
			
			case ADC_CHANNEL_4:
			CLR_BIT(ADMUX,MUX0);
     afe:	38 98       	cbi	0x07, 0	; 7
			CLR_BIT(ADMUX,MUX1);
     b00:	39 98       	cbi	0x07, 1	; 7
			SET_BIT(ADMUX,MUX2);
     b02:	3a 9a       	sbi	0x07, 2	; 7
			CLR_BIT(ADMUX,MUX3);
     b04:	3b 98       	cbi	0x07, 3	; 7
			CLR_BIT(ADMUX,MUX4);
     b06:	3c 98       	cbi	0x07, 4	; 7
			break;
     b08:	11 c0       	rjmp	.+34     	; 0xb2c <ADC_ReadDigitalValue+0x90>
			
			case ADC_CHANNEL_5:
			SET_BIT(ADMUX,MUX0);
     b0a:	38 9a       	sbi	0x07, 0	; 7
			CLR_BIT(ADMUX,MUX1);
     b0c:	39 98       	cbi	0x07, 1	; 7
			SET_BIT(ADMUX,MUX2);
     b0e:	3a 9a       	sbi	0x07, 2	; 7
			CLR_BIT(ADMUX,MUX3);
     b10:	3b 98       	cbi	0x07, 3	; 7
			CLR_BIT(ADMUX,MUX4);
     b12:	3c 98       	cbi	0x07, 4	; 7
			break;
     b14:	0b c0       	rjmp	.+22     	; 0xb2c <ADC_ReadDigitalValue+0x90>
			
			case ADC_CHANNEL_6:
			CLR_BIT(ADMUX,MUX0);
     b16:	38 98       	cbi	0x07, 0	; 7
			SET_BIT(ADMUX,MUX1);
     b18:	39 9a       	sbi	0x07, 1	; 7
			SET_BIT(ADMUX,MUX2);
     b1a:	3a 9a       	sbi	0x07, 2	; 7
			CLR_BIT(ADMUX,MUX3);
     b1c:	3b 98       	cbi	0x07, 3	; 7
			CLR_BIT(ADMUX,MUX4);
     b1e:	3c 98       	cbi	0x07, 4	; 7
			break;
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <ADC_ReadDigitalValue+0x90>
			
			case ADC_CHANNEL_7:
			SET_BIT(ADMUX,MUX0);
     b22:	38 9a       	sbi	0x07, 0	; 7
			SET_BIT(ADMUX,MUX1);
     b24:	39 9a       	sbi	0x07, 1	; 7
			SET_BIT(ADMUX,MUX2);
     b26:	3a 9a       	sbi	0x07, 2	; 7
			CLR_BIT(ADMUX,MUX3);
     b28:	3b 98       	cbi	0x07, 3	; 7
			CLR_BIT(ADMUX,MUX4);
     b2a:	3c 98       	cbi	0x07, 4	; 7
			break;
		} 
		SET_BIT(ADCSRA,ADSC);                //start conversion 
     b2c:	36 9a       	sbi	0x06, 6	; 6
		
		while( 0 == GET_BIT(ADCSRA,ADIF) );  //wait for flag set 1
     b2e:	86 b1       	in	r24, 0x06	; 6
     b30:	84 ff       	sbrs	r24, 4
     b32:	fd cf       	rjmp	.-6      	; 0xb2e <ADC_ReadDigitalValue+0x92>
		
		*DigitalValue=ADC_DATA;
     b34:	84 b1       	in	r24, 0x04	; 4
     b36:	95 b1       	in	r25, 0x05	; 5
     b38:	fb 01       	movw	r30, r22
     b3a:	91 83       	std	Z+1, r25	; 0x01
     b3c:	80 83       	st	Z, r24
		
		SET_BIT(ADCSRA,ADIF);                   //TO Clear flag again 
     b3e:	34 9a       	sbi	0x06, 4	; 6
     b40:	08 95       	ret

00000b42 <ADC_SetCallBackADC>:
}


void ADC_SetCallBackADC (void (*PtrToFunc) (void))
{
	if( PtrToFunc!=NULL )
     b42:	00 97       	sbiw	r24, 0x00	; 0
     b44:	21 f0       	breq	.+8      	; 0xb4e <ADC_SetCallBackADC+0xc>
	{
		PRIVATE_PtrCallBackADC=PtrToFunc;
     b46:	90 93 96 00 	sts	0x0096, r25
     b4a:	80 93 95 00 	sts	0x0095, r24
     b4e:	08 95       	ret

00000b50 <__vector_16>:
	}
}

void  __vector_16(void) __attribute__((signal));
void  __vector_16(void)
{
     b50:	1f 92       	push	r1
     b52:	0f 92       	push	r0
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	0f 92       	push	r0
     b58:	11 24       	eor	r1, r1
     b5a:	2f 93       	push	r18
     b5c:	3f 93       	push	r19
     b5e:	4f 93       	push	r20
     b60:	5f 93       	push	r21
     b62:	6f 93       	push	r22
     b64:	7f 93       	push	r23
     b66:	8f 93       	push	r24
     b68:	9f 93       	push	r25
     b6a:	af 93       	push	r26
     b6c:	bf 93       	push	r27
     b6e:	ef 93       	push	r30
     b70:	ff 93       	push	r31
	if (PRIVATE_PtrCallBackADC != NULL)
     b72:	e0 91 95 00 	lds	r30, 0x0095
     b76:	f0 91 96 00 	lds	r31, 0x0096
     b7a:	30 97       	sbiw	r30, 0x00	; 0
     b7c:	09 f0       	breq	.+2      	; 0xb80 <__vector_16+0x30>
	{
		PRIVATE_PtrCallBackADC();
     b7e:	09 95       	icall
	}
     b80:	ff 91       	pop	r31
     b82:	ef 91       	pop	r30
     b84:	bf 91       	pop	r27
     b86:	af 91       	pop	r26
     b88:	9f 91       	pop	r25
     b8a:	8f 91       	pop	r24
     b8c:	7f 91       	pop	r23
     b8e:	6f 91       	pop	r22
     b90:	5f 91       	pop	r21
     b92:	4f 91       	pop	r20
     b94:	3f 91       	pop	r19
     b96:	2f 91       	pop	r18
     b98:	0f 90       	pop	r0
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	0f 90       	pop	r0
     b9e:	1f 90       	pop	r1
     ba0:	18 95       	reti

00000ba2 <DIO_SetPinDirection>:


DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PInDirection<=DIO_PIN_OUTPUT))
     ba2:	84 30       	cpi	r24, 0x04	; 4
     ba4:	08 f0       	brcs	.+2      	; 0xba8 <DIO_SetPinDirection+0x6>
     ba6:	8b c0       	rjmp	.+278    	; 0xcbe <DIO_SetPinDirection+0x11c>
     ba8:	68 30       	cpi	r22, 0x08	; 8
     baa:	08 f0       	brcs	.+2      	; 0xbae <DIO_SetPinDirection+0xc>
     bac:	8a c0       	rjmp	.+276    	; 0xcc2 <DIO_SetPinDirection+0x120>
     bae:	42 30       	cpi	r20, 0x02	; 2
     bb0:	08 f0       	brcs	.+2      	; 0xbb4 <DIO_SetPinDirection+0x12>
     bb2:	89 c0       	rjmp	.+274    	; 0xcc6 <DIO_SetPinDirection+0x124>
	{
    	switch(PortId)
     bb4:	81 30       	cpi	r24, 0x01	; 1
     bb6:	41 f1       	breq	.+80     	; 0xc08 <DIO_SetPinDirection+0x66>
     bb8:	81 30       	cpi	r24, 0x01	; 1
     bba:	38 f0       	brcs	.+14     	; 0xbca <DIO_SetPinDirection+0x28>
     bbc:	82 30       	cpi	r24, 0x02	; 2
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <DIO_SetPinDirection+0x20>
     bc0:	41 c0       	rjmp	.+130    	; 0xc44 <DIO_SetPinDirection+0xa2>
     bc2:	83 30       	cpi	r24, 0x03	; 3
     bc4:	09 f0       	breq	.+2      	; 0xbc8 <DIO_SetPinDirection+0x26>
     bc6:	81 c0       	rjmp	.+258    	; 0xcca <DIO_SetPinDirection+0x128>
     bc8:	5b c0       	rjmp	.+182    	; 0xc80 <DIO_SetPinDirection+0xde>
    	{
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
     bca:	41 30       	cpi	r20, 0x01	; 1
     bcc:	71 f4       	brne	.+28     	; 0xbea <DIO_SetPinDirection+0x48>
     bce:	2a b3       	in	r18, 0x1a	; 26
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	ac 01       	movw	r20, r24
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <DIO_SetPinDirection+0x3a>
     bd8:	44 0f       	add	r20, r20
     bda:	55 1f       	adc	r21, r21
     bdc:	6a 95       	dec	r22
     bde:	e2 f7       	brpl	.-8      	; 0xbd8 <DIO_SetPinDirection+0x36>
     be0:	ba 01       	movw	r22, r20
     be2:	62 2b       	or	r22, r18
     be4:	6a bb       	out	0x1a, r22	; 26



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	08 95       	ret
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PInDirection<=DIO_PIN_OUTPUT))
	{
    	switch(PortId)
    	{
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
     bea:	2a b3       	in	r18, 0x1a	; 26
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	ac 01       	movw	r20, r24
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <DIO_SetPinDirection+0x56>
     bf4:	44 0f       	add	r20, r20
     bf6:	55 1f       	adc	r21, r21
     bf8:	6a 95       	dec	r22
     bfa:	e2 f7       	brpl	.-8      	; 0xbf4 <DIO_SetPinDirection+0x52>
     bfc:	ba 01       	movw	r22, r20
     bfe:	60 95       	com	r22
     c00:	62 23       	and	r22, r18
     c02:	6a bb       	out	0x1a, r22	; 26



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	08 95       	ret
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
     c08:	41 30       	cpi	r20, 0x01	; 1
     c0a:	69 f4       	brne	.+26     	; 0xc26 <DIO_SetPinDirection+0x84>
     c0c:	47 b3       	in	r20, 0x17	; 23
     c0e:	21 e0       	ldi	r18, 0x01	; 1
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	c9 01       	movw	r24, r18
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <DIO_SetPinDirection+0x78>
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	6a 95       	dec	r22
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <DIO_SetPinDirection+0x74>
     c1e:	84 2b       	or	r24, r20
     c20:	87 bb       	out	0x17, r24	; 23



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	08 95       	ret
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
     c26:	27 b3       	in	r18, 0x17	; 23
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	ac 01       	movw	r20, r24
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <DIO_SetPinDirection+0x92>
     c30:	44 0f       	add	r20, r20
     c32:	55 1f       	adc	r21, r21
     c34:	6a 95       	dec	r22
     c36:	e2 f7       	brpl	.-8      	; 0xc30 <DIO_SetPinDirection+0x8e>
     c38:	ba 01       	movw	r22, r20
     c3a:	60 95       	com	r22
     c3c:	62 23       	and	r22, r18
     c3e:	67 bb       	out	0x17, r22	; 23



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	08 95       	ret
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
     c44:	41 30       	cpi	r20, 0x01	; 1
     c46:	69 f4       	brne	.+26     	; 0xc62 <DIO_SetPinDirection+0xc0>
     c48:	44 b3       	in	r20, 0x14	; 20
     c4a:	21 e0       	ldi	r18, 0x01	; 1
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	c9 01       	movw	r24, r18
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <DIO_SetPinDirection+0xb4>
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	6a 95       	dec	r22
     c58:	e2 f7       	brpl	.-8      	; 0xc52 <DIO_SetPinDirection+0xb0>
     c5a:	84 2b       	or	r24, r20
     c5c:	84 bb       	out	0x14, r24	; 20



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	08 95       	ret
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
     c62:	24 b3       	in	r18, 0x14	; 20
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	ac 01       	movw	r20, r24
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <DIO_SetPinDirection+0xce>
     c6c:	44 0f       	add	r20, r20
     c6e:	55 1f       	adc	r21, r21
     c70:	6a 95       	dec	r22
     c72:	e2 f7       	brpl	.-8      	; 0xc6c <DIO_SetPinDirection+0xca>
     c74:	ba 01       	movw	r22, r20
     c76:	60 95       	com	r22
     c78:	62 23       	and	r22, r18
     c7a:	64 bb       	out	0x14, r22	; 20



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	08 95       	ret
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
		   break;
		   
		   case DIO_PORTD:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRD_REG,PinId)) : (CLR_BIT(DDRD_REG,PinId));
     c80:	41 30       	cpi	r20, 0x01	; 1
     c82:	71 f4       	brne	.+28     	; 0xca0 <DIO_SetPinDirection+0xfe>
     c84:	21 b3       	in	r18, 0x11	; 17
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	ac 01       	movw	r20, r24
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <DIO_SetPinDirection+0xf0>
     c8e:	44 0f       	add	r20, r20
     c90:	55 1f       	adc	r21, r21
     c92:	6a 95       	dec	r22
     c94:	e2 f7       	brpl	.-8      	; 0xc8e <DIO_SetPinDirection+0xec>
     c96:	ba 01       	movw	r22, r20
     c98:	62 2b       	or	r22, r18
     c9a:	61 bb       	out	0x11, r22	; 17



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	08 95       	ret
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
		   break;
		   
		   case DIO_PORTD:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRD_REG,PinId)) : (CLR_BIT(DDRD_REG,PinId));
     ca0:	21 b3       	in	r18, 0x11	; 17
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	ac 01       	movw	r20, r24
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <DIO_SetPinDirection+0x10c>
     caa:	44 0f       	add	r20, r20
     cac:	55 1f       	adc	r21, r21
     cae:	6a 95       	dec	r22
     cb0:	e2 f7       	brpl	.-8      	; 0xcaa <DIO_SetPinDirection+0x108>
     cb2:	ba 01       	movw	r22, r20
     cb4:	60 95       	com	r22
     cb6:	62 23       	and	r22, r18
     cb8:	61 bb       	out	0x11, r22	; 17



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	08 95       	ret
		   break;
	    }	
	} 
	else
	{
		ErrorStatus = DIO_NOK;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	08 95       	ret
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	08 95       	ret
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	08 95       	ret



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     cca:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     ccc:	08 95       	ret

00000cce <DIO_SetPinValue>:

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PinValue<=DIO_PIN_HIGH))
     cce:	84 30       	cpi	r24, 0x04	; 4
     cd0:	08 f0       	brcs	.+2      	; 0xcd4 <DIO_SetPinValue+0x6>
     cd2:	8b c0       	rjmp	.+278    	; 0xdea <DIO_SetPinValue+0x11c>
     cd4:	68 30       	cpi	r22, 0x08	; 8
     cd6:	08 f0       	brcs	.+2      	; 0xcda <DIO_SetPinValue+0xc>
     cd8:	8a c0       	rjmp	.+276    	; 0xdee <DIO_SetPinValue+0x120>
     cda:	42 30       	cpi	r20, 0x02	; 2
     cdc:	08 f0       	brcs	.+2      	; 0xce0 <DIO_SetPinValue+0x12>
     cde:	89 c0       	rjmp	.+274    	; 0xdf2 <DIO_SetPinValue+0x124>
	{
			switch (PortId)
     ce0:	81 30       	cpi	r24, 0x01	; 1
     ce2:	41 f1       	breq	.+80     	; 0xd34 <DIO_SetPinValue+0x66>
     ce4:	81 30       	cpi	r24, 0x01	; 1
     ce6:	38 f0       	brcs	.+14     	; 0xcf6 <DIO_SetPinValue+0x28>
     ce8:	82 30       	cpi	r24, 0x02	; 2
     cea:	09 f4       	brne	.+2      	; 0xcee <DIO_SetPinValue+0x20>
     cec:	41 c0       	rjmp	.+130    	; 0xd70 <DIO_SetPinValue+0xa2>
     cee:	83 30       	cpi	r24, 0x03	; 3
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <DIO_SetPinValue+0x26>
     cf2:	81 c0       	rjmp	.+258    	; 0xdf6 <DIO_SetPinValue+0x128>
     cf4:	5b c0       	rjmp	.+182    	; 0xdac <DIO_SetPinValue+0xde>
			{
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
     cf6:	41 30       	cpi	r20, 0x01	; 1
     cf8:	71 f4       	brne	.+28     	; 0xd16 <DIO_SetPinValue+0x48>
     cfa:	2b b3       	in	r18, 0x1b	; 27
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	ac 01       	movw	r20, r24
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <DIO_SetPinValue+0x3a>
     d04:	44 0f       	add	r20, r20
     d06:	55 1f       	adc	r21, r21
     d08:	6a 95       	dec	r22
     d0a:	e2 f7       	brpl	.-8      	; 0xd04 <DIO_SetPinValue+0x36>
     d0c:	ba 01       	movw	r22, r20
     d0e:	62 2b       	or	r22, r18
     d10:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	08 95       	ret
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PinValue<=DIO_PIN_HIGH))
	{
			switch (PortId)
			{
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
     d16:	2b b3       	in	r18, 0x1b	; 27
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	ac 01       	movw	r20, r24
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <DIO_SetPinValue+0x56>
     d20:	44 0f       	add	r20, r20
     d22:	55 1f       	adc	r21, r21
     d24:	6a 95       	dec	r22
     d26:	e2 f7       	brpl	.-8      	; 0xd20 <DIO_SetPinValue+0x52>
     d28:	ba 01       	movw	r22, r20
     d2a:	60 95       	com	r22
     d2c:	62 23       	and	r22, r18
     d2e:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	08 95       	ret
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
     d34:	41 30       	cpi	r20, 0x01	; 1
     d36:	69 f4       	brne	.+26     	; 0xd52 <DIO_SetPinValue+0x84>
     d38:	48 b3       	in	r20, 0x18	; 24
     d3a:	21 e0       	ldi	r18, 0x01	; 1
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	c9 01       	movw	r24, r18
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <DIO_SetPinValue+0x78>
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	6a 95       	dec	r22
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <DIO_SetPinValue+0x74>
     d4a:	84 2b       	or	r24, r20
     d4c:	88 bb       	out	0x18, r24	; 24
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	08 95       	ret
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
     d52:	28 b3       	in	r18, 0x18	; 24
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	ac 01       	movw	r20, r24
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <DIO_SetPinValue+0x92>
     d5c:	44 0f       	add	r20, r20
     d5e:	55 1f       	adc	r21, r21
     d60:	6a 95       	dec	r22
     d62:	e2 f7       	brpl	.-8      	; 0xd5c <DIO_SetPinValue+0x8e>
     d64:	ba 01       	movw	r22, r20
     d66:	60 95       	com	r22
     d68:	62 23       	and	r22, r18
     d6a:	68 bb       	out	0x18, r22	; 24
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	08 95       	ret
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
     d70:	41 30       	cpi	r20, 0x01	; 1
     d72:	69 f4       	brne	.+26     	; 0xd8e <DIO_SetPinValue+0xc0>
     d74:	45 b3       	in	r20, 0x15	; 21
     d76:	21 e0       	ldi	r18, 0x01	; 1
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	c9 01       	movw	r24, r18
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <DIO_SetPinValue+0xb4>
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	6a 95       	dec	r22
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <DIO_SetPinValue+0xb0>
     d86:	84 2b       	or	r24, r20
     d88:	85 bb       	out	0x15, r24	; 21
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	08 95       	ret
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
     d8e:	25 b3       	in	r18, 0x15	; 21
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	ac 01       	movw	r20, r24
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <DIO_SetPinValue+0xce>
     d98:	44 0f       	add	r20, r20
     d9a:	55 1f       	adc	r21, r21
     d9c:	6a 95       	dec	r22
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <DIO_SetPinValue+0xca>
     da0:	ba 01       	movw	r22, r20
     da2:	60 95       	com	r22
     da4:	62 23       	and	r22, r18
     da6:	65 bb       	out	0x15, r22	; 21
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	08 95       	ret
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTD:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTD_REG,PinId)) : (CLR_BIT(PORTD_REG,PinId)) ;
     dac:	41 30       	cpi	r20, 0x01	; 1
     dae:	71 f4       	brne	.+28     	; 0xdcc <DIO_SetPinValue+0xfe>
     db0:	22 b3       	in	r18, 0x12	; 18
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	ac 01       	movw	r20, r24
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <DIO_SetPinValue+0xf0>
     dba:	44 0f       	add	r20, r20
     dbc:	55 1f       	adc	r21, r21
     dbe:	6a 95       	dec	r22
     dc0:	e2 f7       	brpl	.-8      	; 0xdba <DIO_SetPinValue+0xec>
     dc2:	ba 01       	movw	r22, r20
     dc4:	62 2b       	or	r22, r18
     dc6:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	08 95       	ret
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTD:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTD_REG,PinId)) : (CLR_BIT(PORTD_REG,PinId)) ;
     dcc:	22 b3       	in	r18, 0x12	; 18
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	ac 01       	movw	r20, r24
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <DIO_SetPinValue+0x10c>
     dd6:	44 0f       	add	r20, r20
     dd8:	55 1f       	adc	r21, r21
     dda:	6a 95       	dec	r22
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <DIO_SetPinValue+0x108>
     dde:	ba 01       	movw	r22, r20
     de0:	60 95       	com	r22
     de2:	62 23       	and	r22, r18
     de4:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	08 95       	ret
			    break;
			}	
		} 
	else
	{
		ErrorStatus = DIO_NOK;
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	08 95       	ret
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	08 95       	ret
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	08 95       	ret
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     df6:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     df8:	08 95       	ret

00000dfa <DIO_TogglePinValue>:
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7))  //edit all
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	08 f0       	brcs	.+2      	; 0xe00 <DIO_TogglePinValue+0x6>
     dfe:	45 c0       	rjmp	.+138    	; 0xe8a <DIO_TogglePinValue+0x90>
     e00:	68 30       	cpi	r22, 0x08	; 8
     e02:	08 f0       	brcs	.+2      	; 0xe06 <DIO_TogglePinValue+0xc>
     e04:	44 c0       	rjmp	.+136    	; 0xe8e <DIO_TogglePinValue+0x94>
	{
		switch (PortId)
     e06:	81 30       	cpi	r24, 0x01	; 1
     e08:	b1 f0       	breq	.+44     	; 0xe36 <DIO_TogglePinValue+0x3c>
     e0a:	81 30       	cpi	r24, 0x01	; 1
     e0c:	30 f0       	brcs	.+12     	; 0xe1a <DIO_TogglePinValue+0x20>
     e0e:	82 30       	cpi	r24, 0x02	; 2
     e10:	01 f1       	breq	.+64     	; 0xe52 <DIO_TogglePinValue+0x58>
     e12:	83 30       	cpi	r24, 0x03	; 3
     e14:	09 f0       	breq	.+2      	; 0xe18 <DIO_TogglePinValue+0x1e>
     e16:	3d c0       	rjmp	.+122    	; 0xe92 <DIO_TogglePinValue+0x98>
     e18:	2a c0       	rjmp	.+84     	; 0xe6e <DIO_TogglePinValue+0x74>
		{
			case DIO_PORTA:
			TGL_BIT(PORTA_REG,PinId);
     e1a:	2b b3       	in	r18, 0x1b	; 27
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	ac 01       	movw	r20, r24
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <DIO_TogglePinValue+0x2e>
     e24:	44 0f       	add	r20, r20
     e26:	55 1f       	adc	r21, r21
     e28:	6a 95       	dec	r22
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <DIO_TogglePinValue+0x2a>
     e2c:	ba 01       	movw	r22, r20
     e2e:	62 27       	eor	r22, r18
     e30:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
     e32:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch (PortId)
		{
			case DIO_PORTA:
			TGL_BIT(PORTA_REG,PinId);
			break;
     e34:	08 95       	ret
			
			case DIO_PORTB:
			TGL_BIT(PORTB_REG,PinId);
     e36:	28 b3       	in	r18, 0x18	; 24
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	ac 01       	movw	r20, r24
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <DIO_TogglePinValue+0x4a>
     e40:	44 0f       	add	r20, r20
     e42:	55 1f       	adc	r21, r21
     e44:	6a 95       	dec	r22
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <DIO_TogglePinValue+0x46>
     e48:	ba 01       	movw	r22, r20
     e4a:	62 27       	eor	r22, r18
     e4c:	68 bb       	out	0x18, r22	; 24
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
     e4e:	80 e0       	ldi	r24, 0x00	; 0
			TGL_BIT(PORTA_REG,PinId);
			break;
			
			case DIO_PORTB:
			TGL_BIT(PORTB_REG,PinId);
			break;
     e50:	08 95       	ret
			
			case DIO_PORTC:
			TGL_BIT(PORTC_REG,PinId);
     e52:	25 b3       	in	r18, 0x15	; 21
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	ac 01       	movw	r20, r24
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <DIO_TogglePinValue+0x66>
     e5c:	44 0f       	add	r20, r20
     e5e:	55 1f       	adc	r21, r21
     e60:	6a 95       	dec	r22
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <DIO_TogglePinValue+0x62>
     e64:	ba 01       	movw	r22, r20
     e66:	62 27       	eor	r22, r18
     e68:	65 bb       	out	0x15, r22	; 21
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
     e6a:	80 e0       	ldi	r24, 0x00	; 0
			TGL_BIT(PORTB_REG,PinId);
			break;
			
			case DIO_PORTC:
			TGL_BIT(PORTC_REG,PinId);
			break;
     e6c:	08 95       	ret
			
			case DIO_PORTD:
			TGL_BIT(PORTD_REG,PinId);
     e6e:	22 b3       	in	r18, 0x12	; 18
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	ac 01       	movw	r20, r24
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <DIO_TogglePinValue+0x82>
     e78:	44 0f       	add	r20, r20
     e7a:	55 1f       	adc	r21, r21
     e7c:	6a 95       	dec	r22
     e7e:	e2 f7       	brpl	.-8      	; 0xe78 <DIO_TogglePinValue+0x7e>
     e80:	ba 01       	movw	r22, r20
     e82:	62 27       	eor	r22, r18
     e84:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
     e86:	80 e0       	ldi	r24, 0x00	; 0
			TGL_BIT(PORTC_REG,PinId);
			break;
			
			case DIO_PORTD:
			TGL_BIT(PORTD_REG,PinId);
			break;
     e88:	08 95       	ret
		}
	} 
	else
	{
		ErrorStatus = DIO_NOK;
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	08 95       	ret
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	08 95       	ret
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
     e92:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     e94:	08 95       	ret

00000e96 <DIO_ReadValue>:
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PinValue!=NULL)) //wild pointer 
     e96:	84 30       	cpi	r24, 0x04	; 4
     e98:	08 f0       	brcs	.+2      	; 0xe9c <DIO_ReadValue+0x6>
     e9a:	49 c0       	rjmp	.+146    	; 0xf2e <DIO_ReadValue+0x98>
     e9c:	68 30       	cpi	r22, 0x08	; 8
     e9e:	08 f0       	brcs	.+2      	; 0xea2 <DIO_ReadValue+0xc>
     ea0:	48 c0       	rjmp	.+144    	; 0xf32 <DIO_ReadValue+0x9c>
     ea2:	41 15       	cp	r20, r1
     ea4:	51 05       	cpc	r21, r1
     ea6:	09 f4       	brne	.+2      	; 0xeaa <DIO_ReadValue+0x14>
     ea8:	46 c0       	rjmp	.+140    	; 0xf36 <DIO_ReadValue+0xa0>
	{
		switch (PortId)
     eaa:	81 30       	cpi	r24, 0x01	; 1
     eac:	b1 f0       	breq	.+44     	; 0xeda <DIO_ReadValue+0x44>
     eae:	81 30       	cpi	r24, 0x01	; 1
     eb0:	30 f0       	brcs	.+12     	; 0xebe <DIO_ReadValue+0x28>
     eb2:	82 30       	cpi	r24, 0x02	; 2
     eb4:	01 f1       	breq	.+64     	; 0xef6 <DIO_ReadValue+0x60>
     eb6:	83 30       	cpi	r24, 0x03	; 3
     eb8:	09 f0       	breq	.+2      	; 0xebc <DIO_ReadValue+0x26>
     eba:	3f c0       	rjmp	.+126    	; 0xf3a <DIO_ReadValue+0xa4>
     ebc:	2a c0       	rjmp	.+84     	; 0xf12 <DIO_ReadValue+0x7c>
		{
			case DIO_PORTA:
			*PinValue= GET_BIT(PINA_REG,PinId);
     ebe:	89 b3       	in	r24, 0x19	; 25
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	9c 01       	movw	r18, r24
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <DIO_ReadValue+0x34>
     ec6:	35 95       	asr	r19
     ec8:	27 95       	ror	r18
     eca:	6a 95       	dec	r22
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <DIO_ReadValue+0x30>
     ece:	b9 01       	movw	r22, r18
     ed0:	61 70       	andi	r22, 0x01	; 1
     ed2:	fa 01       	movw	r30, r20
     ed4:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     ed6:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch (PortId)
		{
			case DIO_PORTA:
			*PinValue= GET_BIT(PINA_REG,PinId);
			break;
     ed8:	08 95       	ret
			
			case DIO_PORTB:
			*PinValue= GET_BIT(PINB_REG,PinId);
     eda:	86 b3       	in	r24, 0x16	; 22
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	9c 01       	movw	r18, r24
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <DIO_ReadValue+0x50>
     ee2:	35 95       	asr	r19
     ee4:	27 95       	ror	r18
     ee6:	6a 95       	dec	r22
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <DIO_ReadValue+0x4c>
     eea:	b9 01       	movw	r22, r18
     eec:	61 70       	andi	r22, 0x01	; 1
     eee:	fa 01       	movw	r30, r20
     ef0:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     ef2:	80 e0       	ldi	r24, 0x00	; 0
			*PinValue= GET_BIT(PINA_REG,PinId);
			break;
			
			case DIO_PORTB:
			*PinValue= GET_BIT(PINB_REG,PinId);
			break;
     ef4:	08 95       	ret
			
			case DIO_PORTC:
			*PinValue= GET_BIT(PINC_REG,PinId);
     ef6:	83 b3       	in	r24, 0x13	; 19
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	9c 01       	movw	r18, r24
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <DIO_ReadValue+0x6c>
     efe:	35 95       	asr	r19
     f00:	27 95       	ror	r18
     f02:	6a 95       	dec	r22
     f04:	e2 f7       	brpl	.-8      	; 0xefe <DIO_ReadValue+0x68>
     f06:	b9 01       	movw	r22, r18
     f08:	61 70       	andi	r22, 0x01	; 1
     f0a:	fa 01       	movw	r30, r20
     f0c:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     f0e:	80 e0       	ldi	r24, 0x00	; 0
			*PinValue= GET_BIT(PINB_REG,PinId);
			break;
			
			case DIO_PORTC:
			*PinValue= GET_BIT(PINC_REG,PinId);
			break;
     f10:	08 95       	ret
			
			case DIO_PORTD:
			*PinValue= GET_BIT(PIND_REG,PinId);
     f12:	80 b3       	in	r24, 0x10	; 16
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	9c 01       	movw	r18, r24
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <DIO_ReadValue+0x88>
     f1a:	35 95       	asr	r19
     f1c:	27 95       	ror	r18
     f1e:	6a 95       	dec	r22
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <DIO_ReadValue+0x84>
     f22:	b9 01       	movw	r22, r18
     f24:	61 70       	andi	r22, 0x01	; 1
     f26:	fa 01       	movw	r30, r20
     f28:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     f2a:	80 e0       	ldi	r24, 0x00	; 0
			*PinValue= GET_BIT(PINC_REG,PinId);
			break;
			
			case DIO_PORTD:
			*PinValue= GET_BIT(PIND_REG,PinId);
			break;
     f2c:	08 95       	ret
		}
	} 
	else
	{
		ErrorStatus = DIO_NOK;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	08 95       	ret
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	08 95       	ret
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	08 95       	ret
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     f3a:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     f3c:	08 95       	ret

00000f3e <DIO_activePinInPullUpResistance>:
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	 if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7))
     f3e:	84 30       	cpi	r24, 0x04	; 4
     f40:	08 f0       	brcs	.+2      	; 0xf44 <DIO_activePinInPullUpResistance+0x6>
     f42:	45 c0       	rjmp	.+138    	; 0xfce <DIO_activePinInPullUpResistance+0x90>
     f44:	68 30       	cpi	r22, 0x08	; 8
     f46:	08 f0       	brcs	.+2      	; 0xf4a <DIO_activePinInPullUpResistance+0xc>
     f48:	44 c0       	rjmp	.+136    	; 0xfd2 <DIO_activePinInPullUpResistance+0x94>
	 {
		 switch(PortId)
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	b1 f0       	breq	.+44     	; 0xf7a <DIO_activePinInPullUpResistance+0x3c>
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	30 f0       	brcs	.+12     	; 0xf5e <DIO_activePinInPullUpResistance+0x20>
     f52:	82 30       	cpi	r24, 0x02	; 2
     f54:	01 f1       	breq	.+64     	; 0xf96 <DIO_activePinInPullUpResistance+0x58>
     f56:	83 30       	cpi	r24, 0x03	; 3
     f58:	09 f0       	breq	.+2      	; 0xf5c <DIO_activePinInPullUpResistance+0x1e>
     f5a:	3d c0       	rjmp	.+122    	; 0xfd6 <DIO_activePinInPullUpResistance+0x98>
     f5c:	2a c0       	rjmp	.+84     	; 0xfb2 <DIO_activePinInPullUpResistance+0x74>
		 {
			 case DIO_PORTA:
			 SET_BIT(PORTA_REG,PinId);
     f5e:	2b b3       	in	r18, 0x1b	; 27
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	ac 01       	movw	r20, r24
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <DIO_activePinInPullUpResistance+0x2e>
     f68:	44 0f       	add	r20, r20
     f6a:	55 1f       	adc	r21, r21
     f6c:	6a 95       	dec	r22
     f6e:	e2 f7       	brpl	.-8      	; 0xf68 <DIO_activePinInPullUpResistance+0x2a>
     f70:	ba 01       	movw	r22, r20
     f72:	62 2b       	or	r22, r18
     f74:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     f76:	80 e0       	ldi	r24, 0x00	; 0
	 {
		 switch(PortId)
		 {
			 case DIO_PORTA:
			 SET_BIT(PORTA_REG,PinId);
			 break;
     f78:	08 95       	ret
			 
			 case DIO_PORTB:
			 SET_BIT(PORTB_REG,PinId);
     f7a:	28 b3       	in	r18, 0x18	; 24
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	ac 01       	movw	r20, r24
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <DIO_activePinInPullUpResistance+0x4a>
     f84:	44 0f       	add	r20, r20
     f86:	55 1f       	adc	r21, r21
     f88:	6a 95       	dec	r22
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <DIO_activePinInPullUpResistance+0x46>
     f8c:	ba 01       	movw	r22, r20
     f8e:	62 2b       	or	r22, r18
     f90:	68 bb       	out	0x18, r22	; 24
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     f92:	80 e0       	ldi	r24, 0x00	; 0
			 SET_BIT(PORTA_REG,PinId);
			 break;
			 
			 case DIO_PORTB:
			 SET_BIT(PORTB_REG,PinId);
			 break;
     f94:	08 95       	ret
			 
			 case DIO_PORTC:
			 SET_BIT(PORTC_REG,PinId);
     f96:	25 b3       	in	r18, 0x15	; 21
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	ac 01       	movw	r20, r24
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <DIO_activePinInPullUpResistance+0x66>
     fa0:	44 0f       	add	r20, r20
     fa2:	55 1f       	adc	r21, r21
     fa4:	6a 95       	dec	r22
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <DIO_activePinInPullUpResistance+0x62>
     fa8:	ba 01       	movw	r22, r20
     faa:	62 2b       	or	r22, r18
     fac:	65 bb       	out	0x15, r22	; 21
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     fae:	80 e0       	ldi	r24, 0x00	; 0
			 SET_BIT(PORTB_REG,PinId);
			 break;
			 
			 case DIO_PORTC:
			 SET_BIT(PORTC_REG,PinId);
			 break;
     fb0:	08 95       	ret
			 
			 case DIO_PORTD:
			 SET_BIT(PORTD_REG,PinId);
     fb2:	22 b3       	in	r18, 0x12	; 18
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	ac 01       	movw	r20, r24
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <DIO_activePinInPullUpResistance+0x82>
     fbc:	44 0f       	add	r20, r20
     fbe:	55 1f       	adc	r21, r21
     fc0:	6a 95       	dec	r22
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <DIO_activePinInPullUpResistance+0x7e>
     fc4:	ba 01       	movw	r22, r20
     fc6:	62 2b       	or	r22, r18
     fc8:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     fca:	80 e0       	ldi	r24, 0x00	; 0
			 SET_BIT(PORTC_REG,PinId);
			 break;
			 
			 case DIO_PORTD:
			 SET_BIT(PORTD_REG,PinId);
			 break;
     fcc:	08 95       	ret
	      } 
	 }	 
	 else
	 {
		ErrorStatus = DIO_NOK;
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	08 95       	ret
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	08 95       	ret
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     fd6:	80 e0       	ldi	r24, 0x00	; 0
	 else
	 {
		ErrorStatus = DIO_NOK;
	 }
	 return ErrorStatus;
}
     fd8:	08 95       	ret

00000fda <DIO_setPortDirection>:


DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD))
     fda:	84 30       	cpi	r24, 0x04	; 4
     fdc:	a8 f5       	brcc	.+106    	; 0x1048 <DIO_setPortDirection+0x6e>
	{
		switch(PortId)
     fde:	81 30       	cpi	r24, 0x01	; 1
     fe0:	91 f0       	breq	.+36     	; 0x1006 <DIO_setPortDirection+0x2c>
     fe2:	81 30       	cpi	r24, 0x01	; 1
     fe4:	28 f0       	brcs	.+10     	; 0xff0 <DIO_setPortDirection+0x16>
     fe6:	82 30       	cpi	r24, 0x02	; 2
     fe8:	c9 f0       	breq	.+50     	; 0x101c <DIO_setPortDirection+0x42>
     fea:	83 30       	cpi	r24, 0x03	; 3
     fec:	79 f5       	brne	.+94     	; 0x104c <DIO_setPortDirection+0x72>
     fee:	21 c0       	rjmp	.+66     	; 0x1032 <DIO_setPortDirection+0x58>
		{
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
     ff0:	6f 3f       	cpi	r22, 0xFF	; 255
     ff2:	29 f4       	brne	.+10     	; 0xffe <DIO_setPortDirection+0x24>
     ff4:	8a b3       	in	r24, 0x1a	; 26
     ff6:	8f ef       	ldi	r24, 0xFF	; 255
     ff8:	8a bb       	out	0x1a, r24	; 26



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	08 95       	ret
	if ( (PortId<=DIO_PORTD))
	{
		switch(PortId)
		{
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
     ffe:	8a b3       	in	r24, 0x1a	; 26
    1000:	1a ba       	out	0x1a, r1	; 26



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	08 95       	ret
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
			break;
			
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
    1006:	6f 3f       	cpi	r22, 0xFF	; 255
    1008:	29 f4       	brne	.+10     	; 0x1014 <DIO_setPortDirection+0x3a>
    100a:	87 b3       	in	r24, 0x17	; 23
    100c:	8f ef       	ldi	r24, 0xFF	; 255
    100e:	87 bb       	out	0x17, r24	; 23



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	08 95       	ret
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
			break;
			
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
    1014:	87 b3       	in	r24, 0x17	; 23
    1016:	17 ba       	out	0x17, r1	; 23



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	08 95       	ret
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
			break;
			
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
    101c:	6f 3f       	cpi	r22, 0xFF	; 255
    101e:	29 f4       	brne	.+10     	; 0x102a <DIO_setPortDirection+0x50>
    1020:	84 b3       	in	r24, 0x14	; 20
    1022:	8f ef       	ldi	r24, 0xFF	; 255
    1024:	84 bb       	out	0x14, r24	; 20



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	08 95       	ret
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
			break;
			
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
    102a:	84 b3       	in	r24, 0x14	; 20
    102c:	14 ba       	out	0x14, r1	; 20



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	08 95       	ret
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
			break;
			
			case DIO_PORTD:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRD_REG)):(CLR_REG(DDRD_REG));
    1032:	6f 3f       	cpi	r22, 0xFF	; 255
    1034:	29 f4       	brne	.+10     	; 0x1040 <DIO_setPortDirection+0x66>
    1036:	81 b3       	in	r24, 0x11	; 17
    1038:	8f ef       	ldi	r24, 0xFF	; 255
    103a:	81 bb       	out	0x11, r24	; 17



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	08 95       	ret
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
			break;
			
			case DIO_PORTD:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRD_REG)):(CLR_REG(DDRD_REG));
    1040:	81 b3       	in	r24, 0x11	; 17
    1042:	11 ba       	out	0x11, r1	; 17



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	08 95       	ret
			break;
		}
	} 
	else
	{
		ErrorStatus = DIO_NOK;
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	08 95       	ret



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    104c:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    104e:	08 95       	ret

00001050 <DIO_setPortValue>:


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD) )
    1050:	84 30       	cpi	r24, 0x04	; 4
    1052:	a8 f4       	brcc	.+42     	; 0x107e <DIO_setPortValue+0x2e>
	{
		switch(PortId)
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	51 f0       	breq	.+20     	; 0x106c <DIO_setPortValue+0x1c>
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	28 f0       	brcs	.+10     	; 0x1066 <DIO_setPortValue+0x16>
    105c:	82 30       	cpi	r24, 0x02	; 2
    105e:	49 f0       	breq	.+18     	; 0x1072 <DIO_setPortValue+0x22>
    1060:	83 30       	cpi	r24, 0x03	; 3
    1062:	79 f4       	brne	.+30     	; 0x1082 <DIO_setPortValue+0x32>
    1064:	09 c0       	rjmp	.+18     	; 0x1078 <DIO_setPortValue+0x28>
		{
			case DIO_PORTA:
			PORTA_REG=PortValue;
    1066:	6b bb       	out	0x1b, r22	; 27
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1068:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			PORTA_REG=PortValue;
			break;
    106a:	08 95       	ret
			
			case DIO_PORTB:
			PORTB_REG=PortValue;
    106c:	68 bb       	out	0x18, r22	; 24
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    106e:	80 e0       	ldi	r24, 0x00	; 0
			PORTA_REG=PortValue;
			break;
			
			case DIO_PORTB:
			PORTB_REG=PortValue;
			break;
    1070:	08 95       	ret
			
			case DIO_PORTC:
			PORTC_REG=PortValue;
    1072:	65 bb       	out	0x15, r22	; 21
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1074:	80 e0       	ldi	r24, 0x00	; 0
			PORTB_REG=PortValue;
			break;
			
			case DIO_PORTC:
			PORTC_REG=PortValue;
			break;
    1076:	08 95       	ret
			
			case DIO_PORTD:
			PORTD_REG=PortValue;
    1078:	62 bb       	out	0x12, r22	; 18
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    107a:	80 e0       	ldi	r24, 0x00	; 0
			PORTC_REG=PortValue;
			break;
			
			case DIO_PORTD:
			PORTD_REG=PortValue;
			break;
    107c:	08 95       	ret
		}
	}
	else
	{
	ErrorStatus = DIO_NOK;
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	08 95       	ret
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1082:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
	ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    1084:	08 95       	ret

00001086 <DIO_getPortValue>:


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD) && (PortValue!=NULL) )
    1086:	84 30       	cpi	r24, 0x04	; 4
    1088:	00 f5       	brcc	.+64     	; 0x10ca <DIO_getPortValue+0x44>
    108a:	61 15       	cp	r22, r1
    108c:	71 05       	cpc	r23, r1
    108e:	f9 f0       	breq	.+62     	; 0x10ce <DIO_getPortValue+0x48>
	{
		switch(PortId)
    1090:	81 30       	cpi	r24, 0x01	; 1
    1092:	61 f0       	breq	.+24     	; 0x10ac <DIO_getPortValue+0x26>
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	28 f0       	brcs	.+10     	; 0x10a2 <DIO_getPortValue+0x1c>
    1098:	82 30       	cpi	r24, 0x02	; 2
    109a:	69 f0       	breq	.+26     	; 0x10b6 <DIO_getPortValue+0x30>
    109c:	83 30       	cpi	r24, 0x03	; 3
    109e:	c9 f4       	brne	.+50     	; 0x10d2 <DIO_getPortValue+0x4c>
    10a0:	0f c0       	rjmp	.+30     	; 0x10c0 <DIO_getPortValue+0x3a>
		{
			case DIO_PORTA:
			*PortValue =PORTA_REG;
    10a2:	8b b3       	in	r24, 0x1b	; 27
    10a4:	fb 01       	movw	r30, r22
    10a6:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    10a8:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			*PortValue =PORTA_REG;
			break;
    10aa:	08 95       	ret
			
			case DIO_PORTB:
		    *PortValue =PORTB_REG;
    10ac:	88 b3       	in	r24, 0x18	; 24
    10ae:	fb 01       	movw	r30, r22
    10b0:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    10b2:	80 e0       	ldi	r24, 0x00	; 0
			*PortValue =PORTA_REG;
			break;
			
			case DIO_PORTB:
		    *PortValue =PORTB_REG;
			break;
    10b4:	08 95       	ret
			
			case DIO_PORTC:
			*PortValue =PORTC_REG;
    10b6:	85 b3       	in	r24, 0x15	; 21
    10b8:	fb 01       	movw	r30, r22
    10ba:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    10bc:	80 e0       	ldi	r24, 0x00	; 0
		    *PortValue =PORTB_REG;
			break;
			
			case DIO_PORTC:
			*PortValue =PORTC_REG;
			break;
    10be:	08 95       	ret
			
			case DIO_PORTD:
			*PortValue =PORTD_REG;
    10c0:	82 b3       	in	r24, 0x12	; 18
    10c2:	fb 01       	movw	r30, r22
    10c4:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    10c6:	80 e0       	ldi	r24, 0x00	; 0
			*PortValue =PORTC_REG;
			break;
			
			case DIO_PORTD:
			*PortValue =PORTD_REG;
			break;
    10c8:	08 95       	ret
		}
	}
	else
	{
		ErrorStatus = DIO_NOK;
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	08 95       	ret
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	08 95       	ret
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    10d2:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    10d4:	08 95       	ret

000010d6 <DIO_togglePortValue>:


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD))
    10d6:	84 30       	cpi	r24, 0x04	; 4
    10d8:	e8 f4       	brcc	.+58     	; 0x1114 <DIO_togglePortValue+0x3e>
	{
		switch(PortId)
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	61 f0       	breq	.+24     	; 0x10f6 <DIO_togglePortValue+0x20>
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	28 f0       	brcs	.+10     	; 0x10ec <DIO_togglePortValue+0x16>
    10e2:	82 30       	cpi	r24, 0x02	; 2
    10e4:	69 f0       	breq	.+26     	; 0x1100 <DIO_togglePortValue+0x2a>
    10e6:	83 30       	cpi	r24, 0x03	; 3
    10e8:	b9 f4       	brne	.+46     	; 0x1118 <DIO_togglePortValue+0x42>
    10ea:	0f c0       	rjmp	.+30     	; 0x110a <DIO_togglePortValue+0x34>
		{
			case DIO_PORTA:
			TGL_REG(PORTA_REG);
    10ec:	8b b3       	in	r24, 0x1b	; 27
    10ee:	80 95       	com	r24
    10f0:	8b bb       	out	0x1b, r24	; 27
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    10f2:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			TGL_REG(PORTA_REG);
			break;
    10f4:	08 95       	ret
			
			case DIO_PORTB:
			TGL_REG(PORTB_REG);
    10f6:	88 b3       	in	r24, 0x18	; 24
    10f8:	80 95       	com	r24
    10fa:	88 bb       	out	0x18, r24	; 24
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    10fc:	80 e0       	ldi	r24, 0x00	; 0
			TGL_REG(PORTA_REG);
			break;
			
			case DIO_PORTB:
			TGL_REG(PORTB_REG);
			break;
    10fe:	08 95       	ret
			
			case DIO_PORTC:
			TGL_REG(PORTC_REG);
    1100:	85 b3       	in	r24, 0x15	; 21
    1102:	80 95       	com	r24
    1104:	85 bb       	out	0x15, r24	; 21
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1106:	80 e0       	ldi	r24, 0x00	; 0
			TGL_REG(PORTB_REG);
			break;
			
			case DIO_PORTC:
			TGL_REG(PORTC_REG);
			break;
    1108:	08 95       	ret
			
			case DIO_PORTD:
			TGL_REG(PORTD_REG);
    110a:	82 b3       	in	r24, 0x12	; 18
    110c:	80 95       	com	r24
    110e:	82 bb       	out	0x12, r24	; 18
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1110:	80 e0       	ldi	r24, 0x00	; 0
			TGL_REG(PORTC_REG);
			break;
			
			case DIO_PORTD:
			TGL_REG(PORTD_REG);
			break;
    1112:	08 95       	ret
		}
	}
	else
	{
		ErrorStatus = DIO_NOK;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	08 95       	ret
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1118:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    111a:	08 95       	ret

0000111c <DIO_activePortInPullUpResistance>:


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD))
    111c:	84 30       	cpi	r24, 0x04	; 4
    111e:	e8 f4       	brcc	.+58     	; 0x115a <DIO_activePortInPullUpResistance+0x3e>
	{
		switch(PortId)
    1120:	81 30       	cpi	r24, 0x01	; 1
    1122:	61 f0       	breq	.+24     	; 0x113c <DIO_activePortInPullUpResistance+0x20>
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	28 f0       	brcs	.+10     	; 0x1132 <DIO_activePortInPullUpResistance+0x16>
    1128:	82 30       	cpi	r24, 0x02	; 2
    112a:	69 f0       	breq	.+26     	; 0x1146 <DIO_activePortInPullUpResistance+0x2a>
    112c:	83 30       	cpi	r24, 0x03	; 3
    112e:	b9 f4       	brne	.+46     	; 0x115e <DIO_activePortInPullUpResistance+0x42>
    1130:	0f c0       	rjmp	.+30     	; 0x1150 <DIO_activePortInPullUpResistance+0x34>
		{
			case DIO_PORTA:
			SET_REG(PORTA_REG);
    1132:	8b b3       	in	r24, 0x1b	; 27
    1134:	8f ef       	ldi	r24, 0xFF	; 255
    1136:	8b bb       	out	0x1b, r24	; 27
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1138:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			SET_REG(PORTA_REG);
			break;
    113a:	08 95       	ret
			
			case DIO_PORTB:
			SET_REG(PORTB_REG);
    113c:	88 b3       	in	r24, 0x18	; 24
    113e:	8f ef       	ldi	r24, 0xFF	; 255
    1140:	88 bb       	out	0x18, r24	; 24
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1142:	80 e0       	ldi	r24, 0x00	; 0
			SET_REG(PORTA_REG);
			break;
			
			case DIO_PORTB:
			SET_REG(PORTB_REG);
			break;
    1144:	08 95       	ret
			
			case DIO_PORTC:
			SET_REG(PORTC_REG);
    1146:	85 b3       	in	r24, 0x15	; 21
    1148:	8f ef       	ldi	r24, 0xFF	; 255
    114a:	85 bb       	out	0x15, r24	; 21
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    114c:	80 e0       	ldi	r24, 0x00	; 0
			SET_REG(PORTB_REG);
			break;
			
			case DIO_PORTC:
			SET_REG(PORTC_REG);
			break;
    114e:	08 95       	ret
			
			case DIO_PORTD:
			SET_REG(PORTD_REG);
    1150:	82 b3       	in	r24, 0x12	; 18
    1152:	8f ef       	ldi	r24, 0xFF	; 255
    1154:	82 bb       	out	0x12, r24	; 18
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1156:	80 e0       	ldi	r24, 0x00	; 0
			SET_REG(PORTC_REG);
			break;
			
			case DIO_PORTD:
			SET_REG(PORTD_REG);
			break;
    1158:	08 95       	ret
		}
	}
	else
	{
		ErrorStatus = DIO_NOK;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	08 95       	ret
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    115e:	80 e0       	ldi	r24, 0x00	; 0
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
	
}
    1160:	08 95       	ret

00001162 <EXTI_Enable>:
static void (*PRIVATE_PtrCallBackInt1) (void) = NULL;
static void (*PRIVATE_PtrCallBackInt2) (void) = NULL;

void EXTI_Enable(EXTI_InterruptSource InterruptSource ,EXTI_TriggerEdge TriggerEdge)
{
	switch(InterruptSource)
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	71 f1       	breq	.+92     	; 0x11c2 <EXTI_Enable+0x60>
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	20 f0       	brcs	.+8      	; 0x1172 <EXTI_Enable+0x10>
    116a:	82 30       	cpi	r24, 0x02	; 2
    116c:	09 f0       	breq	.+2      	; 0x1170 <EXTI_Enable+0xe>
    116e:	60 c0       	rjmp	.+192    	; 0x1230 <EXTI_Enable+0xce>
    1170:	50 c0       	rjmp	.+160    	; 0x1212 <EXTI_Enable+0xb0>
	{
		case EXTI_INT0:
		switch(TriggerEdge)
    1172:	61 30       	cpi	r22, 0x01	; 1
    1174:	71 f0       	breq	.+28     	; 0x1192 <EXTI_Enable+0x30>
    1176:	61 30       	cpi	r22, 0x01	; 1
    1178:	28 f0       	brcs	.+10     	; 0x1184 <EXTI_Enable+0x22>
    117a:	62 30       	cpi	r22, 0x02	; 2
    117c:	89 f0       	breq	.+34     	; 0x11a0 <EXTI_Enable+0x3e>
    117e:	63 30       	cpi	r22, 0x03	; 3
    1180:	e1 f4       	brne	.+56     	; 0x11ba <EXTI_Enable+0x58>
    1182:	15 c0       	rjmp	.+42     	; 0x11ae <EXTI_Enable+0x4c>
		{
			case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
    1184:	85 b7       	in	r24, 0x35	; 53
    1186:	81 60       	ori	r24, 0x01	; 1
    1188:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
    118a:	85 b7       	in	r24, 0x35	; 53
    118c:	82 60       	ori	r24, 0x02	; 2
    118e:	85 bf       	out	0x35, r24	; 53
			break;
    1190:	14 c0       	rjmp	.+40     	; 0x11ba <EXTI_Enable+0x58>
			
			case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
    1192:	85 b7       	in	r24, 0x35	; 53
    1194:	8e 7f       	andi	r24, 0xFE	; 254
    1196:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
    1198:	85 b7       	in	r24, 0x35	; 53
    119a:	82 60       	ori	r24, 0x02	; 2
    119c:	85 bf       	out	0x35, r24	; 53
			break;
    119e:	0d c0       	rjmp	.+26     	; 0x11ba <EXTI_Enable+0x58>
			
			case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
    11a0:	85 b7       	in	r24, 0x35	; 53
    11a2:	8e 7f       	andi	r24, 0xFE	; 254
    11a4:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC01);
    11a6:	85 b7       	in	r24, 0x35	; 53
    11a8:	8d 7f       	andi	r24, 0xFD	; 253
    11aa:	85 bf       	out	0x35, r24	; 53
			break;
    11ac:	06 c0       	rjmp	.+12     	; 0x11ba <EXTI_Enable+0x58>
			
			case EXTI_ANY_LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC00);
    11ae:	85 b7       	in	r24, 0x35	; 53
    11b0:	81 60       	ori	r24, 0x01	; 1
    11b2:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC01);
    11b4:	85 b7       	in	r24, 0x35	; 53
    11b6:	8d 7f       	andi	r24, 0xFD	; 253
    11b8:	85 bf       	out	0x35, r24	; 53
			break;
		}
		SET_BIT(GICR,INT0);
    11ba:	8b b7       	in	r24, 0x3b	; 59
    11bc:	80 64       	ori	r24, 0x40	; 64
    11be:	8b bf       	out	0x3b, r24	; 59
		break;
    11c0:	08 95       	ret
		
		case EXTI_INT1:
		switch(TriggerEdge)
    11c2:	61 30       	cpi	r22, 0x01	; 1
    11c4:	71 f0       	breq	.+28     	; 0x11e2 <EXTI_Enable+0x80>
    11c6:	61 30       	cpi	r22, 0x01	; 1
    11c8:	28 f0       	brcs	.+10     	; 0x11d4 <EXTI_Enable+0x72>
    11ca:	62 30       	cpi	r22, 0x02	; 2
    11cc:	89 f0       	breq	.+34     	; 0x11f0 <EXTI_Enable+0x8e>
    11ce:	63 30       	cpi	r22, 0x03	; 3
    11d0:	e1 f4       	brne	.+56     	; 0x120a <EXTI_Enable+0xa8>
    11d2:	15 c0       	rjmp	.+42     	; 0x11fe <EXTI_Enable+0x9c>
		{
			case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,ISC10);
    11d4:	85 b7       	in	r24, 0x35	; 53
    11d6:	84 60       	ori	r24, 0x04	; 4
    11d8:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
    11da:	85 b7       	in	r24, 0x35	; 53
    11dc:	88 60       	ori	r24, 0x08	; 8
    11de:	85 bf       	out	0x35, r24	; 53
			break;
    11e0:	14 c0       	rjmp	.+40     	; 0x120a <EXTI_Enable+0xa8>
			
			case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCR,ISC10);
    11e2:	85 b7       	in	r24, 0x35	; 53
    11e4:	8b 7f       	andi	r24, 0xFB	; 251
    11e6:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
    11e8:	85 b7       	in	r24, 0x35	; 53
    11ea:	88 60       	ori	r24, 0x08	; 8
    11ec:	85 bf       	out	0x35, r24	; 53
			break;
    11ee:	0d c0       	rjmp	.+26     	; 0x120a <EXTI_Enable+0xa8>
			
			case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR,ISC10);
    11f0:	85 b7       	in	r24, 0x35	; 53
    11f2:	8b 7f       	andi	r24, 0xFB	; 251
    11f4:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC11);
    11f6:	85 b7       	in	r24, 0x35	; 53
    11f8:	87 7f       	andi	r24, 0xF7	; 247
    11fa:	85 bf       	out	0x35, r24	; 53
			break;
    11fc:	06 c0       	rjmp	.+12     	; 0x120a <EXTI_Enable+0xa8>
			
			case EXTI_ANY_LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC10);
    11fe:	85 b7       	in	r24, 0x35	; 53
    1200:	84 60       	ori	r24, 0x04	; 4
    1202:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC11);
    1204:	85 b7       	in	r24, 0x35	; 53
    1206:	87 7f       	andi	r24, 0xF7	; 247
    1208:	85 bf       	out	0x35, r24	; 53
			break;
		}
		SET_BIT(GICR,INT1);
    120a:	8b b7       	in	r24, 0x3b	; 59
    120c:	80 68       	ori	r24, 0x80	; 128
    120e:	8b bf       	out	0x3b, r24	; 59
		break;
    1210:	08 95       	ret
		
		case EXTI_INT2:
		switch(TriggerEdge)
    1212:	66 23       	and	r22, r22
    1214:	19 f0       	breq	.+6      	; 0x121c <EXTI_Enable+0xba>
    1216:	61 30       	cpi	r22, 0x01	; 1
    1218:	41 f4       	brne	.+16     	; 0x122a <EXTI_Enable+0xc8>
    121a:	04 c0       	rjmp	.+8      	; 0x1224 <EXTI_Enable+0xc2>
		{
			case EXTI_RISING_EDGE:
			SET_BIT(MCUCSR,ISC2);
    121c:	84 b7       	in	r24, 0x34	; 52
    121e:	80 64       	ori	r24, 0x40	; 64
    1220:	84 bf       	out	0x34, r24	; 52
			break;
    1222:	03 c0       	rjmp	.+6      	; 0x122a <EXTI_Enable+0xc8>
			
			case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCSR,ISC2);
    1224:	84 b7       	in	r24, 0x34	; 52
    1226:	8f 7b       	andi	r24, 0xBF	; 191
    1228:	84 bf       	out	0x34, r24	; 52
			break;
		}
		SET_BIT(GICR,INT2);
    122a:	8b b7       	in	r24, 0x3b	; 59
    122c:	80 62       	ori	r24, 0x20	; 32
    122e:	8b bf       	out	0x3b, r24	; 59
    1230:	08 95       	ret

00001232 <EXTI_Disable>:
	}
}

void EXTI_Disable(EXTI_InterruptSource InterruptSource)
{
	switch(InterruptSource)
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	49 f0       	breq	.+18     	; 0x1248 <EXTI_Disable+0x16>
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	18 f0       	brcs	.+6      	; 0x1240 <EXTI_Disable+0xe>
    123a:	82 30       	cpi	r24, 0x02	; 2
    123c:	61 f4       	brne	.+24     	; 0x1256 <EXTI_Disable+0x24>
    123e:	08 c0       	rjmp	.+16     	; 0x1250 <EXTI_Disable+0x1e>
	{
		case EXTI_INT0:
		CLR_BIT(GICR,INT0);
    1240:	8b b7       	in	r24, 0x3b	; 59
    1242:	8f 7b       	andi	r24, 0xBF	; 191
    1244:	8b bf       	out	0x3b, r24	; 59
		break;
    1246:	08 95       	ret
		
		case EXTI_INT1:
		CLR_BIT(GICR,INT1);
    1248:	8b b7       	in	r24, 0x3b	; 59
    124a:	8f 77       	andi	r24, 0x7F	; 127
    124c:	8b bf       	out	0x3b, r24	; 59
		break;
    124e:	08 95       	ret
		
		case EXTI_INT2:
		CLR_BIT(GICR,INT2);
    1250:	8b b7       	in	r24, 0x3b	; 59
    1252:	8f 7d       	andi	r24, 0xDF	; 223
    1254:	8b bf       	out	0x3b, r24	; 59
    1256:	08 95       	ret

00001258 <EXTI_SetCallBackInt0>:
	}
	
}
void EXTI_SetCallBackInt0 (void (*PtrToFunc) (void))
{
	if( PtrToFunc!=NULL )
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	21 f0       	breq	.+8      	; 0x1264 <EXTI_SetCallBackInt0+0xc>
	{
		PRIVATE_PtrCallBackInt0=PtrToFunc;
    125c:	90 93 98 00 	sts	0x0098, r25
    1260:	80 93 97 00 	sts	0x0097, r24
    1264:	08 95       	ret

00001266 <EXTI_SetCallBackInt1>:
	}
}
void EXTI_SetCallBackInt1 (void (*PtrToFunc) (void))
{
	if( PtrToFunc!=NULL )
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	21 f0       	breq	.+8      	; 0x1272 <EXTI_SetCallBackInt1+0xc>
	{
		PRIVATE_PtrCallBackInt1=PtrToFunc;
    126a:	90 93 9a 00 	sts	0x009A, r25
    126e:	80 93 99 00 	sts	0x0099, r24
    1272:	08 95       	ret

00001274 <EXTI_SetCallBackInt2>:
	}
}
void EXTI_SetCallBackInt2 (void (*PtrToFunc) (void))
{
	if( PtrToFunc!=NULL )
    1274:	00 97       	sbiw	r24, 0x00	; 0
    1276:	21 f0       	breq	.+8      	; 0x1280 <EXTI_SetCallBackInt2+0xc>
	{
		PRIVATE_PtrCallBackInt2=PtrToFunc;
    1278:	90 93 9c 00 	sts	0x009C, r25
    127c:	80 93 9b 00 	sts	0x009B, r24
    1280:	08 95       	ret

00001282 <__vector_2>:
// 	}
// }

void  __vector_2(void) __attribute__((signal)); 
void  __vector_2(void)
{
    1282:	1f 92       	push	r1
    1284:	0f 92       	push	r0
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	0f 92       	push	r0
    128a:	11 24       	eor	r1, r1
    128c:	2f 93       	push	r18
    128e:	3f 93       	push	r19
    1290:	4f 93       	push	r20
    1292:	5f 93       	push	r21
    1294:	6f 93       	push	r22
    1296:	7f 93       	push	r23
    1298:	8f 93       	push	r24
    129a:	9f 93       	push	r25
    129c:	af 93       	push	r26
    129e:	bf 93       	push	r27
    12a0:	ef 93       	push	r30
    12a2:	ff 93       	push	r31
	if (PRIVATE_PtrCallBackInt1 != NULL)
    12a4:	e0 91 99 00 	lds	r30, 0x0099
    12a8:	f0 91 9a 00 	lds	r31, 0x009A
    12ac:	30 97       	sbiw	r30, 0x00	; 0
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <__vector_2+0x30>
	{
		PRIVATE_PtrCallBackInt1();
    12b0:	09 95       	icall
	}
}
    12b2:	ff 91       	pop	r31
    12b4:	ef 91       	pop	r30
    12b6:	bf 91       	pop	r27
    12b8:	af 91       	pop	r26
    12ba:	9f 91       	pop	r25
    12bc:	8f 91       	pop	r24
    12be:	7f 91       	pop	r23
    12c0:	6f 91       	pop	r22
    12c2:	5f 91       	pop	r21
    12c4:	4f 91       	pop	r20
    12c6:	3f 91       	pop	r19
    12c8:	2f 91       	pop	r18
    12ca:	0f 90       	pop	r0
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	0f 90       	pop	r0
    12d0:	1f 90       	pop	r1
    12d2:	18 95       	reti

000012d4 <__vector_3>:

void  __vector_3(void) __attribute__((signal)); 
void  __vector_3(void)
{
    12d4:	1f 92       	push	r1
    12d6:	0f 92       	push	r0
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	0f 92       	push	r0
    12dc:	11 24       	eor	r1, r1
    12de:	2f 93       	push	r18
    12e0:	3f 93       	push	r19
    12e2:	4f 93       	push	r20
    12e4:	5f 93       	push	r21
    12e6:	6f 93       	push	r22
    12e8:	7f 93       	push	r23
    12ea:	8f 93       	push	r24
    12ec:	9f 93       	push	r25
    12ee:	af 93       	push	r26
    12f0:	bf 93       	push	r27
    12f2:	ef 93       	push	r30
    12f4:	ff 93       	push	r31
	if (PRIVATE_PtrCallBackInt2 != NULL)
    12f6:	e0 91 9b 00 	lds	r30, 0x009B
    12fa:	f0 91 9c 00 	lds	r31, 0x009C
    12fe:	30 97       	sbiw	r30, 0x00	; 0
    1300:	09 f0       	breq	.+2      	; 0x1304 <__vector_3+0x30>
	{
		PRIVATE_PtrCallBackInt2();
    1302:	09 95       	icall
	}
    1304:	ff 91       	pop	r31
    1306:	ef 91       	pop	r30
    1308:	bf 91       	pop	r27
    130a:	af 91       	pop	r26
    130c:	9f 91       	pop	r25
    130e:	8f 91       	pop	r24
    1310:	7f 91       	pop	r23
    1312:	6f 91       	pop	r22
    1314:	5f 91       	pop	r21
    1316:	4f 91       	pop	r20
    1318:	3f 91       	pop	r19
    131a:	2f 91       	pop	r18
    131c:	0f 90       	pop	r0
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	0f 90       	pop	r0
    1322:	1f 90       	pop	r1
    1324:	18 95       	reti

00001326 <GLBI_Enable>:
#include "../include/GLBI_interfase.h"
#include "../include/GLBI_private.h"
 
 void GLBI_Enable()
 {
	 SET_BIT(SREG,I);
    1326:	8f b7       	in	r24, 0x3f	; 63
    1328:	80 68       	ori	r24, 0x80	; 128
    132a:	8f bf       	out	0x3f, r24	; 63
    132c:	08 95       	ret

0000132e <TM0_init>:

void TM0_init(void)
{
	#if TMR0_MODE == TMR0_NORMAL_MODE
	// select mode
	CLR_BIT(TCCR0,6);
    132e:	83 b7       	in	r24, 0x33	; 51
    1330:	8f 7b       	andi	r24, 0xBF	; 191
    1332:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,3);
    1334:	83 b7       	in	r24, 0x33	; 51
    1336:	87 7f       	andi	r24, 0xF7	; 247
    1338:	83 bf       	out	0x33, r24	; 51
	
	
	//select preload
	TCNT0=TMR0_PRELOAD_VALUE;
    133a:	12 be       	out	0x32, r1	; 50
	
	// enable interrupt
	SET_BIT(TIMSK,0);
    133c:	89 b7       	in	r24, 0x39	; 57
    133e:	81 60       	ori	r24, 0x01	; 1
    1340:	89 bf       	out	0x39, r24	; 57
	SET_BIT(TCCR0,6);
	
	
	#endif
	
}
    1342:	08 95       	ret

00001344 <TM0_start>:


void TM0_start(void)
{
	
	SET_BIT(TCCR0,0);
    1344:	83 b7       	in	r24, 0x33	; 51
    1346:	81 60       	ori	r24, 0x01	; 1
    1348:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,1);
    134a:	83 b7       	in	r24, 0x33	; 51
    134c:	82 60       	ori	r24, 0x02	; 2
    134e:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,2);
    1350:	83 b7       	in	r24, 0x33	; 51
    1352:	8b 7f       	andi	r24, 0xFB	; 251
    1354:	83 bf       	out	0x33, r24	; 51
}
    1356:	08 95       	ret

00001358 <TM0_stop>:



void TM0_stop(void)
{
		CLR_BIT(TCCR0,0);
    1358:	83 b7       	in	r24, 0x33	; 51
    135a:	8e 7f       	andi	r24, 0xFE	; 254
    135c:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,1);
    135e:	83 b7       	in	r24, 0x33	; 51
    1360:	8d 7f       	andi	r24, 0xFD	; 253
    1362:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,2);	
    1364:	83 b7       	in	r24, 0x33	; 51
    1366:	8b 7f       	andi	r24, 0xFB	; 251
    1368:	83 bf       	out	0x33, r24	; 51
}
    136a:	08 95       	ret

0000136c <TMR0_setCompareMatchValue>:



void TMR0_setCompareMatchValue(u8 compareValue)
{
	OCR0= compareValue;
    136c:	8c bf       	out	0x3c, r24	; 60
}
    136e:	08 95       	ret

00001370 <TMR0_setDelayms_usingCTC>:

void TMR0_setDelayms_usingCTC(u16 delay_ms)
{
	
	// under condition tick time 4 Ms(prescaler 64)
	OCR0=249;
    1370:	29 ef       	ldi	r18, 0xF9	; 249
    1372:	2c bf       	out	0x3c, r18	; 60
	private_ctcCounter=delay_ms;
    1374:	90 93 9e 00 	sts	0x009E, r25
    1378:	80 93 9d 00 	sts	0x009D, r24
	
	
}
    137c:	08 95       	ret

0000137e <TM0_setCALLbACK>:



void TM0_setCALLbACK(void(*ptr)(void))
{
	if(ptr !=NULL)
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	21 f0       	breq	.+8      	; 0x138a <TM0_setCALLbACK+0xc>
	p=ptr;
    1382:	90 93 a0 00 	sts	0x00A0, r25
    1386:	80 93 9f 00 	sts	0x009F, r24
    138a:	08 95       	ret

0000138c <__vector_11>:



void  __vector_11(void) __attribute__((signal));
void  __vector_11(void)
{
    138c:	1f 92       	push	r1
    138e:	0f 92       	push	r0
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	0f 92       	push	r0
    1394:	11 24       	eor	r1, r1
    1396:	2f 93       	push	r18
    1398:	3f 93       	push	r19
    139a:	4f 93       	push	r20
    139c:	5f 93       	push	r21
    139e:	6f 93       	push	r22
    13a0:	7f 93       	push	r23
    13a2:	8f 93       	push	r24
    13a4:	9f 93       	push	r25
    13a6:	af 93       	push	r26
    13a8:	bf 93       	push	r27
    13aa:	ef 93       	push	r30
    13ac:	ff 93       	push	r31
	static u16 OVFcounter=0;
	OVFcounter++;
    13ae:	80 91 a1 00 	lds	r24, 0x00A1
    13b2:	90 91 a2 00 	lds	r25, 0x00A2
    13b6:	01 96       	adiw	r24, 0x01	; 1
    13b8:	90 93 a2 00 	sts	0x00A2, r25
    13bc:	80 93 a1 00 	sts	0x00A1, r24

	p();
    13c0:	e0 91 9f 00 	lds	r30, 0x009F
    13c4:	f0 91 a0 00 	lds	r31, 0x00A0
    13c8:	09 95       	icall
	
}
    13ca:	ff 91       	pop	r31
    13cc:	ef 91       	pop	r30
    13ce:	bf 91       	pop	r27
    13d0:	af 91       	pop	r26
    13d2:	9f 91       	pop	r25
    13d4:	8f 91       	pop	r24
    13d6:	7f 91       	pop	r23
    13d8:	6f 91       	pop	r22
    13da:	5f 91       	pop	r21
    13dc:	4f 91       	pop	r20
    13de:	3f 91       	pop	r19
    13e0:	2f 91       	pop	r18
    13e2:	0f 90       	pop	r0
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	0f 90       	pop	r0
    13e8:	1f 90       	pop	r1
    13ea:	18 95       	reti

000013ec <__vector_10>:



void  __vector_10(void) __attribute__((signal));
void  __vector_10(void)
{
    13ec:	1f 92       	push	r1
    13ee:	0f 92       	push	r0
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	0f 92       	push	r0
    13f4:	11 24       	eor	r1, r1
    13f6:	2f 93       	push	r18
    13f8:	3f 93       	push	r19
    13fa:	4f 93       	push	r20
    13fc:	5f 93       	push	r21
    13fe:	6f 93       	push	r22
    1400:	7f 93       	push	r23
    1402:	8f 93       	push	r24
    1404:	9f 93       	push	r25
    1406:	af 93       	push	r26
    1408:	bf 93       	push	r27
    140a:	ef 93       	push	r30
    140c:	ff 93       	push	r31
	static u16 CTCcounter=0;
	CTCcounter++;
    140e:	80 91 a3 00 	lds	r24, 0x00A3
    1412:	90 91 a4 00 	lds	r25, 0x00A4
    1416:	01 96       	adiw	r24, 0x01	; 1
    1418:	90 93 a4 00 	sts	0x00A4, r25
    141c:	80 93 a3 00 	sts	0x00A3, r24
	if(CTCcounter == private_ctcCounter)
    1420:	20 91 9d 00 	lds	r18, 0x009D
    1424:	30 91 9e 00 	lds	r19, 0x009E
    1428:	82 17       	cp	r24, r18
    142a:	93 07       	cpc	r25, r19
    142c:	49 f4       	brne	.+18     	; 0x1440 <__vector_10+0x54>
	{
		CTCcounter=0;
    142e:	10 92 a4 00 	sts	0x00A4, r1
    1432:	10 92 a3 00 	sts	0x00A3, r1
		p();
    1436:	e0 91 9f 00 	lds	r30, 0x009F
    143a:	f0 91 a0 00 	lds	r31, 0x00A0
    143e:	09 95       	icall
	}
	
}
    1440:	ff 91       	pop	r31
    1442:	ef 91       	pop	r30
    1444:	bf 91       	pop	r27
    1446:	af 91       	pop	r26
    1448:	9f 91       	pop	r25
    144a:	8f 91       	pop	r24
    144c:	7f 91       	pop	r23
    144e:	6f 91       	pop	r22
    1450:	5f 91       	pop	r21
    1452:	4f 91       	pop	r20
    1454:	3f 91       	pop	r19
    1456:	2f 91       	pop	r18
    1458:	0f 90       	pop	r0
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	0f 90       	pop	r0
    145e:	1f 90       	pop	r1
    1460:	18 95       	reti

00001462 <TMR0_setDutyCycle>:


void TMR0_setDutyCycle(u8 duty)
{
	
	OCR0= ((duty/100)*256)-1;
    1462:	8f ef       	ldi	r24, 0xFF	; 255
    1464:	8c bf       	out	0x3c, r24	; 60
    1466:	08 95       	ret

00001468 <TMR1_init>:


void TMR1_init()
{
	/// choose normal mode
		CLR_BIT(TCCR1A,WGM10);
    1468:	8f b5       	in	r24, 0x2f	; 47
    146a:	8e 7f       	andi	r24, 0xFE	; 254
    146c:	8f bd       	out	0x2f, r24	; 47
		CLR_BIT(TCCR1A,WGM11);
    146e:	8f b5       	in	r24, 0x2f	; 47
    1470:	8d 7f       	andi	r24, 0xFD	; 253
    1472:	8f bd       	out	0x2f, r24	; 47
		CLR_BIT(TCCR1B,WGM12);
    1474:	8e b5       	in	r24, 0x2e	; 46
    1476:	87 7f       	andi	r24, 0xF7	; 247
    1478:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TCCR1B,WGM13);
    147a:	8e b5       	in	r24, 0x2e	; 46
    147c:	8f 7e       	andi	r24, 0xEF	; 239
    147e:	8e bd       	out	0x2e, r24	; 46
		
		// prescaler
		SET_BIT(TCCR1B,0);
    1480:	8e b5       	in	r24, 0x2e	; 46
    1482:	81 60       	ori	r24, 0x01	; 1
    1484:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B,1);
    1486:	8e b5       	in	r24, 0x2e	; 46
    1488:	82 60       	ori	r24, 0x02	; 2
    148a:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TCCR1B,2);
    148c:	8e b5       	in	r24, 0x2e	; 46
    148e:	8b 7f       	andi	r24, 0xFB	; 251
    1490:	8e bd       	out	0x2e, r24	; 46
	/// select preload 
	TCNT1_u16=0;
    1492:	1d bc       	out	0x2d, r1	; 45
    1494:	1c bc       	out	0x2c, r1	; 44
	// enable interrrupt
	SET_BIT(TIMSK,2);
    1496:	89 b7       	in	r24, 0x39	; 57
    1498:	84 60       	ori	r24, 0x04	; 4
    149a:	89 bf       	out	0x39, r24	; 57
	SET_BIT(TCCR1A,COM1A1);	
	
	// total period time =20 ms
	//ICR1_u16=4999;
	*/
}
    149c:	08 95       	ret

0000149e <TMR1_start>:


void TMR1_start()
{
	
		SET_BIT(TCCR1B,CS10);
    149e:	8e b5       	in	r24, 0x2e	; 46
    14a0:	81 60       	ori	r24, 0x01	; 1
    14a2:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B,CS11);
    14a4:	8e b5       	in	r24, 0x2e	; 46
    14a6:	82 60       	ori	r24, 0x02	; 2
    14a8:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TCCR1B,CS12);
    14aa:	8e b5       	in	r24, 0x2e	; 46
    14ac:	8b 7f       	andi	r24, 0xFB	; 251
    14ae:	8e bd       	out	0x2e, r24	; 46
}
    14b0:	08 95       	ret

000014b2 <TMR1_stop>:



void TMR1_stop()
{
			CLR_BIT(TCCR1B,CS10);
    14b2:	8e b5       	in	r24, 0x2e	; 46
    14b4:	8e 7f       	andi	r24, 0xFE	; 254
    14b6:	8e bd       	out	0x2e, r24	; 46
			CLR_BIT(TCCR1B,CS11);
    14b8:	8e b5       	in	r24, 0x2e	; 46
    14ba:	8d 7f       	andi	r24, 0xFD	; 253
    14bc:	8e bd       	out	0x2e, r24	; 46
			CLR_BIT(TCCR1B,CS12);
    14be:	8e b5       	in	r24, 0x2e	; 46
    14c0:	8b 7f       	andi	r24, 0xFB	; 251
    14c2:	8e bd       	out	0x2e, r24	; 46
	
}
    14c4:	08 95       	ret

000014c6 <TMR1_setCompareMatchValueA>:



void TMR1_setCompareMatchValueA(u16 compareValue)
{
	OCR1A_u16 = compareValue;
    14c6:	9b bd       	out	0x2b, r25	; 43
    14c8:	8a bd       	out	0x2a, r24	; 42
}
    14ca:	08 95       	ret

000014cc <TMR1_setFastPWM_usingMode14>:




void TMR1_setFastPWM_usingMode14(f32 dutyCycle , u16 frequency)
{
    14cc:	cf 92       	push	r12
    14ce:	df 92       	push	r13
    14d0:	ef 92       	push	r14
    14d2:	ff 92       	push	r15
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	6b 01       	movw	r12, r22
    14da:	7c 01       	movw	r14, r24
    14dc:	ea 01       	movw	r28, r20
	if (dutyCycle<=100)
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	48 ec       	ldi	r20, 0xC8	; 200
    14e4:	52 e4       	ldi	r21, 0x42	; 66
    14e6:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__cmpsf2>
    14ea:	18 16       	cp	r1, r24
    14ec:	5c f1       	brlt	.+86     	; 0x1544 <TMR1_setFastPWM_usingMode14+0x78>
	{
		
	ICR1_u16 =((1000000UL/frequency)/4)-1;
    14ee:	9e 01       	movw	r18, r28
    14f0:	40 e0       	ldi	r20, 0x00	; 0
    14f2:	50 e0       	ldi	r21, 0x00	; 0
    14f4:	60 e9       	ldi	r22, 0x90	; 144
    14f6:	70 ed       	ldi	r23, 0xD0	; 208
    14f8:	83 e0       	ldi	r24, 0x03	; 3
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__udivmodsi4>
    1500:	21 50       	subi	r18, 0x01	; 1
    1502:	30 40       	sbci	r19, 0x00	; 0
    1504:	37 bd       	out	0x27, r19	; 39
    1506:	26 bd       	out	0x26, r18	; 38
	OCR1A_u16=((dutyCycle*(ICR1_u16+1))/100.0)-1;
    1508:	66 b5       	in	r22, 0x26	; 38
    150a:	77 b5       	in	r23, 0x27	; 39
    150c:	6f 5f       	subi	r22, 0xFF	; 255
    150e:	7f 4f       	sbci	r23, 0xFF	; 255
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__floatunsisf>
    1518:	a7 01       	movw	r20, r14
    151a:	96 01       	movw	r18, r12
    151c:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__mulsf3>
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	48 ec       	ldi	r20, 0xC8	; 200
    1526:	52 e4       	ldi	r21, 0x42	; 66
    1528:	0e 94 b7 0c 	call	0x196e	; 0x196e <__divsf3>
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e8       	ldi	r20, 0x80	; 128
    1532:	5f e3       	ldi	r21, 0x3F	; 63
    1534:	0e 94 4e 0c 	call	0x189c	; 0x189c <__subsf3>
    1538:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__fixunssfsi>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	9b bd       	out	0x2b, r25	; 43
    1542:	8a bd       	out	0x2a, r24	; 42
	}	
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	ff 90       	pop	r15
    154a:	ef 90       	pop	r14
    154c:	df 90       	pop	r13
    154e:	cf 90       	pop	r12
    1550:	08 95       	ret

00001552 <TMR2_init>:
	#endif

	#elif TMR2_MODE == TMR2_PHASECORRECT_MODE
	
	/*Select mode = Phase Correct MODE */
	SET_BIT(TCCR2,WGM20);
    1552:	85 b5       	in	r24, 0x25	; 37
    1554:	80 64       	ori	r24, 0x40	; 64
    1556:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,WGM21); 
    1558:	85 b5       	in	r24, 0x25	; 37
    155a:	87 7f       	andi	r24, 0xF7	; 247
    155c:	85 bd       	out	0x25, r24	; 37
	/* non inverting */
	CLR_BIT(TCCR2,COM20);
	SET_BIT(TCCR2,COM21);
	#elif TMR2_SelectFastPWM_Mode == TMR2_FastPWM_Inverting_Mode
	/*  inverting */
	SET_BIT(TCCR2,COM20);
    155e:	85 b5       	in	r24, 0x25	; 37
    1560:	80 61       	ori	r24, 0x10	; 16
    1562:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,COM21);
    1564:	85 b5       	in	r24, 0x25	; 37
    1566:	80 62       	ori	r24, 0x20	; 32
    1568:	85 bd       	out	0x25, r24	; 37
	#endif

	#endif
	
}
    156a:	08 95       	ret

0000156c <TMR2_Start>:
	SET_BIT(TCCR2,CS20);
	SET_BIT(TCCR2,CS21);
	CLR_BIT(TCCR2,CS22);
	
#elif TMR2_PRESCALLER == TMR2_PRESCALLER_64
	CLR_BIT(TCCR2,CS20);
    156c:	85 b5       	in	r24, 0x25	; 37
    156e:	8e 7f       	andi	r24, 0xFE	; 254
    1570:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,CS21);
    1572:	85 b5       	in	r24, 0x25	; 37
    1574:	8d 7f       	andi	r24, 0xFD	; 253
    1576:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS22);
    1578:	85 b5       	in	r24, 0x25	; 37
    157a:	84 60       	ori	r24, 0x04	; 4
    157c:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS20);
	SET_BIT(TCCR2,CS21);
	SET_BIT(TCCR2,CS22);
	
#endif	
}
    157e:	08 95       	ret

00001580 <TMR2_Stop>:

void TMR2_Stop()
{
	CLR_BIT(TCCR2,CS20);
    1580:	85 b5       	in	r24, 0x25	; 37
    1582:	8e 7f       	andi	r24, 0xFE	; 254
    1584:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,CS21);
    1586:	85 b5       	in	r24, 0x25	; 37
    1588:	8d 7f       	andi	r24, 0xFD	; 253
    158a:	85 bd       	out	0x25, r24	; 37
    CLR_BIT(TCCR2,CS22);
    158c:	85 b5       	in	r24, 0x25	; 37
    158e:	8b 7f       	andi	r24, 0xFB	; 251
    1590:	85 bd       	out	0x25, r24	; 37
}	
    1592:	08 95       	ret

00001594 <TMR2_SetDelay_ms_UsingCTC>:

void TMR2_SetDelay_ms_UsingCTC(u16 Delay_ms)
{
	//	Under Condition Tick Time = 4MS   -> Prescaller 64
	
	OCR2 = 249 ;
    1594:	29 ef       	ldi	r18, 0xF9	; 249
    1596:	23 bd       	out	0x23, r18	; 35
	Private_CTC_Counter=Delay_ms;
    1598:	90 93 a6 00 	sts	0x00A6, r25
    159c:	80 93 a5 00 	sts	0x00A5, r24
}
    15a0:	08 95       	ret

000015a2 <TMR2_SetDutyCycleValue_FastPWM>:
	#if TMR2_SelectFastPWM_Mode == TMR2_FastPWM_NonInverting_Mode
	/* non inverting */
	OCR2=((DutyCycle/100)*256)-1;          //TAKE CARE OVERFLOW
	#elif TMR2_SelectFastPWM_Mode == TMR2_FastPWM_Inverting_Mode
	/*  inverting */
	OCR2=(255-(256*(DutyCycle/100)));          //TAKE CARE OVERFLOW
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	48 ec       	ldi	r20, 0xC8	; 200
    15a8:	52 e4       	ldi	r21, 0x42	; 66
    15aa:	0e 94 b7 0c 	call	0x196e	; 0x196e <__divsf3>
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	40 e8       	ldi	r20, 0x80	; 128
    15b4:	53 e4       	ldi	r21, 0x43	; 67
    15b6:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__mulsf3>
    15ba:	9b 01       	movw	r18, r22
    15bc:	ac 01       	movw	r20, r24
    15be:	60 e0       	ldi	r22, 0x00	; 0
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	8f e7       	ldi	r24, 0x7F	; 127
    15c4:	93 e4       	ldi	r25, 0x43	; 67
    15c6:	0e 94 4e 0c 	call	0x189c	; 0x189c <__subsf3>
    15ca:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__fixunssfsi>
    15ce:	63 bd       	out	0x23, r22	; 35
	#endif
}
    15d0:	08 95       	ret

000015d2 <TMR2_SetDutyCycleValue_PhaseCorrect>:
	#if TMR2_SelectPaseCorrect_Mode == TMR2_PaseCorrect_NonInverting_Mode
	/* non inverting */
	OCR2=((DutyCycle/100)*256);          //TAKE CARE OVERFLOW
	#elif TMR2_SelectPaseCorrect_Mode == TMR2_PaseCorrect_Inverting_Mode
	/*  inverting */
	OCR2=(256-(256*(DutyCycle/100)));          //TAKE CARE OVERFLOW
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	48 ec       	ldi	r20, 0xC8	; 200
    15d8:	52 e4       	ldi	r21, 0x42	; 66
    15da:	0e 94 b7 0c 	call	0x196e	; 0x196e <__divsf3>
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e8       	ldi	r20, 0x80	; 128
    15e4:	53 e4       	ldi	r21, 0x43	; 67
    15e6:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__mulsf3>
    15ea:	9b 01       	movw	r18, r22
    15ec:	ac 01       	movw	r20, r24
    15ee:	60 e0       	ldi	r22, 0x00	; 0
    15f0:	70 e0       	ldi	r23, 0x00	; 0
    15f2:	80 e8       	ldi	r24, 0x80	; 128
    15f4:	93 e4       	ldi	r25, 0x43	; 67
    15f6:	0e 94 4e 0c 	call	0x189c	; 0x189c <__subsf3>
    15fa:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__fixunssfsi>
    15fe:	63 bd       	out	0x23, r22	; 35
	#endif
}
    1600:	08 95       	ret

00001602 <TMR2_SetCallBackOverFlow>:
void TMR2_SetCallBackOverFlow(void (*PtrToFunc)(void))
{
	if( PtrToFunc!=NULL )
    1602:	00 97       	sbiw	r24, 0x00	; 0
    1604:	21 f0       	breq	.+8      	; 0x160e <TMR2_SetCallBackOverFlow+0xc>
	{
		PRIVATE_PtrCallBackOverFlowFlag=PtrToFunc;
    1606:	90 93 a8 00 	sts	0x00A8, r25
    160a:	80 93 a7 00 	sts	0x00A7, r24
    160e:	08 95       	ret

00001610 <TMR2_SetCallBackCTC>:
	}
}

void TMR2_SetCallBackCTC(void (*PtrToFunc)(void))
{
	if( PtrToFunc!=NULL )
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	21 f0       	breq	.+8      	; 0x161c <TMR2_SetCallBackCTC+0xc>
	{
		PRIVATE_PtrCallBackCTC=PtrToFunc;
    1614:	90 93 aa 00 	sts	0x00AA, r25
    1618:	80 93 a9 00 	sts	0x00A9, r24
    161c:	08 95       	ret

0000161e <__vector_5>:
	}
}

void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
    161e:	1f 92       	push	r1
    1620:	0f 92       	push	r0
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	0f 92       	push	r0
    1626:	11 24       	eor	r1, r1
    1628:	2f 93       	push	r18
    162a:	3f 93       	push	r19
    162c:	4f 93       	push	r20
    162e:	5f 93       	push	r21
    1630:	6f 93       	push	r22
    1632:	7f 93       	push	r23
    1634:	8f 93       	push	r24
    1636:	9f 93       	push	r25
    1638:	af 93       	push	r26
    163a:	bf 93       	push	r27
    163c:	ef 93       	push	r30
    163e:	ff 93       	push	r31
	static u16 OverFlowCounter =0;
	OverFlowCounter++;
    1640:	80 91 ab 00 	lds	r24, 0x00AB
    1644:	90 91 ac 00 	lds	r25, 0x00AC
    1648:	01 96       	adiw	r24, 0x01	; 1
    164a:	90 93 ac 00 	sts	0x00AC, r25
    164e:	80 93 ab 00 	sts	0x00AB, r24
	
	if( TMR2_OverFlowCounter == OverFlowCounter)
    1652:	23 e0       	ldi	r18, 0x03	; 3
    1654:	81 3d       	cpi	r24, 0xD1	; 209
    1656:	92 07       	cpc	r25, r18
    1658:	69 f4       	brne	.+26     	; 0x1674 <__vector_5+0x56>
	{
		OverFlowCounter = 0;
    165a:	10 92 ac 00 	sts	0x00AC, r1
    165e:	10 92 ab 00 	sts	0x00AB, r1
		TCNT2 = TMR2_PreloadValue;
    1662:	81 e7       	ldi	r24, 0x71	; 113
    1664:	84 bd       	out	0x24, r24	; 36
		if (PRIVATE_PtrCallBackOverFlowFlag != NULL)
    1666:	e0 91 a7 00 	lds	r30, 0x00A7
    166a:	f0 91 a8 00 	lds	r31, 0x00A8
    166e:	30 97       	sbiw	r30, 0x00	; 0
    1670:	09 f0       	breq	.+2      	; 0x1674 <__vector_5+0x56>
		{
			PRIVATE_PtrCallBackOverFlowFlag();
    1672:	09 95       	icall
		}
	}
	
}
    1674:	ff 91       	pop	r31
    1676:	ef 91       	pop	r30
    1678:	bf 91       	pop	r27
    167a:	af 91       	pop	r26
    167c:	9f 91       	pop	r25
    167e:	8f 91       	pop	r24
    1680:	7f 91       	pop	r23
    1682:	6f 91       	pop	r22
    1684:	5f 91       	pop	r21
    1686:	4f 91       	pop	r20
    1688:	3f 91       	pop	r19
    168a:	2f 91       	pop	r18
    168c:	0f 90       	pop	r0
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	0f 90       	pop	r0
    1692:	1f 90       	pop	r1
    1694:	18 95       	reti

00001696 <__vector_4>:

void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
    1696:	1f 92       	push	r1
    1698:	0f 92       	push	r0
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	0f 92       	push	r0
    169e:	11 24       	eor	r1, r1
    16a0:	2f 93       	push	r18
    16a2:	3f 93       	push	r19
    16a4:	4f 93       	push	r20
    16a6:	5f 93       	push	r21
    16a8:	6f 93       	push	r22
    16aa:	7f 93       	push	r23
    16ac:	8f 93       	push	r24
    16ae:	9f 93       	push	r25
    16b0:	af 93       	push	r26
    16b2:	bf 93       	push	r27
    16b4:	ef 93       	push	r30
    16b6:	ff 93       	push	r31
	static u16 CTC_Counter =0;
	CTC_Counter++;
    16b8:	80 91 ad 00 	lds	r24, 0x00AD
    16bc:	90 91 ae 00 	lds	r25, 0x00AE
    16c0:	01 96       	adiw	r24, 0x01	; 1
    16c2:	90 93 ae 00 	sts	0x00AE, r25
    16c6:	80 93 ad 00 	sts	0x00AD, r24
	
	if( Private_CTC_Counter == CTC_Counter)
    16ca:	20 91 a5 00 	lds	r18, 0x00A5
    16ce:	30 91 a6 00 	lds	r19, 0x00A6
    16d2:	82 17       	cp	r24, r18
    16d4:	93 07       	cpc	r25, r19
    16d6:	59 f4       	brne	.+22     	; 0x16ee <__vector_4+0x58>
	{
		CTC_Counter = 0;
    16d8:	10 92 ae 00 	sts	0x00AE, r1
    16dc:	10 92 ad 00 	sts	0x00AD, r1
		if (PRIVATE_PtrCallBackCTC != NULL)
    16e0:	e0 91 a9 00 	lds	r30, 0x00A9
    16e4:	f0 91 aa 00 	lds	r31, 0x00AA
    16e8:	30 97       	sbiw	r30, 0x00	; 0
    16ea:	09 f0       	breq	.+2      	; 0x16ee <__vector_4+0x58>
		{
			PRIVATE_PtrCallBackCTC();
    16ec:	09 95       	icall
		}
	}
    16ee:	ff 91       	pop	r31
    16f0:	ef 91       	pop	r30
    16f2:	bf 91       	pop	r27
    16f4:	af 91       	pop	r26
    16f6:	9f 91       	pop	r25
    16f8:	8f 91       	pop	r24
    16fa:	7f 91       	pop	r23
    16fc:	6f 91       	pop	r22
    16fe:	5f 91       	pop	r21
    1700:	4f 91       	pop	r20
    1702:	3f 91       	pop	r19
    1704:	2f 91       	pop	r18
    1706:	0f 90       	pop	r0
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	0f 90       	pop	r0
    170c:	1f 90       	pop	r1
    170e:	18 95       	reti

00001710 <UART_init>:

#define UART_UBBR_VALUE (((F_CPU)/(UART_SelectedBoudRate*16UL))-1)

void UART_init (void)
{
	CLR_BIT(UCSRB,UCSZ2);
    1710:	52 98       	cbi	0x0a, 2	; 10
	CLR_BIT(UCSRC_Value,UPM0);
	CLR_BIT(UCSRC_Value,UPM1);
	CLR_BIT(UCSRC_Value,UMSEL);
	SET_BIT(UCSRC_Value,URSEL);
	
	UCSRC=UCSRC_Value;      // Set UART Mode: 8-bit data, 1 stop bit, no parity (0x86)
    1712:	86 e8       	ldi	r24, 0x86	; 134
    1714:	80 bd       	out	0x20, r24	; 32
	
	UBRRL=UART_UBBR_VALUE;     // Set baud rate = 9600 -> 103;
    1716:	87 e6       	ldi	r24, 0x67	; 103
    1718:	89 b9       	out	0x09, r24	; 9
    UBRRH = (UART_UBBR_VALUE >> 8);
    171a:	10 bc       	out	0x20, r1	; 32
	
	CLR_BIT(UCSRA,U2X);   // Stop double speed
    171c:	59 98       	cbi	0x0b, 1	; 11
	
	
	SET_BIT(UCSRB,RXCIE);  // Enable Rx Interrupt 
    171e:	57 9a       	sbi	0x0a, 7	; 10
	SET_BIT(UCSRB,TXCIE);  // Enable Tx Interrupt 
    1720:	56 9a       	sbi	0x0a, 6	; 10
	SET_BIT(UCSRB,UDRIE);  // Enable UDR Interrupt 
    1722:	55 9a       	sbi	0x0a, 5	; 10
	
	SET_BIT(UCSRB,TXEN);  // Enable Tx
    1724:	53 9a       	sbi	0x0a, 3	; 10
	SET_BIT(UCSRB,RXEN);  // Enable Rx
    1726:	54 9a       	sbi	0x0a, 4	; 10
}
    1728:	08 95       	ret

0000172a <UART_ReceiveChar>:

void UART_ReceiveChar (u8* ReceiveData)
{
	if(ReceiveData!=NULL)
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	29 f0       	breq	.+10     	; 0x1738 <UART_ReceiveChar+0xe>
	{
		while(0 == GET_BIT(UCSRA,RXC));
    172e:	5f 9b       	sbis	0x0b, 7	; 11
    1730:	fe cf       	rjmp	.-4      	; 0x172e <UART_ReceiveChar+0x4>
		*ReceiveData=UDR;
    1732:	2c b1       	in	r18, 0x0c	; 12
    1734:	fc 01       	movw	r30, r24
    1736:	20 83       	st	Z, r18
    1738:	08 95       	ret

0000173a <UART_TransmiteChar>:



void UART_TransmiteChar(u8 TransmiteData)
{
	UDR=TransmiteData;
    173a:	8c b9       	out	0x0c, r24	; 12
	while(0 == GET_BIT(UCSRA,UDRE));
    173c:	8b b1       	in	r24, 0x0b	; 11
    173e:	85 ff       	sbrs	r24, 5
    1740:	fd cf       	rjmp	.-6      	; 0x173c <UART_TransmiteChar+0x2>
}
    1742:	08 95       	ret

00001744 <UART_TransmiteString>:

void UART_TransmiteString(u8 *TransmiteData)
{
    1744:	0f 93       	push	r16
    1746:	1f 93       	push	r17
    1748:	cf 93       	push	r28
    174a:	8c 01       	movw	r16, r24
	u8 Index=0;

	while (TransmiteData[Index]!='\0')		/* Send string till null */
    174c:	fc 01       	movw	r30, r24
    174e:	80 81       	ld	r24, Z
    1750:	88 23       	and	r24, r24
    1752:	51 f0       	breq	.+20     	; 0x1768 <UART_TransmiteString+0x24>
	while(0 == GET_BIT(UCSRA,UDRE));
}

void UART_TransmiteString(u8 *TransmiteData)
{
	u8 Index=0;
    1754:	c0 e0       	ldi	r28, 0x00	; 0

	while (TransmiteData[Index]!='\0')		/* Send string till null */
	{
		UART_TransmiteChar(TransmiteData[Index]);
    1756:	0e 94 9d 0b 	call	0x173a	; 0x173a <UART_TransmiteChar>
		Index++;
    175a:	cf 5f       	subi	r28, 0xFF	; 255

void UART_TransmiteString(u8 *TransmiteData)
{
	u8 Index=0;

	while (TransmiteData[Index]!='\0')		/* Send string till null */
    175c:	f8 01       	movw	r30, r16
    175e:	ec 0f       	add	r30, r28
    1760:	f1 1d       	adc	r31, r1
    1762:	80 81       	ld	r24, Z
    1764:	88 23       	and	r24, r24
    1766:	b9 f7       	brne	.-18     	; 0x1756 <UART_TransmiteString+0x12>
	{
		UART_TransmiteChar(TransmiteData[Index]);
		Index++;
	}
}
    1768:	cf 91       	pop	r28
    176a:	1f 91       	pop	r17
    176c:	0f 91       	pop	r16
    176e:	08 95       	ret

00001770 <UART_CallBack_RXC>:

void UART_CallBack_RXC (void(*PtrFunction)(void))
{
	Private_UART_CallBack_RXC=PtrFunction;
    1770:	90 93 b0 00 	sts	0x00B0, r25
    1774:	80 93 af 00 	sts	0x00AF, r24
}
    1778:	08 95       	ret

0000177a <UART_CallBack_UDRE>:

void UART_CallBack_UDRE(void(*PtrFunction)(void))
{
	Private_UART_CallBack_UDRE=PtrFunction;
    177a:	90 93 b2 00 	sts	0x00B2, r25
    177e:	80 93 b1 00 	sts	0x00B1, r24
}
    1782:	08 95       	ret

00001784 <UART_CallBack_TXC>:

void UART_CallBack_TXC(void(*PtrFunction)(void))
{
	Private_UART_CallBack_TXC=PtrFunction;
    1784:	90 93 b4 00 	sts	0x00B4, r25
    1788:	80 93 b3 00 	sts	0x00B3, r24
}
    178c:	08 95       	ret

0000178e <__vector_13>:


// Receive Complete Interrupt Request
void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    178e:	1f 92       	push	r1
    1790:	0f 92       	push	r0
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	0f 92       	push	r0
    1796:	11 24       	eor	r1, r1
    1798:	2f 93       	push	r18
    179a:	3f 93       	push	r19
    179c:	4f 93       	push	r20
    179e:	5f 93       	push	r21
    17a0:	6f 93       	push	r22
    17a2:	7f 93       	push	r23
    17a4:	8f 93       	push	r24
    17a6:	9f 93       	push	r25
    17a8:	af 93       	push	r26
    17aa:	bf 93       	push	r27
    17ac:	ef 93       	push	r30
    17ae:	ff 93       	push	r31
	if (Private_UART_CallBack_RXC!=NULL)
    17b0:	e0 91 af 00 	lds	r30, 0x00AF
    17b4:	f0 91 b0 00 	lds	r31, 0x00B0
    17b8:	30 97       	sbiw	r30, 0x00	; 0
    17ba:	09 f0       	breq	.+2      	; 0x17be <__vector_13+0x30>
	{
		Private_UART_CallBack_RXC();
    17bc:	09 95       	icall
	}
}
    17be:	ff 91       	pop	r31
    17c0:	ef 91       	pop	r30
    17c2:	bf 91       	pop	r27
    17c4:	af 91       	pop	r26
    17c6:	9f 91       	pop	r25
    17c8:	8f 91       	pop	r24
    17ca:	7f 91       	pop	r23
    17cc:	6f 91       	pop	r22
    17ce:	5f 91       	pop	r21
    17d0:	4f 91       	pop	r20
    17d2:	3f 91       	pop	r19
    17d4:	2f 91       	pop	r18
    17d6:	0f 90       	pop	r0
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	0f 90       	pop	r0
    17dc:	1f 90       	pop	r1
    17de:	18 95       	reti

000017e0 <__vector_14>:

// Data Register Empty Interrupt Request
void __vector_14(void) __attribute__((signal));
void __vector_14()
{
    17e0:	1f 92       	push	r1
    17e2:	0f 92       	push	r0
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	0f 92       	push	r0
    17e8:	11 24       	eor	r1, r1
    17ea:	2f 93       	push	r18
    17ec:	3f 93       	push	r19
    17ee:	4f 93       	push	r20
    17f0:	5f 93       	push	r21
    17f2:	6f 93       	push	r22
    17f4:	7f 93       	push	r23
    17f6:	8f 93       	push	r24
    17f8:	9f 93       	push	r25
    17fa:	af 93       	push	r26
    17fc:	bf 93       	push	r27
    17fe:	ef 93       	push	r30
    1800:	ff 93       	push	r31
	if (Private_UART_CallBack_UDRE!=NULL)
    1802:	e0 91 b1 00 	lds	r30, 0x00B1
    1806:	f0 91 b2 00 	lds	r31, 0x00B2
    180a:	30 97       	sbiw	r30, 0x00	; 0
    180c:	09 f0       	breq	.+2      	; 0x1810 <__vector_14+0x30>
	{
		Private_UART_CallBack_UDRE();
    180e:	09 95       	icall
	} 
}
    1810:	ff 91       	pop	r31
    1812:	ef 91       	pop	r30
    1814:	bf 91       	pop	r27
    1816:	af 91       	pop	r26
    1818:	9f 91       	pop	r25
    181a:	8f 91       	pop	r24
    181c:	7f 91       	pop	r23
    181e:	6f 91       	pop	r22
    1820:	5f 91       	pop	r21
    1822:	4f 91       	pop	r20
    1824:	3f 91       	pop	r19
    1826:	2f 91       	pop	r18
    1828:	0f 90       	pop	r0
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	0f 90       	pop	r0
    182e:	1f 90       	pop	r1
    1830:	18 95       	reti

00001832 <__vector_15>:

// Transmit Complete Interrupt Request
void __vector_15(void) __attribute__((signal));
void __vector_15()
{
    1832:	1f 92       	push	r1
    1834:	0f 92       	push	r0
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	0f 92       	push	r0
    183a:	11 24       	eor	r1, r1
    183c:	2f 93       	push	r18
    183e:	3f 93       	push	r19
    1840:	4f 93       	push	r20
    1842:	5f 93       	push	r21
    1844:	6f 93       	push	r22
    1846:	7f 93       	push	r23
    1848:	8f 93       	push	r24
    184a:	9f 93       	push	r25
    184c:	af 93       	push	r26
    184e:	bf 93       	push	r27
    1850:	ef 93       	push	r30
    1852:	ff 93       	push	r31
	if (Private_UART_CallBack_TXC!=NULL)
    1854:	e0 91 b3 00 	lds	r30, 0x00B3
    1858:	f0 91 b4 00 	lds	r31, 0x00B4
    185c:	30 97       	sbiw	r30, 0x00	; 0
    185e:	09 f0       	breq	.+2      	; 0x1862 <__vector_15+0x30>
	{
		Private_UART_CallBack_TXC();
    1860:	09 95       	icall
	} 
    1862:	ff 91       	pop	r31
    1864:	ef 91       	pop	r30
    1866:	bf 91       	pop	r27
    1868:	af 91       	pop	r26
    186a:	9f 91       	pop	r25
    186c:	8f 91       	pop	r24
    186e:	7f 91       	pop	r23
    1870:	6f 91       	pop	r22
    1872:	5f 91       	pop	r21
    1874:	4f 91       	pop	r20
    1876:	3f 91       	pop	r19
    1878:	2f 91       	pop	r18
    187a:	0f 90       	pop	r0
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	0f 90       	pop	r0
    1880:	1f 90       	pop	r1
    1882:	18 95       	reti

00001884 <WATCHDOG_Enable>:

#include "../include/WATCHDOG_interface.h"
#include "../include/WATCHDOG_private.h"
void  WATCHDOG_Enable(u8 Time)
{
	WDTCR |=Time;
    1884:	91 b5       	in	r25, 0x21	; 33
    1886:	89 2b       	or	r24, r25
    1888:	81 bd       	out	0x21, r24	; 33
	WDTCR |=0x08;
    188a:	81 b5       	in	r24, 0x21	; 33
    188c:	88 60       	ori	r24, 0x08	; 8
    188e:	81 bd       	out	0x21, r24	; 33
}
    1890:	08 95       	ret

00001892 <WATCHDOG_Disable>:

void  WATCHDOG_Disable()
{
	WDTCR |= 0x18;
    1892:	81 b5       	in	r24, 0x21	; 33
    1894:	88 61       	ori	r24, 0x18	; 24
    1896:	81 bd       	out	0x21, r24	; 33
	WDTCR  =0x00;
    1898:	11 bc       	out	0x21, r1	; 33
    189a:	08 95       	ret

0000189c <__subsf3>:
    189c:	50 58       	subi	r21, 0x80	; 128

0000189e <__addsf3>:
    189e:	bb 27       	eor	r27, r27
    18a0:	aa 27       	eor	r26, r26
    18a2:	0e d0       	rcall	.+28     	; 0x18c0 <__addsf3x>
    18a4:	70 c1       	rjmp	.+736    	; 0x1b86 <__fp_round>
    18a6:	61 d1       	rcall	.+706    	; 0x1b6a <__fp_pscA>
    18a8:	30 f0       	brcs	.+12     	; 0x18b6 <__addsf3+0x18>
    18aa:	66 d1       	rcall	.+716    	; 0x1b78 <__fp_pscB>
    18ac:	20 f0       	brcs	.+8      	; 0x18b6 <__addsf3+0x18>
    18ae:	31 f4       	brne	.+12     	; 0x18bc <__addsf3+0x1e>
    18b0:	9f 3f       	cpi	r25, 0xFF	; 255
    18b2:	11 f4       	brne	.+4      	; 0x18b8 <__addsf3+0x1a>
    18b4:	1e f4       	brtc	.+6      	; 0x18bc <__addsf3+0x1e>
    18b6:	56 c1       	rjmp	.+684    	; 0x1b64 <__fp_nan>
    18b8:	0e f4       	brtc	.+2      	; 0x18bc <__addsf3+0x1e>
    18ba:	e0 95       	com	r30
    18bc:	e7 fb       	bst	r30, 7
    18be:	4c c1       	rjmp	.+664    	; 0x1b58 <__fp_inf>

000018c0 <__addsf3x>:
    18c0:	e9 2f       	mov	r30, r25
    18c2:	72 d1       	rcall	.+740    	; 0x1ba8 <__fp_split3>
    18c4:	80 f3       	brcs	.-32     	; 0x18a6 <__addsf3+0x8>
    18c6:	ba 17       	cp	r27, r26
    18c8:	62 07       	cpc	r22, r18
    18ca:	73 07       	cpc	r23, r19
    18cc:	84 07       	cpc	r24, r20
    18ce:	95 07       	cpc	r25, r21
    18d0:	18 f0       	brcs	.+6      	; 0x18d8 <__addsf3x+0x18>
    18d2:	71 f4       	brne	.+28     	; 0x18f0 <__addsf3x+0x30>
    18d4:	9e f5       	brtc	.+102    	; 0x193c <__addsf3x+0x7c>
    18d6:	8a c1       	rjmp	.+788    	; 0x1bec <__fp_zero>
    18d8:	0e f4       	brtc	.+2      	; 0x18dc <__addsf3x+0x1c>
    18da:	e0 95       	com	r30
    18dc:	0b 2e       	mov	r0, r27
    18de:	ba 2f       	mov	r27, r26
    18e0:	a0 2d       	mov	r26, r0
    18e2:	0b 01       	movw	r0, r22
    18e4:	b9 01       	movw	r22, r18
    18e6:	90 01       	movw	r18, r0
    18e8:	0c 01       	movw	r0, r24
    18ea:	ca 01       	movw	r24, r20
    18ec:	a0 01       	movw	r20, r0
    18ee:	11 24       	eor	r1, r1
    18f0:	ff 27       	eor	r31, r31
    18f2:	59 1b       	sub	r21, r25
    18f4:	99 f0       	breq	.+38     	; 0x191c <__addsf3x+0x5c>
    18f6:	59 3f       	cpi	r21, 0xF9	; 249
    18f8:	50 f4       	brcc	.+20     	; 0x190e <__addsf3x+0x4e>
    18fa:	50 3e       	cpi	r21, 0xE0	; 224
    18fc:	68 f1       	brcs	.+90     	; 0x1958 <__addsf3x+0x98>
    18fe:	1a 16       	cp	r1, r26
    1900:	f0 40       	sbci	r31, 0x00	; 0
    1902:	a2 2f       	mov	r26, r18
    1904:	23 2f       	mov	r18, r19
    1906:	34 2f       	mov	r19, r20
    1908:	44 27       	eor	r20, r20
    190a:	58 5f       	subi	r21, 0xF8	; 248
    190c:	f3 cf       	rjmp	.-26     	; 0x18f4 <__addsf3x+0x34>
    190e:	46 95       	lsr	r20
    1910:	37 95       	ror	r19
    1912:	27 95       	ror	r18
    1914:	a7 95       	ror	r26
    1916:	f0 40       	sbci	r31, 0x00	; 0
    1918:	53 95       	inc	r21
    191a:	c9 f7       	brne	.-14     	; 0x190e <__addsf3x+0x4e>
    191c:	7e f4       	brtc	.+30     	; 0x193c <__addsf3x+0x7c>
    191e:	1f 16       	cp	r1, r31
    1920:	ba 0b       	sbc	r27, r26
    1922:	62 0b       	sbc	r22, r18
    1924:	73 0b       	sbc	r23, r19
    1926:	84 0b       	sbc	r24, r20
    1928:	ba f0       	brmi	.+46     	; 0x1958 <__addsf3x+0x98>
    192a:	91 50       	subi	r25, 0x01	; 1
    192c:	a1 f0       	breq	.+40     	; 0x1956 <__addsf3x+0x96>
    192e:	ff 0f       	add	r31, r31
    1930:	bb 1f       	adc	r27, r27
    1932:	66 1f       	adc	r22, r22
    1934:	77 1f       	adc	r23, r23
    1936:	88 1f       	adc	r24, r24
    1938:	c2 f7       	brpl	.-16     	; 0x192a <__addsf3x+0x6a>
    193a:	0e c0       	rjmp	.+28     	; 0x1958 <__addsf3x+0x98>
    193c:	ba 0f       	add	r27, r26
    193e:	62 1f       	adc	r22, r18
    1940:	73 1f       	adc	r23, r19
    1942:	84 1f       	adc	r24, r20
    1944:	48 f4       	brcc	.+18     	; 0x1958 <__addsf3x+0x98>
    1946:	87 95       	ror	r24
    1948:	77 95       	ror	r23
    194a:	67 95       	ror	r22
    194c:	b7 95       	ror	r27
    194e:	f7 95       	ror	r31
    1950:	9e 3f       	cpi	r25, 0xFE	; 254
    1952:	08 f0       	brcs	.+2      	; 0x1956 <__addsf3x+0x96>
    1954:	b3 cf       	rjmp	.-154    	; 0x18bc <__addsf3+0x1e>
    1956:	93 95       	inc	r25
    1958:	88 0f       	add	r24, r24
    195a:	08 f0       	brcs	.+2      	; 0x195e <__addsf3x+0x9e>
    195c:	99 27       	eor	r25, r25
    195e:	ee 0f       	add	r30, r30
    1960:	97 95       	ror	r25
    1962:	87 95       	ror	r24
    1964:	08 95       	ret

00001966 <__cmpsf2>:
    1966:	d4 d0       	rcall	.+424    	; 0x1b10 <__fp_cmp>
    1968:	08 f4       	brcc	.+2      	; 0x196c <__cmpsf2+0x6>
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	08 95       	ret

0000196e <__divsf3>:
    196e:	0c d0       	rcall	.+24     	; 0x1988 <__divsf3x>
    1970:	0a c1       	rjmp	.+532    	; 0x1b86 <__fp_round>
    1972:	02 d1       	rcall	.+516    	; 0x1b78 <__fp_pscB>
    1974:	40 f0       	brcs	.+16     	; 0x1986 <__divsf3+0x18>
    1976:	f9 d0       	rcall	.+498    	; 0x1b6a <__fp_pscA>
    1978:	30 f0       	brcs	.+12     	; 0x1986 <__divsf3+0x18>
    197a:	21 f4       	brne	.+8      	; 0x1984 <__divsf3+0x16>
    197c:	5f 3f       	cpi	r21, 0xFF	; 255
    197e:	19 f0       	breq	.+6      	; 0x1986 <__divsf3+0x18>
    1980:	eb c0       	rjmp	.+470    	; 0x1b58 <__fp_inf>
    1982:	51 11       	cpse	r21, r1
    1984:	34 c1       	rjmp	.+616    	; 0x1bee <__fp_szero>
    1986:	ee c0       	rjmp	.+476    	; 0x1b64 <__fp_nan>

00001988 <__divsf3x>:
    1988:	0f d1       	rcall	.+542    	; 0x1ba8 <__fp_split3>
    198a:	98 f3       	brcs	.-26     	; 0x1972 <__divsf3+0x4>

0000198c <__divsf3_pse>:
    198c:	99 23       	and	r25, r25
    198e:	c9 f3       	breq	.-14     	; 0x1982 <__divsf3+0x14>
    1990:	55 23       	and	r21, r21
    1992:	b1 f3       	breq	.-20     	; 0x1980 <__divsf3+0x12>
    1994:	95 1b       	sub	r25, r21
    1996:	55 0b       	sbc	r21, r21
    1998:	bb 27       	eor	r27, r27
    199a:	aa 27       	eor	r26, r26
    199c:	62 17       	cp	r22, r18
    199e:	73 07       	cpc	r23, r19
    19a0:	84 07       	cpc	r24, r20
    19a2:	38 f0       	brcs	.+14     	; 0x19b2 <__divsf3_pse+0x26>
    19a4:	9f 5f       	subi	r25, 0xFF	; 255
    19a6:	5f 4f       	sbci	r21, 0xFF	; 255
    19a8:	22 0f       	add	r18, r18
    19aa:	33 1f       	adc	r19, r19
    19ac:	44 1f       	adc	r20, r20
    19ae:	aa 1f       	adc	r26, r26
    19b0:	a9 f3       	breq	.-22     	; 0x199c <__divsf3_pse+0x10>
    19b2:	33 d0       	rcall	.+102    	; 0x1a1a <__divsf3_pse+0x8e>
    19b4:	0e 2e       	mov	r0, r30
    19b6:	3a f0       	brmi	.+14     	; 0x19c6 <__divsf3_pse+0x3a>
    19b8:	e0 e8       	ldi	r30, 0x80	; 128
    19ba:	30 d0       	rcall	.+96     	; 0x1a1c <__divsf3_pse+0x90>
    19bc:	91 50       	subi	r25, 0x01	; 1
    19be:	50 40       	sbci	r21, 0x00	; 0
    19c0:	e6 95       	lsr	r30
    19c2:	00 1c       	adc	r0, r0
    19c4:	ca f7       	brpl	.-14     	; 0x19b8 <__divsf3_pse+0x2c>
    19c6:	29 d0       	rcall	.+82     	; 0x1a1a <__divsf3_pse+0x8e>
    19c8:	fe 2f       	mov	r31, r30
    19ca:	27 d0       	rcall	.+78     	; 0x1a1a <__divsf3_pse+0x8e>
    19cc:	66 0f       	add	r22, r22
    19ce:	77 1f       	adc	r23, r23
    19d0:	88 1f       	adc	r24, r24
    19d2:	bb 1f       	adc	r27, r27
    19d4:	26 17       	cp	r18, r22
    19d6:	37 07       	cpc	r19, r23
    19d8:	48 07       	cpc	r20, r24
    19da:	ab 07       	cpc	r26, r27
    19dc:	b0 e8       	ldi	r27, 0x80	; 128
    19de:	09 f0       	breq	.+2      	; 0x19e2 <__divsf3_pse+0x56>
    19e0:	bb 0b       	sbc	r27, r27
    19e2:	80 2d       	mov	r24, r0
    19e4:	bf 01       	movw	r22, r30
    19e6:	ff 27       	eor	r31, r31
    19e8:	93 58       	subi	r25, 0x83	; 131
    19ea:	5f 4f       	sbci	r21, 0xFF	; 255
    19ec:	2a f0       	brmi	.+10     	; 0x19f8 <__divsf3_pse+0x6c>
    19ee:	9e 3f       	cpi	r25, 0xFE	; 254
    19f0:	51 05       	cpc	r21, r1
    19f2:	68 f0       	brcs	.+26     	; 0x1a0e <__divsf3_pse+0x82>
    19f4:	b1 c0       	rjmp	.+354    	; 0x1b58 <__fp_inf>
    19f6:	fb c0       	rjmp	.+502    	; 0x1bee <__fp_szero>
    19f8:	5f 3f       	cpi	r21, 0xFF	; 255
    19fa:	ec f3       	brlt	.-6      	; 0x19f6 <__divsf3_pse+0x6a>
    19fc:	98 3e       	cpi	r25, 0xE8	; 232
    19fe:	dc f3       	brlt	.-10     	; 0x19f6 <__divsf3_pse+0x6a>
    1a00:	86 95       	lsr	r24
    1a02:	77 95       	ror	r23
    1a04:	67 95       	ror	r22
    1a06:	b7 95       	ror	r27
    1a08:	f7 95       	ror	r31
    1a0a:	9f 5f       	subi	r25, 0xFF	; 255
    1a0c:	c9 f7       	brne	.-14     	; 0x1a00 <__divsf3_pse+0x74>
    1a0e:	88 0f       	add	r24, r24
    1a10:	91 1d       	adc	r25, r1
    1a12:	96 95       	lsr	r25
    1a14:	87 95       	ror	r24
    1a16:	97 f9       	bld	r25, 7
    1a18:	08 95       	ret
    1a1a:	e1 e0       	ldi	r30, 0x01	; 1
    1a1c:	66 0f       	add	r22, r22
    1a1e:	77 1f       	adc	r23, r23
    1a20:	88 1f       	adc	r24, r24
    1a22:	bb 1f       	adc	r27, r27
    1a24:	62 17       	cp	r22, r18
    1a26:	73 07       	cpc	r23, r19
    1a28:	84 07       	cpc	r24, r20
    1a2a:	ba 07       	cpc	r27, r26
    1a2c:	20 f0       	brcs	.+8      	; 0x1a36 <__divsf3_pse+0xaa>
    1a2e:	62 1b       	sub	r22, r18
    1a30:	73 0b       	sbc	r23, r19
    1a32:	84 0b       	sbc	r24, r20
    1a34:	ba 0b       	sbc	r27, r26
    1a36:	ee 1f       	adc	r30, r30
    1a38:	88 f7       	brcc	.-30     	; 0x1a1c <__divsf3_pse+0x90>
    1a3a:	e0 95       	com	r30
    1a3c:	08 95       	ret

00001a3e <__fixunssfsi>:
    1a3e:	bc d0       	rcall	.+376    	; 0x1bb8 <__fp_splitA>
    1a40:	88 f0       	brcs	.+34     	; 0x1a64 <__fixunssfsi+0x26>
    1a42:	9f 57       	subi	r25, 0x7F	; 127
    1a44:	90 f0       	brcs	.+36     	; 0x1a6a <__fixunssfsi+0x2c>
    1a46:	b9 2f       	mov	r27, r25
    1a48:	99 27       	eor	r25, r25
    1a4a:	b7 51       	subi	r27, 0x17	; 23
    1a4c:	a0 f0       	brcs	.+40     	; 0x1a76 <__fixunssfsi+0x38>
    1a4e:	d1 f0       	breq	.+52     	; 0x1a84 <__fixunssfsi+0x46>
    1a50:	66 0f       	add	r22, r22
    1a52:	77 1f       	adc	r23, r23
    1a54:	88 1f       	adc	r24, r24
    1a56:	99 1f       	adc	r25, r25
    1a58:	1a f0       	brmi	.+6      	; 0x1a60 <__fixunssfsi+0x22>
    1a5a:	ba 95       	dec	r27
    1a5c:	c9 f7       	brne	.-14     	; 0x1a50 <__fixunssfsi+0x12>
    1a5e:	12 c0       	rjmp	.+36     	; 0x1a84 <__fixunssfsi+0x46>
    1a60:	b1 30       	cpi	r27, 0x01	; 1
    1a62:	81 f0       	breq	.+32     	; 0x1a84 <__fixunssfsi+0x46>
    1a64:	c3 d0       	rcall	.+390    	; 0x1bec <__fp_zero>
    1a66:	b1 e0       	ldi	r27, 0x01	; 1
    1a68:	08 95       	ret
    1a6a:	c0 c0       	rjmp	.+384    	; 0x1bec <__fp_zero>
    1a6c:	67 2f       	mov	r22, r23
    1a6e:	78 2f       	mov	r23, r24
    1a70:	88 27       	eor	r24, r24
    1a72:	b8 5f       	subi	r27, 0xF8	; 248
    1a74:	39 f0       	breq	.+14     	; 0x1a84 <__fixunssfsi+0x46>
    1a76:	b9 3f       	cpi	r27, 0xF9	; 249
    1a78:	cc f3       	brlt	.-14     	; 0x1a6c <__fixunssfsi+0x2e>
    1a7a:	86 95       	lsr	r24
    1a7c:	77 95       	ror	r23
    1a7e:	67 95       	ror	r22
    1a80:	b3 95       	inc	r27
    1a82:	d9 f7       	brne	.-10     	; 0x1a7a <__fixunssfsi+0x3c>
    1a84:	3e f4       	brtc	.+14     	; 0x1a94 <__fixunssfsi+0x56>
    1a86:	90 95       	com	r25
    1a88:	80 95       	com	r24
    1a8a:	70 95       	com	r23
    1a8c:	61 95       	neg	r22
    1a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a90:	8f 4f       	sbci	r24, 0xFF	; 255
    1a92:	9f 4f       	sbci	r25, 0xFF	; 255
    1a94:	08 95       	ret

00001a96 <__floatunsisf>:
    1a96:	e8 94       	clt
    1a98:	09 c0       	rjmp	.+18     	; 0x1aac <__floatsisf+0x12>

00001a9a <__floatsisf>:
    1a9a:	97 fb       	bst	r25, 7
    1a9c:	3e f4       	brtc	.+14     	; 0x1aac <__floatsisf+0x12>
    1a9e:	90 95       	com	r25
    1aa0:	80 95       	com	r24
    1aa2:	70 95       	com	r23
    1aa4:	61 95       	neg	r22
    1aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    1aac:	99 23       	and	r25, r25
    1aae:	a9 f0       	breq	.+42     	; 0x1ada <__floatsisf+0x40>
    1ab0:	f9 2f       	mov	r31, r25
    1ab2:	96 e9       	ldi	r25, 0x96	; 150
    1ab4:	bb 27       	eor	r27, r27
    1ab6:	93 95       	inc	r25
    1ab8:	f6 95       	lsr	r31
    1aba:	87 95       	ror	r24
    1abc:	77 95       	ror	r23
    1abe:	67 95       	ror	r22
    1ac0:	b7 95       	ror	r27
    1ac2:	f1 11       	cpse	r31, r1
    1ac4:	f8 cf       	rjmp	.-16     	; 0x1ab6 <__floatsisf+0x1c>
    1ac6:	fa f4       	brpl	.+62     	; 0x1b06 <__floatsisf+0x6c>
    1ac8:	bb 0f       	add	r27, r27
    1aca:	11 f4       	brne	.+4      	; 0x1ad0 <__floatsisf+0x36>
    1acc:	60 ff       	sbrs	r22, 0
    1ace:	1b c0       	rjmp	.+54     	; 0x1b06 <__floatsisf+0x6c>
    1ad0:	6f 5f       	subi	r22, 0xFF	; 255
    1ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad8:	16 c0       	rjmp	.+44     	; 0x1b06 <__floatsisf+0x6c>
    1ada:	88 23       	and	r24, r24
    1adc:	11 f0       	breq	.+4      	; 0x1ae2 <__floatsisf+0x48>
    1ade:	96 e9       	ldi	r25, 0x96	; 150
    1ae0:	11 c0       	rjmp	.+34     	; 0x1b04 <__floatsisf+0x6a>
    1ae2:	77 23       	and	r23, r23
    1ae4:	21 f0       	breq	.+8      	; 0x1aee <__floatsisf+0x54>
    1ae6:	9e e8       	ldi	r25, 0x8E	; 142
    1ae8:	87 2f       	mov	r24, r23
    1aea:	76 2f       	mov	r23, r22
    1aec:	05 c0       	rjmp	.+10     	; 0x1af8 <__floatsisf+0x5e>
    1aee:	66 23       	and	r22, r22
    1af0:	71 f0       	breq	.+28     	; 0x1b0e <__floatsisf+0x74>
    1af2:	96 e8       	ldi	r25, 0x86	; 134
    1af4:	86 2f       	mov	r24, r22
    1af6:	70 e0       	ldi	r23, 0x00	; 0
    1af8:	60 e0       	ldi	r22, 0x00	; 0
    1afa:	2a f0       	brmi	.+10     	; 0x1b06 <__floatsisf+0x6c>
    1afc:	9a 95       	dec	r25
    1afe:	66 0f       	add	r22, r22
    1b00:	77 1f       	adc	r23, r23
    1b02:	88 1f       	adc	r24, r24
    1b04:	da f7       	brpl	.-10     	; 0x1afc <__floatsisf+0x62>
    1b06:	88 0f       	add	r24, r24
    1b08:	96 95       	lsr	r25
    1b0a:	87 95       	ror	r24
    1b0c:	97 f9       	bld	r25, 7
    1b0e:	08 95       	ret

00001b10 <__fp_cmp>:
    1b10:	99 0f       	add	r25, r25
    1b12:	00 08       	sbc	r0, r0
    1b14:	55 0f       	add	r21, r21
    1b16:	aa 0b       	sbc	r26, r26
    1b18:	e0 e8       	ldi	r30, 0x80	; 128
    1b1a:	fe ef       	ldi	r31, 0xFE	; 254
    1b1c:	16 16       	cp	r1, r22
    1b1e:	17 06       	cpc	r1, r23
    1b20:	e8 07       	cpc	r30, r24
    1b22:	f9 07       	cpc	r31, r25
    1b24:	c0 f0       	brcs	.+48     	; 0x1b56 <__fp_cmp+0x46>
    1b26:	12 16       	cp	r1, r18
    1b28:	13 06       	cpc	r1, r19
    1b2a:	e4 07       	cpc	r30, r20
    1b2c:	f5 07       	cpc	r31, r21
    1b2e:	98 f0       	brcs	.+38     	; 0x1b56 <__fp_cmp+0x46>
    1b30:	62 1b       	sub	r22, r18
    1b32:	73 0b       	sbc	r23, r19
    1b34:	84 0b       	sbc	r24, r20
    1b36:	95 0b       	sbc	r25, r21
    1b38:	39 f4       	brne	.+14     	; 0x1b48 <__fp_cmp+0x38>
    1b3a:	0a 26       	eor	r0, r26
    1b3c:	61 f0       	breq	.+24     	; 0x1b56 <__fp_cmp+0x46>
    1b3e:	23 2b       	or	r18, r19
    1b40:	24 2b       	or	r18, r20
    1b42:	25 2b       	or	r18, r21
    1b44:	21 f4       	brne	.+8      	; 0x1b4e <__fp_cmp+0x3e>
    1b46:	08 95       	ret
    1b48:	0a 26       	eor	r0, r26
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <__fp_cmp+0x3e>
    1b4c:	a1 40       	sbci	r26, 0x01	; 1
    1b4e:	a6 95       	lsr	r26
    1b50:	8f ef       	ldi	r24, 0xFF	; 255
    1b52:	81 1d       	adc	r24, r1
    1b54:	81 1d       	adc	r24, r1
    1b56:	08 95       	ret

00001b58 <__fp_inf>:
    1b58:	97 f9       	bld	r25, 7
    1b5a:	9f 67       	ori	r25, 0x7F	; 127
    1b5c:	80 e8       	ldi	r24, 0x80	; 128
    1b5e:	70 e0       	ldi	r23, 0x00	; 0
    1b60:	60 e0       	ldi	r22, 0x00	; 0
    1b62:	08 95       	ret

00001b64 <__fp_nan>:
    1b64:	9f ef       	ldi	r25, 0xFF	; 255
    1b66:	80 ec       	ldi	r24, 0xC0	; 192
    1b68:	08 95       	ret

00001b6a <__fp_pscA>:
    1b6a:	00 24       	eor	r0, r0
    1b6c:	0a 94       	dec	r0
    1b6e:	16 16       	cp	r1, r22
    1b70:	17 06       	cpc	r1, r23
    1b72:	18 06       	cpc	r1, r24
    1b74:	09 06       	cpc	r0, r25
    1b76:	08 95       	ret

00001b78 <__fp_pscB>:
    1b78:	00 24       	eor	r0, r0
    1b7a:	0a 94       	dec	r0
    1b7c:	12 16       	cp	r1, r18
    1b7e:	13 06       	cpc	r1, r19
    1b80:	14 06       	cpc	r1, r20
    1b82:	05 06       	cpc	r0, r21
    1b84:	08 95       	ret

00001b86 <__fp_round>:
    1b86:	09 2e       	mov	r0, r25
    1b88:	03 94       	inc	r0
    1b8a:	00 0c       	add	r0, r0
    1b8c:	11 f4       	brne	.+4      	; 0x1b92 <__fp_round+0xc>
    1b8e:	88 23       	and	r24, r24
    1b90:	52 f0       	brmi	.+20     	; 0x1ba6 <__fp_round+0x20>
    1b92:	bb 0f       	add	r27, r27
    1b94:	40 f4       	brcc	.+16     	; 0x1ba6 <__fp_round+0x20>
    1b96:	bf 2b       	or	r27, r31
    1b98:	11 f4       	brne	.+4      	; 0x1b9e <__fp_round+0x18>
    1b9a:	60 ff       	sbrs	r22, 0
    1b9c:	04 c0       	rjmp	.+8      	; 0x1ba6 <__fp_round+0x20>
    1b9e:	6f 5f       	subi	r22, 0xFF	; 255
    1ba0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba6:	08 95       	ret

00001ba8 <__fp_split3>:
    1ba8:	57 fd       	sbrc	r21, 7
    1baa:	90 58       	subi	r25, 0x80	; 128
    1bac:	44 0f       	add	r20, r20
    1bae:	55 1f       	adc	r21, r21
    1bb0:	59 f0       	breq	.+22     	; 0x1bc8 <__fp_splitA+0x10>
    1bb2:	5f 3f       	cpi	r21, 0xFF	; 255
    1bb4:	71 f0       	breq	.+28     	; 0x1bd2 <__fp_splitA+0x1a>
    1bb6:	47 95       	ror	r20

00001bb8 <__fp_splitA>:
    1bb8:	88 0f       	add	r24, r24
    1bba:	97 fb       	bst	r25, 7
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	61 f0       	breq	.+24     	; 0x1bd8 <__fp_splitA+0x20>
    1bc0:	9f 3f       	cpi	r25, 0xFF	; 255
    1bc2:	79 f0       	breq	.+30     	; 0x1be2 <__fp_splitA+0x2a>
    1bc4:	87 95       	ror	r24
    1bc6:	08 95       	ret
    1bc8:	12 16       	cp	r1, r18
    1bca:	13 06       	cpc	r1, r19
    1bcc:	14 06       	cpc	r1, r20
    1bce:	55 1f       	adc	r21, r21
    1bd0:	f2 cf       	rjmp	.-28     	; 0x1bb6 <__fp_split3+0xe>
    1bd2:	46 95       	lsr	r20
    1bd4:	f1 df       	rcall	.-30     	; 0x1bb8 <__fp_splitA>
    1bd6:	08 c0       	rjmp	.+16     	; 0x1be8 <__fp_splitA+0x30>
    1bd8:	16 16       	cp	r1, r22
    1bda:	17 06       	cpc	r1, r23
    1bdc:	18 06       	cpc	r1, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	f1 cf       	rjmp	.-30     	; 0x1bc4 <__fp_splitA+0xc>
    1be2:	86 95       	lsr	r24
    1be4:	71 05       	cpc	r23, r1
    1be6:	61 05       	cpc	r22, r1
    1be8:	08 94       	sec
    1bea:	08 95       	ret

00001bec <__fp_zero>:
    1bec:	e8 94       	clt

00001bee <__fp_szero>:
    1bee:	bb 27       	eor	r27, r27
    1bf0:	66 27       	eor	r22, r22
    1bf2:	77 27       	eor	r23, r23
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	97 f9       	bld	r25, 7
    1bf8:	08 95       	ret

00001bfa <__mulsf3>:
    1bfa:	0b d0       	rcall	.+22     	; 0x1c12 <__mulsf3x>
    1bfc:	c4 cf       	rjmp	.-120    	; 0x1b86 <__fp_round>
    1bfe:	b5 df       	rcall	.-150    	; 0x1b6a <__fp_pscA>
    1c00:	28 f0       	brcs	.+10     	; 0x1c0c <__mulsf3+0x12>
    1c02:	ba df       	rcall	.-140    	; 0x1b78 <__fp_pscB>
    1c04:	18 f0       	brcs	.+6      	; 0x1c0c <__mulsf3+0x12>
    1c06:	95 23       	and	r25, r21
    1c08:	09 f0       	breq	.+2      	; 0x1c0c <__mulsf3+0x12>
    1c0a:	a6 cf       	rjmp	.-180    	; 0x1b58 <__fp_inf>
    1c0c:	ab cf       	rjmp	.-170    	; 0x1b64 <__fp_nan>
    1c0e:	11 24       	eor	r1, r1
    1c10:	ee cf       	rjmp	.-36     	; 0x1bee <__fp_szero>

00001c12 <__mulsf3x>:
    1c12:	ca df       	rcall	.-108    	; 0x1ba8 <__fp_split3>
    1c14:	a0 f3       	brcs	.-24     	; 0x1bfe <__mulsf3+0x4>

00001c16 <__mulsf3_pse>:
    1c16:	95 9f       	mul	r25, r21
    1c18:	d1 f3       	breq	.-12     	; 0x1c0e <__mulsf3+0x14>
    1c1a:	95 0f       	add	r25, r21
    1c1c:	50 e0       	ldi	r21, 0x00	; 0
    1c1e:	55 1f       	adc	r21, r21
    1c20:	62 9f       	mul	r22, r18
    1c22:	f0 01       	movw	r30, r0
    1c24:	72 9f       	mul	r23, r18
    1c26:	bb 27       	eor	r27, r27
    1c28:	f0 0d       	add	r31, r0
    1c2a:	b1 1d       	adc	r27, r1
    1c2c:	63 9f       	mul	r22, r19
    1c2e:	aa 27       	eor	r26, r26
    1c30:	f0 0d       	add	r31, r0
    1c32:	b1 1d       	adc	r27, r1
    1c34:	aa 1f       	adc	r26, r26
    1c36:	64 9f       	mul	r22, r20
    1c38:	66 27       	eor	r22, r22
    1c3a:	b0 0d       	add	r27, r0
    1c3c:	a1 1d       	adc	r26, r1
    1c3e:	66 1f       	adc	r22, r22
    1c40:	82 9f       	mul	r24, r18
    1c42:	22 27       	eor	r18, r18
    1c44:	b0 0d       	add	r27, r0
    1c46:	a1 1d       	adc	r26, r1
    1c48:	62 1f       	adc	r22, r18
    1c4a:	73 9f       	mul	r23, r19
    1c4c:	b0 0d       	add	r27, r0
    1c4e:	a1 1d       	adc	r26, r1
    1c50:	62 1f       	adc	r22, r18
    1c52:	83 9f       	mul	r24, r19
    1c54:	a0 0d       	add	r26, r0
    1c56:	61 1d       	adc	r22, r1
    1c58:	22 1f       	adc	r18, r18
    1c5a:	74 9f       	mul	r23, r20
    1c5c:	33 27       	eor	r19, r19
    1c5e:	a0 0d       	add	r26, r0
    1c60:	61 1d       	adc	r22, r1
    1c62:	23 1f       	adc	r18, r19
    1c64:	84 9f       	mul	r24, r20
    1c66:	60 0d       	add	r22, r0
    1c68:	21 1d       	adc	r18, r1
    1c6a:	82 2f       	mov	r24, r18
    1c6c:	76 2f       	mov	r23, r22
    1c6e:	6a 2f       	mov	r22, r26
    1c70:	11 24       	eor	r1, r1
    1c72:	9f 57       	subi	r25, 0x7F	; 127
    1c74:	50 40       	sbci	r21, 0x00	; 0
    1c76:	8a f0       	brmi	.+34     	; 0x1c9a <__mulsf3_pse+0x84>
    1c78:	e1 f0       	breq	.+56     	; 0x1cb2 <__mulsf3_pse+0x9c>
    1c7a:	88 23       	and	r24, r24
    1c7c:	4a f0       	brmi	.+18     	; 0x1c90 <__mulsf3_pse+0x7a>
    1c7e:	ee 0f       	add	r30, r30
    1c80:	ff 1f       	adc	r31, r31
    1c82:	bb 1f       	adc	r27, r27
    1c84:	66 1f       	adc	r22, r22
    1c86:	77 1f       	adc	r23, r23
    1c88:	88 1f       	adc	r24, r24
    1c8a:	91 50       	subi	r25, 0x01	; 1
    1c8c:	50 40       	sbci	r21, 0x00	; 0
    1c8e:	a9 f7       	brne	.-22     	; 0x1c7a <__mulsf3_pse+0x64>
    1c90:	9e 3f       	cpi	r25, 0xFE	; 254
    1c92:	51 05       	cpc	r21, r1
    1c94:	70 f0       	brcs	.+28     	; 0x1cb2 <__mulsf3_pse+0x9c>
    1c96:	60 cf       	rjmp	.-320    	; 0x1b58 <__fp_inf>
    1c98:	aa cf       	rjmp	.-172    	; 0x1bee <__fp_szero>
    1c9a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c9c:	ec f3       	brlt	.-6      	; 0x1c98 <__mulsf3_pse+0x82>
    1c9e:	98 3e       	cpi	r25, 0xE8	; 232
    1ca0:	dc f3       	brlt	.-10     	; 0x1c98 <__mulsf3_pse+0x82>
    1ca2:	86 95       	lsr	r24
    1ca4:	77 95       	ror	r23
    1ca6:	67 95       	ror	r22
    1ca8:	b7 95       	ror	r27
    1caa:	f7 95       	ror	r31
    1cac:	e7 95       	ror	r30
    1cae:	9f 5f       	subi	r25, 0xFF	; 255
    1cb0:	c1 f7       	brne	.-16     	; 0x1ca2 <__mulsf3_pse+0x8c>
    1cb2:	fe 2b       	or	r31, r30
    1cb4:	88 0f       	add	r24, r24
    1cb6:	91 1d       	adc	r25, r1
    1cb8:	96 95       	lsr	r25
    1cba:	87 95       	ror	r24
    1cbc:	97 f9       	bld	r25, 7
    1cbe:	08 95       	ret

00001cc0 <__udivmodsi4>:
    1cc0:	a1 e2       	ldi	r26, 0x21	; 33
    1cc2:	1a 2e       	mov	r1, r26
    1cc4:	aa 1b       	sub	r26, r26
    1cc6:	bb 1b       	sub	r27, r27
    1cc8:	fd 01       	movw	r30, r26
    1cca:	0d c0       	rjmp	.+26     	; 0x1ce6 <__udivmodsi4_ep>

00001ccc <__udivmodsi4_loop>:
    1ccc:	aa 1f       	adc	r26, r26
    1cce:	bb 1f       	adc	r27, r27
    1cd0:	ee 1f       	adc	r30, r30
    1cd2:	ff 1f       	adc	r31, r31
    1cd4:	a2 17       	cp	r26, r18
    1cd6:	b3 07       	cpc	r27, r19
    1cd8:	e4 07       	cpc	r30, r20
    1cda:	f5 07       	cpc	r31, r21
    1cdc:	20 f0       	brcs	.+8      	; 0x1ce6 <__udivmodsi4_ep>
    1cde:	a2 1b       	sub	r26, r18
    1ce0:	b3 0b       	sbc	r27, r19
    1ce2:	e4 0b       	sbc	r30, r20
    1ce4:	f5 0b       	sbc	r31, r21

00001ce6 <__udivmodsi4_ep>:
    1ce6:	66 1f       	adc	r22, r22
    1ce8:	77 1f       	adc	r23, r23
    1cea:	88 1f       	adc	r24, r24
    1cec:	99 1f       	adc	r25, r25
    1cee:	1a 94       	dec	r1
    1cf0:	69 f7       	brne	.-38     	; 0x1ccc <__udivmodsi4_loop>
    1cf2:	60 95       	com	r22
    1cf4:	70 95       	com	r23
    1cf6:	80 95       	com	r24
    1cf8:	90 95       	com	r25
    1cfa:	9b 01       	movw	r18, r22
    1cfc:	ac 01       	movw	r20, r24
    1cfe:	bd 01       	movw	r22, r26
    1d00:	cf 01       	movw	r24, r30
    1d02:	08 95       	ret

00001d04 <snprintf>:
    1d04:	ae e0       	ldi	r26, 0x0E	; 14
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	e8 e8       	ldi	r30, 0x88	; 136
    1d0a:	fe e0       	ldi	r31, 0x0E	; 14
    1d0c:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__prologue_saves__+0x1c>
    1d10:	0d 89       	ldd	r16, Y+21	; 0x15
    1d12:	1e 89       	ldd	r17, Y+22	; 0x16
    1d14:	8f 89       	ldd	r24, Y+23	; 0x17
    1d16:	98 8d       	ldd	r25, Y+24	; 0x18
    1d18:	26 e0       	ldi	r18, 0x06	; 6
    1d1a:	2c 83       	std	Y+4, r18	; 0x04
    1d1c:	1a 83       	std	Y+2, r17	; 0x02
    1d1e:	09 83       	std	Y+1, r16	; 0x01
    1d20:	97 ff       	sbrs	r25, 7
    1d22:	02 c0       	rjmp	.+4      	; 0x1d28 <snprintf+0x24>
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	90 e8       	ldi	r25, 0x80	; 128
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	9e 83       	std	Y+6, r25	; 0x06
    1d2c:	8d 83       	std	Y+5, r24	; 0x05
    1d2e:	ae 01       	movw	r20, r28
    1d30:	45 5e       	subi	r20, 0xE5	; 229
    1d32:	5f 4f       	sbci	r21, 0xFF	; 255
    1d34:	ce 01       	movw	r24, r28
    1d36:	01 96       	adiw	r24, 0x01	; 1
    1d38:	69 8d       	ldd	r22, Y+25	; 0x19
    1d3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d3c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <vfprintf>
    1d40:	4d 81       	ldd	r20, Y+5	; 0x05
    1d42:	5e 81       	ldd	r21, Y+6	; 0x06
    1d44:	57 fd       	sbrc	r21, 7
    1d46:	0a c0       	rjmp	.+20     	; 0x1d5c <snprintf+0x58>
    1d48:	2f 81       	ldd	r18, Y+7	; 0x07
    1d4a:	38 85       	ldd	r19, Y+8	; 0x08
    1d4c:	42 17       	cp	r20, r18
    1d4e:	53 07       	cpc	r21, r19
    1d50:	0c f4       	brge	.+2      	; 0x1d54 <snprintf+0x50>
    1d52:	9a 01       	movw	r18, r20
    1d54:	02 0f       	add	r16, r18
    1d56:	13 1f       	adc	r17, r19
    1d58:	f8 01       	movw	r30, r16
    1d5a:	10 82       	st	Z, r1
    1d5c:	2e 96       	adiw	r28, 0x0e	; 14
    1d5e:	e4 e0       	ldi	r30, 0x04	; 4
    1d60:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <__epilogue_restores__+0x1c>

00001d64 <sprintf>:
    1d64:	ae e0       	ldi	r26, 0x0E	; 14
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e8 eb       	ldi	r30, 0xB8	; 184
    1d6a:	fe e0       	ldi	r31, 0x0E	; 14
    1d6c:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__prologue_saves__+0x1c>
    1d70:	0d 89       	ldd	r16, Y+21	; 0x15
    1d72:	1e 89       	ldd	r17, Y+22	; 0x16
    1d74:	86 e0       	ldi	r24, 0x06	; 6
    1d76:	8c 83       	std	Y+4, r24	; 0x04
    1d78:	1a 83       	std	Y+2, r17	; 0x02
    1d7a:	09 83       	std	Y+1, r16	; 0x01
    1d7c:	8f ef       	ldi	r24, 0xFF	; 255
    1d7e:	9f e7       	ldi	r25, 0x7F	; 127
    1d80:	9e 83       	std	Y+6, r25	; 0x06
    1d82:	8d 83       	std	Y+5, r24	; 0x05
    1d84:	ae 01       	movw	r20, r28
    1d86:	47 5e       	subi	r20, 0xE7	; 231
    1d88:	5f 4f       	sbci	r21, 0xFF	; 255
    1d8a:	ce 01       	movw	r24, r28
    1d8c:	01 96       	adiw	r24, 0x01	; 1
    1d8e:	6f 89       	ldd	r22, Y+23	; 0x17
    1d90:	78 8d       	ldd	r23, Y+24	; 0x18
    1d92:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <vfprintf>
    1d96:	ef 81       	ldd	r30, Y+7	; 0x07
    1d98:	f8 85       	ldd	r31, Y+8	; 0x08
    1d9a:	e0 0f       	add	r30, r16
    1d9c:	f1 1f       	adc	r31, r17
    1d9e:	10 82       	st	Z, r1
    1da0:	2e 96       	adiw	r28, 0x0e	; 14
    1da2:	e4 e0       	ldi	r30, 0x04	; 4
    1da4:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <__epilogue_restores__+0x1c>

00001da8 <vfprintf>:
    1da8:	ad e0       	ldi	r26, 0x0D	; 13
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	ea ed       	ldi	r30, 0xDA	; 218
    1dae:	fe e0       	ldi	r31, 0x0E	; 14
    1db0:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <__prologue_saves__>
    1db4:	3c 01       	movw	r6, r24
    1db6:	7d 87       	std	Y+13, r23	; 0x0d
    1db8:	6c 87       	std	Y+12, r22	; 0x0c
    1dba:	5a 01       	movw	r10, r20
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	17 82       	std	Z+7, r1	; 0x07
    1dc0:	16 82       	std	Z+6, r1	; 0x06
    1dc2:	83 81       	ldd	r24, Z+3	; 0x03
    1dc4:	81 ff       	sbrs	r24, 1
    1dc6:	c8 c1       	rjmp	.+912    	; 0x2158 <vfprintf+0x3b0>
    1dc8:	2e 01       	movw	r4, r28
    1dca:	08 94       	sec
    1dcc:	41 1c       	adc	r4, r1
    1dce:	51 1c       	adc	r5, r1
    1dd0:	f3 01       	movw	r30, r6
    1dd2:	93 81       	ldd	r25, Z+3	; 0x03
    1dd4:	ec 85       	ldd	r30, Y+12	; 0x0c
    1dd6:	fd 85       	ldd	r31, Y+13	; 0x0d
    1dd8:	93 fd       	sbrc	r25, 3
    1dda:	85 91       	lpm	r24, Z+
    1ddc:	93 ff       	sbrs	r25, 3
    1dde:	81 91       	ld	r24, Z+
    1de0:	fd 87       	std	Y+13, r31	; 0x0d
    1de2:	ec 87       	std	Y+12, r30	; 0x0c
    1de4:	88 23       	and	r24, r24
    1de6:	09 f4       	brne	.+2      	; 0x1dea <vfprintf+0x42>
    1de8:	b3 c1       	rjmp	.+870    	; 0x2150 <vfprintf+0x3a8>
    1dea:	85 32       	cpi	r24, 0x25	; 37
    1dec:	41 f4       	brne	.+16     	; 0x1dfe <vfprintf+0x56>
    1dee:	93 fd       	sbrc	r25, 3
    1df0:	85 91       	lpm	r24, Z+
    1df2:	93 ff       	sbrs	r25, 3
    1df4:	81 91       	ld	r24, Z+
    1df6:	fd 87       	std	Y+13, r31	; 0x0d
    1df8:	ec 87       	std	Y+12, r30	; 0x0c
    1dfa:	85 32       	cpi	r24, 0x25	; 37
    1dfc:	29 f4       	brne	.+10     	; 0x1e08 <vfprintf+0x60>
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	b3 01       	movw	r22, r6
    1e02:	0e 94 c8 10 	call	0x2190	; 0x2190 <fputc>
    1e06:	e4 cf       	rjmp	.-56     	; 0x1dd0 <vfprintf+0x28>
    1e08:	ff 24       	eor	r15, r15
    1e0a:	ee 24       	eor	r14, r14
    1e0c:	10 e0       	ldi	r17, 0x00	; 0
    1e0e:	10 32       	cpi	r17, 0x20	; 32
    1e10:	b0 f4       	brcc	.+44     	; 0x1e3e <vfprintf+0x96>
    1e12:	8b 32       	cpi	r24, 0x2B	; 43
    1e14:	69 f0       	breq	.+26     	; 0x1e30 <vfprintf+0x88>
    1e16:	8c 32       	cpi	r24, 0x2C	; 44
    1e18:	28 f4       	brcc	.+10     	; 0x1e24 <vfprintf+0x7c>
    1e1a:	80 32       	cpi	r24, 0x20	; 32
    1e1c:	51 f0       	breq	.+20     	; 0x1e32 <vfprintf+0x8a>
    1e1e:	83 32       	cpi	r24, 0x23	; 35
    1e20:	71 f4       	brne	.+28     	; 0x1e3e <vfprintf+0x96>
    1e22:	0b c0       	rjmp	.+22     	; 0x1e3a <vfprintf+0x92>
    1e24:	8d 32       	cpi	r24, 0x2D	; 45
    1e26:	39 f0       	breq	.+14     	; 0x1e36 <vfprintf+0x8e>
    1e28:	80 33       	cpi	r24, 0x30	; 48
    1e2a:	49 f4       	brne	.+18     	; 0x1e3e <vfprintf+0x96>
    1e2c:	11 60       	ori	r17, 0x01	; 1
    1e2e:	2c c0       	rjmp	.+88     	; 0x1e88 <vfprintf+0xe0>
    1e30:	12 60       	ori	r17, 0x02	; 2
    1e32:	14 60       	ori	r17, 0x04	; 4
    1e34:	29 c0       	rjmp	.+82     	; 0x1e88 <vfprintf+0xe0>
    1e36:	18 60       	ori	r17, 0x08	; 8
    1e38:	27 c0       	rjmp	.+78     	; 0x1e88 <vfprintf+0xe0>
    1e3a:	10 61       	ori	r17, 0x10	; 16
    1e3c:	25 c0       	rjmp	.+74     	; 0x1e88 <vfprintf+0xe0>
    1e3e:	17 fd       	sbrc	r17, 7
    1e40:	2e c0       	rjmp	.+92     	; 0x1e9e <vfprintf+0xf6>
    1e42:	28 2f       	mov	r18, r24
    1e44:	20 53       	subi	r18, 0x30	; 48
    1e46:	2a 30       	cpi	r18, 0x0A	; 10
    1e48:	98 f4       	brcc	.+38     	; 0x1e70 <vfprintf+0xc8>
    1e4a:	16 ff       	sbrs	r17, 6
    1e4c:	08 c0       	rjmp	.+16     	; 0x1e5e <vfprintf+0xb6>
    1e4e:	8f 2d       	mov	r24, r15
    1e50:	88 0f       	add	r24, r24
    1e52:	f8 2e       	mov	r15, r24
    1e54:	ff 0c       	add	r15, r15
    1e56:	ff 0c       	add	r15, r15
    1e58:	f8 0e       	add	r15, r24
    1e5a:	f2 0e       	add	r15, r18
    1e5c:	15 c0       	rjmp	.+42     	; 0x1e88 <vfprintf+0xe0>
    1e5e:	8e 2d       	mov	r24, r14
    1e60:	88 0f       	add	r24, r24
    1e62:	e8 2e       	mov	r14, r24
    1e64:	ee 0c       	add	r14, r14
    1e66:	ee 0c       	add	r14, r14
    1e68:	e8 0e       	add	r14, r24
    1e6a:	e2 0e       	add	r14, r18
    1e6c:	10 62       	ori	r17, 0x20	; 32
    1e6e:	0c c0       	rjmp	.+24     	; 0x1e88 <vfprintf+0xe0>
    1e70:	8e 32       	cpi	r24, 0x2E	; 46
    1e72:	21 f4       	brne	.+8      	; 0x1e7c <vfprintf+0xd4>
    1e74:	16 fd       	sbrc	r17, 6
    1e76:	6c c1       	rjmp	.+728    	; 0x2150 <vfprintf+0x3a8>
    1e78:	10 64       	ori	r17, 0x40	; 64
    1e7a:	06 c0       	rjmp	.+12     	; 0x1e88 <vfprintf+0xe0>
    1e7c:	8c 36       	cpi	r24, 0x6C	; 108
    1e7e:	11 f4       	brne	.+4      	; 0x1e84 <vfprintf+0xdc>
    1e80:	10 68       	ori	r17, 0x80	; 128
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <vfprintf+0xe0>
    1e84:	88 36       	cpi	r24, 0x68	; 104
    1e86:	59 f4       	brne	.+22     	; 0x1e9e <vfprintf+0xf6>
    1e88:	ec 85       	ldd	r30, Y+12	; 0x0c
    1e8a:	fd 85       	ldd	r31, Y+13	; 0x0d
    1e8c:	93 fd       	sbrc	r25, 3
    1e8e:	85 91       	lpm	r24, Z+
    1e90:	93 ff       	sbrs	r25, 3
    1e92:	81 91       	ld	r24, Z+
    1e94:	fd 87       	std	Y+13, r31	; 0x0d
    1e96:	ec 87       	std	Y+12, r30	; 0x0c
    1e98:	88 23       	and	r24, r24
    1e9a:	09 f0       	breq	.+2      	; 0x1e9e <vfprintf+0xf6>
    1e9c:	b8 cf       	rjmp	.-144    	; 0x1e0e <vfprintf+0x66>
    1e9e:	98 2f       	mov	r25, r24
    1ea0:	95 54       	subi	r25, 0x45	; 69
    1ea2:	93 30       	cpi	r25, 0x03	; 3
    1ea4:	18 f0       	brcs	.+6      	; 0x1eac <vfprintf+0x104>
    1ea6:	90 52       	subi	r25, 0x20	; 32
    1ea8:	93 30       	cpi	r25, 0x03	; 3
    1eaa:	38 f4       	brcc	.+14     	; 0x1eba <vfprintf+0x112>
    1eac:	24 e0       	ldi	r18, 0x04	; 4
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	a2 0e       	add	r10, r18
    1eb2:	b3 1e       	adc	r11, r19
    1eb4:	3f e3       	ldi	r19, 0x3F	; 63
    1eb6:	39 83       	std	Y+1, r19	; 0x01
    1eb8:	0f c0       	rjmp	.+30     	; 0x1ed8 <vfprintf+0x130>
    1eba:	83 36       	cpi	r24, 0x63	; 99
    1ebc:	31 f0       	breq	.+12     	; 0x1eca <vfprintf+0x122>
    1ebe:	83 37       	cpi	r24, 0x73	; 115
    1ec0:	81 f0       	breq	.+32     	; 0x1ee2 <vfprintf+0x13a>
    1ec2:	83 35       	cpi	r24, 0x53	; 83
    1ec4:	09 f0       	breq	.+2      	; 0x1ec8 <vfprintf+0x120>
    1ec6:	5a c0       	rjmp	.+180    	; 0x1f7c <vfprintf+0x1d4>
    1ec8:	22 c0       	rjmp	.+68     	; 0x1f0e <vfprintf+0x166>
    1eca:	f5 01       	movw	r30, r10
    1ecc:	80 81       	ld	r24, Z
    1ece:	89 83       	std	Y+1, r24	; 0x01
    1ed0:	22 e0       	ldi	r18, 0x02	; 2
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	a2 0e       	add	r10, r18
    1ed6:	b3 1e       	adc	r11, r19
    1ed8:	21 e0       	ldi	r18, 0x01	; 1
    1eda:	c2 2e       	mov	r12, r18
    1edc:	d1 2c       	mov	r13, r1
    1ede:	42 01       	movw	r8, r4
    1ee0:	14 c0       	rjmp	.+40     	; 0x1f0a <vfprintf+0x162>
    1ee2:	92 e0       	ldi	r25, 0x02	; 2
    1ee4:	29 2e       	mov	r2, r25
    1ee6:	31 2c       	mov	r3, r1
    1ee8:	2a 0c       	add	r2, r10
    1eea:	3b 1c       	adc	r3, r11
    1eec:	f5 01       	movw	r30, r10
    1eee:	80 80       	ld	r8, Z
    1ef0:	91 80       	ldd	r9, Z+1	; 0x01
    1ef2:	16 ff       	sbrs	r17, 6
    1ef4:	03 c0       	rjmp	.+6      	; 0x1efc <vfprintf+0x154>
    1ef6:	6f 2d       	mov	r22, r15
    1ef8:	70 e0       	ldi	r23, 0x00	; 0
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <vfprintf+0x158>
    1efc:	6f ef       	ldi	r22, 0xFF	; 255
    1efe:	7f ef       	ldi	r23, 0xFF	; 255
    1f00:	c4 01       	movw	r24, r8
    1f02:	0e 94 bd 10 	call	0x217a	; 0x217a <strnlen>
    1f06:	6c 01       	movw	r12, r24
    1f08:	51 01       	movw	r10, r2
    1f0a:	1f 77       	andi	r17, 0x7F	; 127
    1f0c:	15 c0       	rjmp	.+42     	; 0x1f38 <vfprintf+0x190>
    1f0e:	82 e0       	ldi	r24, 0x02	; 2
    1f10:	28 2e       	mov	r2, r24
    1f12:	31 2c       	mov	r3, r1
    1f14:	2a 0c       	add	r2, r10
    1f16:	3b 1c       	adc	r3, r11
    1f18:	f5 01       	movw	r30, r10
    1f1a:	80 80       	ld	r8, Z
    1f1c:	91 80       	ldd	r9, Z+1	; 0x01
    1f1e:	16 ff       	sbrs	r17, 6
    1f20:	03 c0       	rjmp	.+6      	; 0x1f28 <vfprintf+0x180>
    1f22:	6f 2d       	mov	r22, r15
    1f24:	70 e0       	ldi	r23, 0x00	; 0
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <vfprintf+0x184>
    1f28:	6f ef       	ldi	r22, 0xFF	; 255
    1f2a:	7f ef       	ldi	r23, 0xFF	; 255
    1f2c:	c4 01       	movw	r24, r8
    1f2e:	0e 94 b2 10 	call	0x2164	; 0x2164 <strnlen_P>
    1f32:	6c 01       	movw	r12, r24
    1f34:	10 68       	ori	r17, 0x80	; 128
    1f36:	51 01       	movw	r10, r2
    1f38:	13 fd       	sbrc	r17, 3
    1f3a:	1c c0       	rjmp	.+56     	; 0x1f74 <vfprintf+0x1cc>
    1f3c:	06 c0       	rjmp	.+12     	; 0x1f4a <vfprintf+0x1a2>
    1f3e:	80 e2       	ldi	r24, 0x20	; 32
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	b3 01       	movw	r22, r6
    1f44:	0e 94 c8 10 	call	0x2190	; 0x2190 <fputc>
    1f48:	ea 94       	dec	r14
    1f4a:	8e 2d       	mov	r24, r14
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	c8 16       	cp	r12, r24
    1f50:	d9 06       	cpc	r13, r25
    1f52:	a8 f3       	brcs	.-22     	; 0x1f3e <vfprintf+0x196>
    1f54:	0f c0       	rjmp	.+30     	; 0x1f74 <vfprintf+0x1cc>
    1f56:	f4 01       	movw	r30, r8
    1f58:	17 fd       	sbrc	r17, 7
    1f5a:	85 91       	lpm	r24, Z+
    1f5c:	17 ff       	sbrs	r17, 7
    1f5e:	81 91       	ld	r24, Z+
    1f60:	4f 01       	movw	r8, r30
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	b3 01       	movw	r22, r6
    1f66:	0e 94 c8 10 	call	0x2190	; 0x2190 <fputc>
    1f6a:	e1 10       	cpse	r14, r1
    1f6c:	ea 94       	dec	r14
    1f6e:	08 94       	sec
    1f70:	c1 08       	sbc	r12, r1
    1f72:	d1 08       	sbc	r13, r1
    1f74:	c1 14       	cp	r12, r1
    1f76:	d1 04       	cpc	r13, r1
    1f78:	71 f7       	brne	.-36     	; 0x1f56 <vfprintf+0x1ae>
    1f7a:	e7 c0       	rjmp	.+462    	; 0x214a <vfprintf+0x3a2>
    1f7c:	84 36       	cpi	r24, 0x64	; 100
    1f7e:	11 f0       	breq	.+4      	; 0x1f84 <vfprintf+0x1dc>
    1f80:	89 36       	cpi	r24, 0x69	; 105
    1f82:	51 f5       	brne	.+84     	; 0x1fd8 <vfprintf+0x230>
    1f84:	f5 01       	movw	r30, r10
    1f86:	17 ff       	sbrs	r17, 7
    1f88:	07 c0       	rjmp	.+14     	; 0x1f98 <vfprintf+0x1f0>
    1f8a:	80 81       	ld	r24, Z
    1f8c:	91 81       	ldd	r25, Z+1	; 0x01
    1f8e:	a2 81       	ldd	r26, Z+2	; 0x02
    1f90:	b3 81       	ldd	r27, Z+3	; 0x03
    1f92:	24 e0       	ldi	r18, 0x04	; 4
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	08 c0       	rjmp	.+16     	; 0x1fa8 <vfprintf+0x200>
    1f98:	80 81       	ld	r24, Z
    1f9a:	91 81       	ldd	r25, Z+1	; 0x01
    1f9c:	aa 27       	eor	r26, r26
    1f9e:	97 fd       	sbrc	r25, 7
    1fa0:	a0 95       	com	r26
    1fa2:	ba 2f       	mov	r27, r26
    1fa4:	22 e0       	ldi	r18, 0x02	; 2
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	a2 0e       	add	r10, r18
    1faa:	b3 1e       	adc	r11, r19
    1fac:	01 2f       	mov	r16, r17
    1fae:	0f 76       	andi	r16, 0x6F	; 111
    1fb0:	b7 ff       	sbrs	r27, 7
    1fb2:	08 c0       	rjmp	.+16     	; 0x1fc4 <vfprintf+0x21c>
    1fb4:	b0 95       	com	r27
    1fb6:	a0 95       	com	r26
    1fb8:	90 95       	com	r25
    1fba:	81 95       	neg	r24
    1fbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fbe:	af 4f       	sbci	r26, 0xFF	; 255
    1fc0:	bf 4f       	sbci	r27, 0xFF	; 255
    1fc2:	00 68       	ori	r16, 0x80	; 128
    1fc4:	bc 01       	movw	r22, r24
    1fc6:	cd 01       	movw	r24, r26
    1fc8:	a2 01       	movw	r20, r4
    1fca:	2a e0       	ldi	r18, 0x0A	; 10
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__ultoa_invert>
    1fd2:	d8 2e       	mov	r13, r24
    1fd4:	d4 18       	sub	r13, r4
    1fd6:	3f c0       	rjmp	.+126    	; 0x2056 <vfprintf+0x2ae>
    1fd8:	85 37       	cpi	r24, 0x75	; 117
    1fda:	21 f4       	brne	.+8      	; 0x1fe4 <vfprintf+0x23c>
    1fdc:	1f 7e       	andi	r17, 0xEF	; 239
    1fde:	2a e0       	ldi	r18, 0x0A	; 10
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	20 c0       	rjmp	.+64     	; 0x2024 <vfprintf+0x27c>
    1fe4:	19 7f       	andi	r17, 0xF9	; 249
    1fe6:	8f 36       	cpi	r24, 0x6F	; 111
    1fe8:	a9 f0       	breq	.+42     	; 0x2014 <vfprintf+0x26c>
    1fea:	80 37       	cpi	r24, 0x70	; 112
    1fec:	20 f4       	brcc	.+8      	; 0x1ff6 <vfprintf+0x24e>
    1fee:	88 35       	cpi	r24, 0x58	; 88
    1ff0:	09 f0       	breq	.+2      	; 0x1ff4 <vfprintf+0x24c>
    1ff2:	ae c0       	rjmp	.+348    	; 0x2150 <vfprintf+0x3a8>
    1ff4:	0b c0       	rjmp	.+22     	; 0x200c <vfprintf+0x264>
    1ff6:	80 37       	cpi	r24, 0x70	; 112
    1ff8:	21 f0       	breq	.+8      	; 0x2002 <vfprintf+0x25a>
    1ffa:	88 37       	cpi	r24, 0x78	; 120
    1ffc:	09 f0       	breq	.+2      	; 0x2000 <vfprintf+0x258>
    1ffe:	a8 c0       	rjmp	.+336    	; 0x2150 <vfprintf+0x3a8>
    2000:	01 c0       	rjmp	.+2      	; 0x2004 <vfprintf+0x25c>
    2002:	10 61       	ori	r17, 0x10	; 16
    2004:	14 ff       	sbrs	r17, 4
    2006:	09 c0       	rjmp	.+18     	; 0x201a <vfprintf+0x272>
    2008:	14 60       	ori	r17, 0x04	; 4
    200a:	07 c0       	rjmp	.+14     	; 0x201a <vfprintf+0x272>
    200c:	14 ff       	sbrs	r17, 4
    200e:	08 c0       	rjmp	.+16     	; 0x2020 <vfprintf+0x278>
    2010:	16 60       	ori	r17, 0x06	; 6
    2012:	06 c0       	rjmp	.+12     	; 0x2020 <vfprintf+0x278>
    2014:	28 e0       	ldi	r18, 0x08	; 8
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	05 c0       	rjmp	.+10     	; 0x2024 <vfprintf+0x27c>
    201a:	20 e1       	ldi	r18, 0x10	; 16
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <vfprintf+0x27c>
    2020:	20 e1       	ldi	r18, 0x10	; 16
    2022:	32 e0       	ldi	r19, 0x02	; 2
    2024:	f5 01       	movw	r30, r10
    2026:	17 ff       	sbrs	r17, 7
    2028:	07 c0       	rjmp	.+14     	; 0x2038 <vfprintf+0x290>
    202a:	60 81       	ld	r22, Z
    202c:	71 81       	ldd	r23, Z+1	; 0x01
    202e:	82 81       	ldd	r24, Z+2	; 0x02
    2030:	93 81       	ldd	r25, Z+3	; 0x03
    2032:	44 e0       	ldi	r20, 0x04	; 4
    2034:	50 e0       	ldi	r21, 0x00	; 0
    2036:	06 c0       	rjmp	.+12     	; 0x2044 <vfprintf+0x29c>
    2038:	60 81       	ld	r22, Z
    203a:	71 81       	ldd	r23, Z+1	; 0x01
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	42 e0       	ldi	r20, 0x02	; 2
    2042:	50 e0       	ldi	r21, 0x00	; 0
    2044:	a4 0e       	add	r10, r20
    2046:	b5 1e       	adc	r11, r21
    2048:	a2 01       	movw	r20, r4
    204a:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__ultoa_invert>
    204e:	d8 2e       	mov	r13, r24
    2050:	d4 18       	sub	r13, r4
    2052:	01 2f       	mov	r16, r17
    2054:	0f 77       	andi	r16, 0x7F	; 127
    2056:	06 ff       	sbrs	r16, 6
    2058:	09 c0       	rjmp	.+18     	; 0x206c <vfprintf+0x2c4>
    205a:	0e 7f       	andi	r16, 0xFE	; 254
    205c:	df 14       	cp	r13, r15
    205e:	30 f4       	brcc	.+12     	; 0x206c <vfprintf+0x2c4>
    2060:	04 ff       	sbrs	r16, 4
    2062:	06 c0       	rjmp	.+12     	; 0x2070 <vfprintf+0x2c8>
    2064:	02 fd       	sbrc	r16, 2
    2066:	04 c0       	rjmp	.+8      	; 0x2070 <vfprintf+0x2c8>
    2068:	0f 7e       	andi	r16, 0xEF	; 239
    206a:	02 c0       	rjmp	.+4      	; 0x2070 <vfprintf+0x2c8>
    206c:	1d 2d       	mov	r17, r13
    206e:	01 c0       	rjmp	.+2      	; 0x2072 <vfprintf+0x2ca>
    2070:	1f 2d       	mov	r17, r15
    2072:	80 2f       	mov	r24, r16
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	04 ff       	sbrs	r16, 4
    2078:	0c c0       	rjmp	.+24     	; 0x2092 <vfprintf+0x2ea>
    207a:	fe 01       	movw	r30, r28
    207c:	ed 0d       	add	r30, r13
    207e:	f1 1d       	adc	r31, r1
    2080:	20 81       	ld	r18, Z
    2082:	20 33       	cpi	r18, 0x30	; 48
    2084:	11 f4       	brne	.+4      	; 0x208a <vfprintf+0x2e2>
    2086:	09 7e       	andi	r16, 0xE9	; 233
    2088:	09 c0       	rjmp	.+18     	; 0x209c <vfprintf+0x2f4>
    208a:	02 ff       	sbrs	r16, 2
    208c:	06 c0       	rjmp	.+12     	; 0x209a <vfprintf+0x2f2>
    208e:	1e 5f       	subi	r17, 0xFE	; 254
    2090:	05 c0       	rjmp	.+10     	; 0x209c <vfprintf+0x2f4>
    2092:	86 78       	andi	r24, 0x86	; 134
    2094:	90 70       	andi	r25, 0x00	; 0
    2096:	00 97       	sbiw	r24, 0x00	; 0
    2098:	09 f0       	breq	.+2      	; 0x209c <vfprintf+0x2f4>
    209a:	1f 5f       	subi	r17, 0xFF	; 255
    209c:	80 2e       	mov	r8, r16
    209e:	99 24       	eor	r9, r9
    20a0:	03 fd       	sbrc	r16, 3
    20a2:	12 c0       	rjmp	.+36     	; 0x20c8 <vfprintf+0x320>
    20a4:	00 ff       	sbrs	r16, 0
    20a6:	0d c0       	rjmp	.+26     	; 0x20c2 <vfprintf+0x31a>
    20a8:	fd 2c       	mov	r15, r13
    20aa:	1e 15       	cp	r17, r14
    20ac:	50 f4       	brcc	.+20     	; 0x20c2 <vfprintf+0x31a>
    20ae:	fe 0c       	add	r15, r14
    20b0:	f1 1a       	sub	r15, r17
    20b2:	1e 2d       	mov	r17, r14
    20b4:	06 c0       	rjmp	.+12     	; 0x20c2 <vfprintf+0x31a>
    20b6:	80 e2       	ldi	r24, 0x20	; 32
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	b3 01       	movw	r22, r6
    20bc:	0e 94 c8 10 	call	0x2190	; 0x2190 <fputc>
    20c0:	1f 5f       	subi	r17, 0xFF	; 255
    20c2:	1e 15       	cp	r17, r14
    20c4:	c0 f3       	brcs	.-16     	; 0x20b6 <vfprintf+0x30e>
    20c6:	04 c0       	rjmp	.+8      	; 0x20d0 <vfprintf+0x328>
    20c8:	1e 15       	cp	r17, r14
    20ca:	10 f4       	brcc	.+4      	; 0x20d0 <vfprintf+0x328>
    20cc:	e1 1a       	sub	r14, r17
    20ce:	01 c0       	rjmp	.+2      	; 0x20d2 <vfprintf+0x32a>
    20d0:	ee 24       	eor	r14, r14
    20d2:	84 fe       	sbrs	r8, 4
    20d4:	0f c0       	rjmp	.+30     	; 0x20f4 <vfprintf+0x34c>
    20d6:	80 e3       	ldi	r24, 0x30	; 48
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	b3 01       	movw	r22, r6
    20dc:	0e 94 c8 10 	call	0x2190	; 0x2190 <fputc>
    20e0:	82 fe       	sbrs	r8, 2
    20e2:	1f c0       	rjmp	.+62     	; 0x2122 <vfprintf+0x37a>
    20e4:	81 fe       	sbrs	r8, 1
    20e6:	03 c0       	rjmp	.+6      	; 0x20ee <vfprintf+0x346>
    20e8:	88 e5       	ldi	r24, 0x58	; 88
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	10 c0       	rjmp	.+32     	; 0x210e <vfprintf+0x366>
    20ee:	88 e7       	ldi	r24, 0x78	; 120
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	0d c0       	rjmp	.+26     	; 0x210e <vfprintf+0x366>
    20f4:	c4 01       	movw	r24, r8
    20f6:	86 78       	andi	r24, 0x86	; 134
    20f8:	90 70       	andi	r25, 0x00	; 0
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	91 f0       	breq	.+36     	; 0x2122 <vfprintf+0x37a>
    20fe:	81 fc       	sbrc	r8, 1
    2100:	02 c0       	rjmp	.+4      	; 0x2106 <vfprintf+0x35e>
    2102:	80 e2       	ldi	r24, 0x20	; 32
    2104:	01 c0       	rjmp	.+2      	; 0x2108 <vfprintf+0x360>
    2106:	8b e2       	ldi	r24, 0x2B	; 43
    2108:	07 fd       	sbrc	r16, 7
    210a:	8d e2       	ldi	r24, 0x2D	; 45
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	b3 01       	movw	r22, r6
    2110:	0e 94 c8 10 	call	0x2190	; 0x2190 <fputc>
    2114:	06 c0       	rjmp	.+12     	; 0x2122 <vfprintf+0x37a>
    2116:	80 e3       	ldi	r24, 0x30	; 48
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	b3 01       	movw	r22, r6
    211c:	0e 94 c8 10 	call	0x2190	; 0x2190 <fputc>
    2120:	fa 94       	dec	r15
    2122:	df 14       	cp	r13, r15
    2124:	c0 f3       	brcs	.-16     	; 0x2116 <vfprintf+0x36e>
    2126:	da 94       	dec	r13
    2128:	f2 01       	movw	r30, r4
    212a:	ed 0d       	add	r30, r13
    212c:	f1 1d       	adc	r31, r1
    212e:	80 81       	ld	r24, Z
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	b3 01       	movw	r22, r6
    2134:	0e 94 c8 10 	call	0x2190	; 0x2190 <fputc>
    2138:	dd 20       	and	r13, r13
    213a:	a9 f7       	brne	.-22     	; 0x2126 <vfprintf+0x37e>
    213c:	06 c0       	rjmp	.+12     	; 0x214a <vfprintf+0x3a2>
    213e:	80 e2       	ldi	r24, 0x20	; 32
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	b3 01       	movw	r22, r6
    2144:	0e 94 c8 10 	call	0x2190	; 0x2190 <fputc>
    2148:	ea 94       	dec	r14
    214a:	ee 20       	and	r14, r14
    214c:	c1 f7       	brne	.-16     	; 0x213e <vfprintf+0x396>
    214e:	40 ce       	rjmp	.-896    	; 0x1dd0 <vfprintf+0x28>
    2150:	f3 01       	movw	r30, r6
    2152:	86 81       	ldd	r24, Z+6	; 0x06
    2154:	97 81       	ldd	r25, Z+7	; 0x07
    2156:	02 c0       	rjmp	.+4      	; 0x215c <vfprintf+0x3b4>
    2158:	8f ef       	ldi	r24, 0xFF	; 255
    215a:	9f ef       	ldi	r25, 0xFF	; 255
    215c:	2d 96       	adiw	r28, 0x0d	; 13
    215e:	e2 e1       	ldi	r30, 0x12	; 18
    2160:	0c 94 6e 11 	jmp	0x22dc	; 0x22dc <__epilogue_restores__>

00002164 <strnlen_P>:
    2164:	fc 01       	movw	r30, r24
    2166:	05 90       	lpm	r0, Z+
    2168:	61 50       	subi	r22, 0x01	; 1
    216a:	70 40       	sbci	r23, 0x00	; 0
    216c:	01 10       	cpse	r0, r1
    216e:	d8 f7       	brcc	.-10     	; 0x2166 <strnlen_P+0x2>
    2170:	80 95       	com	r24
    2172:	90 95       	com	r25
    2174:	8e 0f       	add	r24, r30
    2176:	9f 1f       	adc	r25, r31
    2178:	08 95       	ret

0000217a <strnlen>:
    217a:	fc 01       	movw	r30, r24
    217c:	61 50       	subi	r22, 0x01	; 1
    217e:	70 40       	sbci	r23, 0x00	; 0
    2180:	01 90       	ld	r0, Z+
    2182:	01 10       	cpse	r0, r1
    2184:	d8 f7       	brcc	.-10     	; 0x217c <strnlen+0x2>
    2186:	80 95       	com	r24
    2188:	90 95       	com	r25
    218a:	8e 0f       	add	r24, r30
    218c:	9f 1f       	adc	r25, r31
    218e:	08 95       	ret

00002190 <fputc>:
    2190:	0f 93       	push	r16
    2192:	1f 93       	push	r17
    2194:	cf 93       	push	r28
    2196:	df 93       	push	r29
    2198:	8c 01       	movw	r16, r24
    219a:	eb 01       	movw	r28, r22
    219c:	8b 81       	ldd	r24, Y+3	; 0x03
    219e:	81 ff       	sbrs	r24, 1
    21a0:	1b c0       	rjmp	.+54     	; 0x21d8 <fputc+0x48>
    21a2:	82 ff       	sbrs	r24, 2
    21a4:	0d c0       	rjmp	.+26     	; 0x21c0 <fputc+0x30>
    21a6:	2e 81       	ldd	r18, Y+6	; 0x06
    21a8:	3f 81       	ldd	r19, Y+7	; 0x07
    21aa:	8c 81       	ldd	r24, Y+4	; 0x04
    21ac:	9d 81       	ldd	r25, Y+5	; 0x05
    21ae:	28 17       	cp	r18, r24
    21b0:	39 07       	cpc	r19, r25
    21b2:	64 f4       	brge	.+24     	; 0x21cc <fputc+0x3c>
    21b4:	e8 81       	ld	r30, Y
    21b6:	f9 81       	ldd	r31, Y+1	; 0x01
    21b8:	01 93       	st	Z+, r16
    21ba:	f9 83       	std	Y+1, r31	; 0x01
    21bc:	e8 83       	st	Y, r30
    21be:	06 c0       	rjmp	.+12     	; 0x21cc <fputc+0x3c>
    21c0:	e8 85       	ldd	r30, Y+8	; 0x08
    21c2:	f9 85       	ldd	r31, Y+9	; 0x09
    21c4:	80 2f       	mov	r24, r16
    21c6:	09 95       	icall
    21c8:	00 97       	sbiw	r24, 0x00	; 0
    21ca:	31 f4       	brne	.+12     	; 0x21d8 <fputc+0x48>
    21cc:	8e 81       	ldd	r24, Y+6	; 0x06
    21ce:	9f 81       	ldd	r25, Y+7	; 0x07
    21d0:	01 96       	adiw	r24, 0x01	; 1
    21d2:	9f 83       	std	Y+7, r25	; 0x07
    21d4:	8e 83       	std	Y+6, r24	; 0x06
    21d6:	02 c0       	rjmp	.+4      	; 0x21dc <fputc+0x4c>
    21d8:	0f ef       	ldi	r16, 0xFF	; 255
    21da:	1f ef       	ldi	r17, 0xFF	; 255
    21dc:	c8 01       	movw	r24, r16
    21de:	df 91       	pop	r29
    21e0:	cf 91       	pop	r28
    21e2:	1f 91       	pop	r17
    21e4:	0f 91       	pop	r16
    21e6:	08 95       	ret

000021e8 <__ultoa_invert>:
    21e8:	fa 01       	movw	r30, r20
    21ea:	aa 27       	eor	r26, r26
    21ec:	28 30       	cpi	r18, 0x08	; 8
    21ee:	51 f1       	breq	.+84     	; 0x2244 <__ultoa_invert+0x5c>
    21f0:	20 31       	cpi	r18, 0x10	; 16
    21f2:	81 f1       	breq	.+96     	; 0x2254 <__ultoa_invert+0x6c>
    21f4:	e8 94       	clt
    21f6:	6f 93       	push	r22
    21f8:	6e 7f       	andi	r22, 0xFE	; 254
    21fa:	6e 5f       	subi	r22, 0xFE	; 254
    21fc:	7f 4f       	sbci	r23, 0xFF	; 255
    21fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2200:	9f 4f       	sbci	r25, 0xFF	; 255
    2202:	af 4f       	sbci	r26, 0xFF	; 255
    2204:	b1 e0       	ldi	r27, 0x01	; 1
    2206:	3e d0       	rcall	.+124    	; 0x2284 <__ultoa_invert+0x9c>
    2208:	b4 e0       	ldi	r27, 0x04	; 4
    220a:	3c d0       	rcall	.+120    	; 0x2284 <__ultoa_invert+0x9c>
    220c:	67 0f       	add	r22, r23
    220e:	78 1f       	adc	r23, r24
    2210:	89 1f       	adc	r24, r25
    2212:	9a 1f       	adc	r25, r26
    2214:	a1 1d       	adc	r26, r1
    2216:	68 0f       	add	r22, r24
    2218:	79 1f       	adc	r23, r25
    221a:	8a 1f       	adc	r24, r26
    221c:	91 1d       	adc	r25, r1
    221e:	a1 1d       	adc	r26, r1
    2220:	6a 0f       	add	r22, r26
    2222:	71 1d       	adc	r23, r1
    2224:	81 1d       	adc	r24, r1
    2226:	91 1d       	adc	r25, r1
    2228:	a1 1d       	adc	r26, r1
    222a:	20 d0       	rcall	.+64     	; 0x226c <__ultoa_invert+0x84>
    222c:	09 f4       	brne	.+2      	; 0x2230 <__ultoa_invert+0x48>
    222e:	68 94       	set
    2230:	3f 91       	pop	r19
    2232:	2a e0       	ldi	r18, 0x0A	; 10
    2234:	26 9f       	mul	r18, r22
    2236:	11 24       	eor	r1, r1
    2238:	30 19       	sub	r19, r0
    223a:	30 5d       	subi	r19, 0xD0	; 208
    223c:	31 93       	st	Z+, r19
    223e:	de f6       	brtc	.-74     	; 0x21f6 <__ultoa_invert+0xe>
    2240:	cf 01       	movw	r24, r30
    2242:	08 95       	ret
    2244:	46 2f       	mov	r20, r22
    2246:	47 70       	andi	r20, 0x07	; 7
    2248:	40 5d       	subi	r20, 0xD0	; 208
    224a:	41 93       	st	Z+, r20
    224c:	b3 e0       	ldi	r27, 0x03	; 3
    224e:	0f d0       	rcall	.+30     	; 0x226e <__ultoa_invert+0x86>
    2250:	c9 f7       	brne	.-14     	; 0x2244 <__ultoa_invert+0x5c>
    2252:	f6 cf       	rjmp	.-20     	; 0x2240 <__ultoa_invert+0x58>
    2254:	46 2f       	mov	r20, r22
    2256:	4f 70       	andi	r20, 0x0F	; 15
    2258:	40 5d       	subi	r20, 0xD0	; 208
    225a:	4a 33       	cpi	r20, 0x3A	; 58
    225c:	18 f0       	brcs	.+6      	; 0x2264 <__ultoa_invert+0x7c>
    225e:	49 5d       	subi	r20, 0xD9	; 217
    2260:	31 fd       	sbrc	r19, 1
    2262:	40 52       	subi	r20, 0x20	; 32
    2264:	41 93       	st	Z+, r20
    2266:	02 d0       	rcall	.+4      	; 0x226c <__ultoa_invert+0x84>
    2268:	a9 f7       	brne	.-22     	; 0x2254 <__ultoa_invert+0x6c>
    226a:	ea cf       	rjmp	.-44     	; 0x2240 <__ultoa_invert+0x58>
    226c:	b4 e0       	ldi	r27, 0x04	; 4
    226e:	a6 95       	lsr	r26
    2270:	97 95       	ror	r25
    2272:	87 95       	ror	r24
    2274:	77 95       	ror	r23
    2276:	67 95       	ror	r22
    2278:	ba 95       	dec	r27
    227a:	c9 f7       	brne	.-14     	; 0x226e <__ultoa_invert+0x86>
    227c:	00 97       	sbiw	r24, 0x00	; 0
    227e:	61 05       	cpc	r22, r1
    2280:	71 05       	cpc	r23, r1
    2282:	08 95       	ret
    2284:	9b 01       	movw	r18, r22
    2286:	ac 01       	movw	r20, r24
    2288:	0a 2e       	mov	r0, r26
    228a:	06 94       	lsr	r0
    228c:	57 95       	ror	r21
    228e:	47 95       	ror	r20
    2290:	37 95       	ror	r19
    2292:	27 95       	ror	r18
    2294:	ba 95       	dec	r27
    2296:	c9 f7       	brne	.-14     	; 0x228a <__ultoa_invert+0xa2>
    2298:	62 0f       	add	r22, r18
    229a:	73 1f       	adc	r23, r19
    229c:	84 1f       	adc	r24, r20
    229e:	95 1f       	adc	r25, r21
    22a0:	a0 1d       	adc	r26, r0
    22a2:	08 95       	ret

000022a4 <__prologue_saves__>:
    22a4:	2f 92       	push	r2
    22a6:	3f 92       	push	r3
    22a8:	4f 92       	push	r4
    22aa:	5f 92       	push	r5
    22ac:	6f 92       	push	r6
    22ae:	7f 92       	push	r7
    22b0:	8f 92       	push	r8
    22b2:	9f 92       	push	r9
    22b4:	af 92       	push	r10
    22b6:	bf 92       	push	r11
    22b8:	cf 92       	push	r12
    22ba:	df 92       	push	r13
    22bc:	ef 92       	push	r14
    22be:	ff 92       	push	r15
    22c0:	0f 93       	push	r16
    22c2:	1f 93       	push	r17
    22c4:	cf 93       	push	r28
    22c6:	df 93       	push	r29
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62
    22cc:	ca 1b       	sub	r28, r26
    22ce:	db 0b       	sbc	r29, r27
    22d0:	0f b6       	in	r0, 0x3f	; 63
    22d2:	f8 94       	cli
    22d4:	de bf       	out	0x3e, r29	; 62
    22d6:	0f be       	out	0x3f, r0	; 63
    22d8:	cd bf       	out	0x3d, r28	; 61
    22da:	09 94       	ijmp

000022dc <__epilogue_restores__>:
    22dc:	2a 88       	ldd	r2, Y+18	; 0x12
    22de:	39 88       	ldd	r3, Y+17	; 0x11
    22e0:	48 88       	ldd	r4, Y+16	; 0x10
    22e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    22e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    22e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    22e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    22ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    22ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    22ee:	b9 84       	ldd	r11, Y+9	; 0x09
    22f0:	c8 84       	ldd	r12, Y+8	; 0x08
    22f2:	df 80       	ldd	r13, Y+7	; 0x07
    22f4:	ee 80       	ldd	r14, Y+6	; 0x06
    22f6:	fd 80       	ldd	r15, Y+5	; 0x05
    22f8:	0c 81       	ldd	r16, Y+4	; 0x04
    22fa:	1b 81       	ldd	r17, Y+3	; 0x03
    22fc:	aa 81       	ldd	r26, Y+2	; 0x02
    22fe:	b9 81       	ldd	r27, Y+1	; 0x01
    2300:	ce 0f       	add	r28, r30
    2302:	d1 1d       	adc	r29, r1
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	de bf       	out	0x3e, r29	; 62
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	cd bf       	out	0x3d, r28	; 61
    230e:	ed 01       	movw	r28, r26
    2310:	08 95       	ret

00002312 <_exit>:
    2312:	f8 94       	cli

00002314 <__stop_program>:
    2314:	ff cf       	rjmp	.-2      	; 0x2314 <__stop_program>
