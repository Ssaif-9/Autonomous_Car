
Autonomous_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002922  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  00002922  000029b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  008000f6  008000f6  00002a4c  2**0
                  ALLOC
  3 .stab         00002994  00000000  00000000  00002a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000899  00000000  00000000  000053e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000003e0  00000000  00000000  00005c80  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000035e4  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001237  00000000  00000000  00009644  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000021d5  00000000  00000000  0000a87b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cf4  00000000  00000000  0000ca50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001058  00000000  00000000  0000d744  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022da  00000000  00000000  0000e79c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00010a76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__ctors_end>
       4:	0c 94 22 0c 	jmp	0x1844	; 0x1844 <__vector_1>
       8:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <__vector_2>
       c:	0c 94 4b 0c 	jmp	0x1896	; 0x1896 <__vector_3>
      10:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <__vector_4>
      14:	0c 94 d7 0d 	jmp	0x1bae	; 0x1bae <__vector_5>
      18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      28:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <__vector_10>
      2c:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__vector_11>
      30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      34:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <__vector_13>
      38:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__vector_14>
      3c:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__vector_15>
      40:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__vector_16>
      44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      48:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      4c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      54:	ce 00       	.word	0x00ce	; ????
      56:	97 00       	.word	0x0097	; ????
      58:	97 00       	.word	0x0097	; ????
      5a:	97 00       	.word	0x0097	; ????
      5c:	97 00       	.word	0x0097	; ????
      5e:	97 00       	.word	0x0097	; ????
      60:	97 00       	.word	0x0097	; ????
      62:	97 00       	.word	0x0097	; ????
      64:	97 00       	.word	0x0097	; ????
      66:	97 00       	.word	0x0097	; ????
      68:	97 00       	.word	0x0097	; ????
      6a:	97 00       	.word	0x0097	; ????
      6c:	97 00       	.word	0x0097	; ????
      6e:	97 00       	.word	0x0097	; ????
      70:	97 00       	.word	0x0097	; ????
      72:	97 00       	.word	0x0097	; ????
      74:	97 00       	.word	0x0097	; ????
      76:	97 00       	.word	0x0097	; ????
      78:	ad 00       	.word	0x00ad	; ????
      7a:	f5 00       	.word	0x00f5	; ????
      7c:	97 00       	.word	0x0097	; ????
      7e:	97 00       	.word	0x0097	; ????
      80:	aa 00       	.word	0x00aa	; ????
      82:	b6 00       	.word	0x00b6	; ????
      84:	bc 00       	.word	0x00bc	; ????
      86:	97 00       	.word	0x0097	; ????
      88:	97 00       	.word	0x0097	; ????
      8a:	97 00       	.word	0x0097	; ????
      8c:	97 00       	.word	0x0097	; ????
      8e:	97 00       	.word	0x0097	; ????
      90:	97 00       	.word	0x0097	; ????
      92:	97 00       	.word	0x0097	; ????
      94:	97 00       	.word	0x0097	; ????
      96:	97 00       	.word	0x0097	; ????
      98:	97 00       	.word	0x0097	; ????
      9a:	b0 00       	.word	0x00b0	; ????
      9c:	97 00       	.word	0x0097	; ????
      9e:	e1 00       	.word	0x00e1	; ????
      a0:	19 01       	movw	r2, r18
      a2:	eb 00       	.word	0x00eb	; ????
      a4:	07 01       	movw	r0, r14
      a6:	97 00       	.word	0x0097	; ????
      a8:	97 00       	.word	0x0097	; ????
      aa:	97 00       	.word	0x0097	; ????
      ac:	97 00       	.word	0x0097	; ????
      ae:	97 00       	.word	0x0097	; ????
      b0:	97 00       	.word	0x0097	; ????
      b2:	97 00       	.word	0x0097	; ????
      b4:	97 00       	.word	0x0097	; ????
      b6:	97 00       	.word	0x0097	; ????
      b8:	97 00       	.word	0x0097	; ????
      ba:	fe 00       	.word	0x00fe	; ????
      bc:	97 00       	.word	0x0097	; ????
      be:	97 00       	.word	0x0097	; ????
      c0:	97 00       	.word	0x0097	; ????
      c2:	97 00       	.word	0x0097	; ????
      c4:	97 00       	.word	0x0097	; ????
      c6:	b3 00       	.word	0x00b3	; ????
      c8:	b9 00       	.word	0x00b9	; ????
      ca:	97 00       	.word	0x0097	; ????
      cc:	97 00       	.word	0x0097	; ????
      ce:	97 00       	.word	0x0097	; ????
      d0:	97 00       	.word	0x0097	; ????
      d2:	97 00       	.word	0x0097	; ????
      d4:	97 00       	.word	0x0097	; ????
      d6:	bf 00       	.word	0x00bf	; ????
      d8:	97 00       	.word	0x0097	; ????
      da:	97 00       	.word	0x0097	; ????
      dc:	97 00       	.word	0x0097	; ????
      de:	e6 00       	.word	0x00e6	; ????
      e0:	1e 01       	movw	r2, r28
      e2:	f0 00       	.word	0x00f0	; ????
      e4:	10 01       	movw	r2, r0

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf e5       	ldi	r28, 0x5F	; 95
      ec:	d8 e0       	ldi	r29, 0x08	; 8
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
      f2:	10 e0       	ldi	r17, 0x00	; 0
      f4:	a0 e6       	ldi	r26, 0x60	; 96
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	e2 e2       	ldi	r30, 0x22	; 34
      fa:	f9 e2       	ldi	r31, 0x29	; 41
      fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x10>
      fe:	05 90       	lpm	r0, Z+
     100:	0d 92       	st	X+, r0
     102:	a6 3f       	cpi	r26, 0xF6	; 246
     104:	b1 07       	cpc	r27, r17
     106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0xc>

00000108 <__do_clear_bss>:
     108:	11 e0       	ldi	r17, 0x01	; 1
     10a:	a6 ef       	ldi	r26, 0xF6	; 246
     10c:	b0 e0       	ldi	r27, 0x00	; 0
     10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
     110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
     112:	a1 32       	cpi	r26, 0x21	; 33
     114:	b1 07       	cpc	r27, r17
     116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
     118:	0e 94 53 02 	call	0x4a6	; 0x4a6 <main>
     11c:	0c 94 8f 14 	jmp	0x291e	; 0x291e <_exit>

00000120 <__bad_interrupt>:
     120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <BlueToothMode_SuperLoop>:
		BlueToothMode_SuperLoop();
	}	
}

void BlueToothMode_SuperLoop()
{
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	0f 92       	push	r0
     12a:	cd b7       	in	r28, 0x3d	; 61
     12c:	de b7       	in	r29, 0x3e	; 62
	u8 BlueToothValue;
	while(1)
	{	
		BLUETOOTH_ReceiveChar(&BlueToothValue);
     12e:	ce 01       	movw	r24, r28
     130:	01 96       	adiw	r24, 0x01	; 1
     132:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <BLUETOOTH_ReceiveChar>
		switch(BlueToothValue)
     136:	89 81       	ldd	r24, Y+1	; 0x01
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	c0 97       	sbiw	r24, 0x30	; 48
     13c:	89 34       	cpi	r24, 0x49	; 73
     13e:	91 05       	cpc	r25, r1
     140:	b0 f7       	brcc	.-20     	; 0x12e <BlueToothMode_SuperLoop+0xa>
     142:	86 5d       	subi	r24, 0xD6	; 214
     144:	9f 4f       	sbci	r25, 0xFF	; 255
     146:	fc 01       	movw	r30, r24
     148:	ee 0f       	add	r30, r30
     14a:	ff 1f       	adc	r31, r31
     14c:	05 90       	lpm	r0, Z+
     14e:	f4 91       	lpm	r31, Z
     150:	e0 2d       	mov	r30, r0
     152:	09 94       	ijmp
		{
			case 'F' :
			WHEEL_MoveForward();
     154:	0e 94 cd 06 	call	0xd9a	; 0xd9a <WHEEL_MoveForward>
			break;
     158:	ea cf       	rjmp	.-44     	; 0x12e <BlueToothMode_SuperLoop+0xa>
			
			case 'B' :
			WHEEL_MoveBackward ();
     15a:	0e 94 e7 06 	call	0xdce	; 0xdce <WHEEL_MoveBackward>
			break;
     15e:	e7 cf       	rjmp	.-50     	; 0x12e <BlueToothMode_SuperLoop+0xa>
			
			case 'S' :
			WHEEL_Stop ();
     160:	0e 94 01 07 	call	0xe02	; 0xe02 <WHEEL_Stop>
			break;
     164:	e4 cf       	rjmp	.-56     	; 0x12e <BlueToothMode_SuperLoop+0xa>
			
			case 'i' :
			WHEEL_MoveForwardRight ();
     166:	0e 94 1b 07 	call	0xe36	; 0xe36 <WHEEL_MoveForwardRight>
			break;
     16a:	e1 cf       	rjmp	.-62     	; 0x12e <BlueToothMode_SuperLoop+0xa>
			
			case 'G' :
			WHEEL_MoveForwardleft ();
     16c:	0e 94 35 07 	call	0xe6a	; 0xe6a <WHEEL_MoveForwardleft>
			break;
     170:	de cf       	rjmp	.-68     	; 0x12e <BlueToothMode_SuperLoop+0xa>
			
			case 'j' :
			WHEEL_MoveBackwardRight ();
     172:	0e 94 69 07 	call	0xed2	; 0xed2 <WHEEL_MoveBackwardRight>
			break;
     176:	db cf       	rjmp	.-74     	; 0x12e <BlueToothMode_SuperLoop+0xa>
			
			case 'H' :
			WHEEL_MoveBackwardleft ();
     178:	0e 94 4f 07 	call	0xe9e	; 0xe9e <WHEEL_MoveBackwardleft>
			break;
     17c:	d8 cf       	rjmp	.-80     	; 0x12e <BlueToothMode_SuperLoop+0xa>
			
			case 'q' :
			if(Speed<MAX_SPEED)
     17e:	80 91 e3 00 	lds	r24, 0x00E3
     182:	90 91 e4 00 	lds	r25, 0x00E4
     186:	84 36       	cpi	r24, 0x64	; 100
     188:	91 05       	cpc	r25, r1
     18a:	88 f6       	brcc	.-94     	; 0x12e <BlueToothMode_SuperLoop+0xa>
			{
				Speed+=1;
     18c:	01 96       	adiw	r24, 0x01	; 1
     18e:	90 93 e4 00 	sts	0x00E4, r25
     192:	80 93 e3 00 	sts	0x00E3, r24
				WHEEL_SendDutyCycleAndStart(Speed);
     196:	0e 94 84 07 	call	0xf08	; 0xf08 <WHEEL_SendDutyCycleAndStart>
     19a:	c9 cf       	rjmp	.-110    	; 0x12e <BlueToothMode_SuperLoop+0xa>
			{	
			}
			break;
			
			case '0' :
			if (Speed>MIN_SPEED)
     19c:	80 91 e3 00 	lds	r24, 0x00E3
     1a0:	90 91 e4 00 	lds	r25, 0x00E4
     1a4:	00 97       	sbiw	r24, 0x00	; 0
     1a6:	19 f2       	breq	.-122    	; 0x12e <BlueToothMode_SuperLoop+0xa>
			{
				Speed-=1;
     1a8:	01 97       	sbiw	r24, 0x01	; 1
     1aa:	90 93 e4 00 	sts	0x00E4, r25
     1ae:	80 93 e3 00 	sts	0x00E3, r24
				Speed == MIN_SPEED? (WHEEL_Stop()) : (WHEEL_SendDutyCycleAndStart(Speed)) ;
     1b2:	00 97       	sbiw	r24, 0x00	; 0
     1b4:	19 f4       	brne	.+6      	; 0x1bc <BlueToothMode_SuperLoop+0x98>
     1b6:	0e 94 01 07 	call	0xe02	; 0xe02 <WHEEL_Stop>
     1ba:	b9 cf       	rjmp	.-142    	; 0x12e <BlueToothMode_SuperLoop+0xa>
     1bc:	0e 94 84 07 	call	0xf08	; 0xf08 <WHEEL_SendDutyCycleAndStart>
     1c0:	b6 cf       	rjmp	.-148    	; 0x12e <BlueToothMode_SuperLoop+0xa>
			{
			}
			break;
			
			case 'U' :         //BACK LIGHT ON
			LED_TurnON(LED_BACK_PORT,LED_BACK_PIN);
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	62 e0       	ldi	r22, 0x02	; 2
     1c6:	0e 94 74 05 	call	0xae8	; 0xae8 <LED_TurnON>
			break;
     1ca:	b1 cf       	rjmp	.-158    	; 0x12e <BlueToothMode_SuperLoop+0xa>
			
			case 'u' :         //BACK LIGHT OFF
			LED_TurnOFF(LED_BACK_PORT,LED_BACK_PIN);
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	62 e0       	ldi	r22, 0x02	; 2
     1d0:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <LED_TurnOFF>
			break;
     1d4:	ac cf       	rjmp	.-168    	; 0x12e <BlueToothMode_SuperLoop+0xa>
			
			case 'W' :         //Flash  ON
			LED_TurnON(LED_FLASH_PORT,LED_FLASH_PIN);
     1d6:	80 e0       	ldi	r24, 0x00	; 0
     1d8:	61 e0       	ldi	r22, 0x01	; 1
     1da:	0e 94 74 05 	call	0xae8	; 0xae8 <LED_TurnON>
			break;
     1de:	a7 cf       	rjmp	.-178    	; 0x12e <BlueToothMode_SuperLoop+0xa>
			
			case 'w' :         //Flash  OFF
			LED_TurnOFF(LED_FLASH_PORT,LED_FLASH_PIN);
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	61 e0       	ldi	r22, 0x01	; 1
     1e4:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <LED_TurnOFF>
			break;
     1e8:	a2 cf       	rjmp	.-188    	; 0x12e <BlueToothMode_SuperLoop+0xa>
			
			case 'C' :         //FR  ON
			LED_TurnON(LED_FORWARD_RIGHT_PORT,LED2_FORWARD_RIGHT_PIN);
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	64 e0       	ldi	r22, 0x04	; 4
     1ee:	0e 94 74 05 	call	0xae8	; 0xae8 <LED_TurnON>
			LED_TurnOFF(LED_FORWARD_LEFT_PORT,LED2_FORWARD_LEFT_PIN);
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	63 e0       	ldi	r22, 0x03	; 3
     1f6:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <LED_TurnOFF>
			break;
     1fa:	99 cf       	rjmp	.-206    	; 0x12e <BlueToothMode_SuperLoop+0xa>
			
			case 'c' :         //FR  OFF
			LED_TurnOFF(LED_FORWARD_RIGHT_PORT,LED2_FORWARD_RIGHT_PIN);
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	64 e0       	ldi	r22, 0x04	; 4
     200:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <LED_TurnOFF>
			LED_TurnOFF(LED_FORWARD_LEFT_PORT,LED2_FORWARD_LEFT_PIN);
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	63 e0       	ldi	r22, 0x03	; 3
     208:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <LED_TurnOFF>
			break;
     20c:	90 cf       	rjmp	.-224    	; 0x12e <BlueToothMode_SuperLoop+0xa>
			
			case 'X' :         //FL  ON
			LED_TurnOFF(LED_FORWARD_RIGHT_PORT,LED2_FORWARD_RIGHT_PIN);
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	64 e0       	ldi	r22, 0x04	; 4
     212:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <LED_TurnOFF>
			LED_TurnON(LED_FORWARD_LEFT_PORT,LED2_FORWARD_LEFT_PIN);
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	63 e0       	ldi	r22, 0x03	; 3
     21a:	0e 94 74 05 	call	0xae8	; 0xae8 <LED_TurnON>
			break;
     21e:	87 cf       	rjmp	.-242    	; 0x12e <BlueToothMode_SuperLoop+0xa>
			
			case 'x' :         //FL  OFF
			LED_TurnOFF(LED_FORWARD_RIGHT_PORT,LED2_FORWARD_RIGHT_PIN);
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	64 e0       	ldi	r22, 0x04	; 4
     224:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <LED_TurnOFF>
			LED_TurnOFF(LED_FORWARD_LEFT_PORT,LED2_FORWARD_LEFT_PIN);
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	63 e0       	ldi	r22, 0x03	; 3
     22c:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <LED_TurnOFF>
			break;
     230:	7e cf       	rjmp	.-260    	; 0x12e <BlueToothMode_SuperLoop+0xa>
			
			
			case 'V' :         //Horn  ON
			BUZZER_TurnOn(BUZZER_PORT,BUZZER_PIN);
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	65 e0       	ldi	r22, 0x05	; 5
     236:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <BUZZER_TurnOn>
			break;
     23a:	79 cf       	rjmp	.-270    	; 0x12e <BlueToothMode_SuperLoop+0xa>
			
			case 'v' :         //Horn  OFF
			BUZZER_TurnOff(BUZZER_PORT,BUZZER_PIN);
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	65 e0       	ldi	r22, 0x05	; 5
     240:	0e 94 04 03 	call	0x608	; 0x608 <BUZZER_TurnOff>
			break;
     244:	74 cf       	rjmp	.-280    	; 0x12e <BlueToothMode_SuperLoop+0xa>

00000246 <UltraSonicMode_SuperLoop>:
	}
}


void UltraSonicMode_SuperLoop()
{
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	cd b7       	in	r28, 0x3d	; 61
     24c:	de b7       	in	r29, 0x3e	; 62
     24e:	2c 97       	sbiw	r28, 0x0c	; 12
     250:	0f b6       	in	r0, 0x3f	; 63
     252:	f8 94       	cli
     254:	de bf       	out	0x3e, r29	; 62
     256:	0f be       	out	0x3f, r0	; 63
     258:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
		ULTRASOIC_GetDistance(&UltraSonic_ForwardValue);
		LCD_ClearDesplay();
		LCD_GoToLocation(1,1);
		LCD_SendString("Distance=");
     25a:	0f 2e       	mov	r0, r31
     25c:	f0 e6       	ldi	r31, 0x60	; 96
     25e:	af 2e       	mov	r10, r31
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	bf 2e       	mov	r11, r31
     264:	f0 2d       	mov	r31, r0
		LCD_SendIntegarNumber((u16)UltraSonic_ForwardValue);
		LCD_SendString("CM");
     266:	0a e6       	ldi	r16, 0x6A	; 106
     268:	10 e0       	ldi	r17, 0x00	; 0
			//	MOVE A Little Backward
			WHEEL_MoveBackward();
			LED_TurnON(LED_BACK_PORT,LED_BACK_PIN);
			LCD_ClearDesplay();
			LCD_GoToLocation(1,1);
			LCD_SendString("      Back      ");
     26a:	0f 2e       	mov	r0, r31
     26c:	fd e7       	ldi	r31, 0x7D	; 125
     26e:	6f 2e       	mov	r6, r31
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	7f 2e       	mov	r7, r31
     274:	f0 2d       	mov	r31, r0
			// Measure Distance At Right
			SERVO_TurnON(RIGHT_Angle);
			ULTRASOIC_GetDistance(&UltraSonic_RightValue);
			LCD_ClearDesplay();
			LCD_GoToLocation(1,1);
			LCD_SendString("R_Distance=");
     276:	0f 2e       	mov	r0, r31
     278:	fe e8       	ldi	r31, 0x8E	; 142
     27a:	4f 2e       	mov	r4, r31
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	5f 2e       	mov	r5, r31
     280:	f0 2d       	mov	r31, r0
			// Measure Distance At Left
			SERVO_TurnON(LEFT_Angle);
			ULTRASOIC_GetDistance(&UltraSonic_LeftValue);
			LCD_ClearDesplay();
			LCD_GoToLocation(1,1);
			LCD_SendString("L_Distance=");
     282:	0f 2e       	mov	r0, r31
     284:	fa e9       	ldi	r31, 0x9A	; 154
     286:	2f 2e       	mov	r2, r31
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	3f 2e       	mov	r3, r31
     28c:	f0 2d       	mov	r31, r0
		if (UltraSonic_ForwardValue==0 || UltraSonic_ForwardValue>30.0)
		{
			WHEEL_MoveForward();
			//LCD_ClearDesplay();
			LCD_GoToLocation(1,2);
			LCD_SendString("    Forward    ");
     28e:	0f 2e       	mov	r0, r31
     290:	fd e6       	ldi	r31, 0x6D	; 109
     292:	8f 2e       	mov	r8, r31
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	9f 2e       	mov	r9, r31
     298:	f0 2d       	mov	r31, r0
	f64 UltraSonic_ForwardValue ;
	f64 UltraSonic_RightValue ;
	f64 UltraSonic_LeftValue ;
	while(1)
	{
		ULTRASOIC_GetDistance(&UltraSonic_ForwardValue);
     29a:	ce 01       	movw	r24, r28
     29c:	01 96       	adiw	r24, 0x01	; 1
     29e:	0e 94 c3 05 	call	0xb86	; 0xb86 <ULTRASOIC_GetDistance>
		LCD_ClearDesplay();
     2a2:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_ClearDesplay>
		LCD_GoToLocation(1,1);
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	61 e0       	ldi	r22, 0x01	; 1
     2aa:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_GoToLocation>
		LCD_SendString("Distance=");
     2ae:	c5 01       	movw	r24, r10
     2b0:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
		LCD_SendIntegarNumber((u16)UltraSonic_ForwardValue);
     2b4:	69 81       	ldd	r22, Y+1	; 0x01
     2b6:	7a 81       	ldd	r23, Y+2	; 0x02
     2b8:	8b 81       	ldd	r24, Y+3	; 0x03
     2ba:	9c 81       	ldd	r25, Y+4	; 0x04
     2bc:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__fixunssfsi>
     2c0:	dc 01       	movw	r26, r24
     2c2:	cb 01       	movw	r24, r22
     2c4:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_SendIntegarNumber>
		LCD_SendString("CM");
     2c8:	c8 01       	movw	r24, r16
     2ca:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
		if (UltraSonic_ForwardValue==0 || UltraSonic_ForwardValue>30.0)
     2ce:	c9 80       	ldd	r12, Y+1	; 0x01
     2d0:	da 80       	ldd	r13, Y+2	; 0x02
     2d2:	eb 80       	ldd	r14, Y+3	; 0x03
     2d4:	fc 80       	ldd	r15, Y+4	; 0x04
     2d6:	c7 01       	movw	r24, r14
     2d8:	b6 01       	movw	r22, r12
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	a9 01       	movw	r20, r18
     2e0:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__cmpsf2>
     2e4:	88 23       	and	r24, r24
     2e6:	51 f0       	breq	.+20     	; 0x2fc <UltraSonicMode_SuperLoop+0xb6>
     2e8:	c7 01       	movw	r24, r14
     2ea:	b6 01       	movw	r22, r12
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 ef       	ldi	r20, 0xF0	; 240
     2f2:	51 e4       	ldi	r21, 0x41	; 65
     2f4:	0e 94 b9 10 	call	0x2172	; 0x2172 <__gesf2>
     2f8:	18 16       	cp	r1, r24
     2fa:	54 f4       	brge	.+20     	; 0x310 <UltraSonicMode_SuperLoop+0xca>
		{
			WHEEL_MoveForward();
     2fc:	0e 94 cd 06 	call	0xd9a	; 0xd9a <WHEEL_MoveForward>
			//LCD_ClearDesplay();
			LCD_GoToLocation(1,2);
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	62 e0       	ldi	r22, 0x02	; 2
     304:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_GoToLocation>
			LCD_SendString("    Forward    ");
     308:	c4 01       	movw	r24, r8
     30a:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
     30e:	c5 cf       	rjmp	.-118    	; 0x29a <UltraSonicMode_SuperLoop+0x54>
		}
		else
		{
			BUZZER_Toggle(BUZZER_PORT,BUZZER_PIN);
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	65 e0       	ldi	r22, 0x05	; 5
     314:	0e 94 0c 03 	call	0x618	; 0x618 <BUZZER_Toggle>
			
			//	MOVE A Little Backward
			WHEEL_MoveBackward();
     318:	0e 94 e7 06 	call	0xdce	; 0xdce <WHEEL_MoveBackward>
			LED_TurnON(LED_BACK_PORT,LED_BACK_PIN);
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	62 e0       	ldi	r22, 0x02	; 2
     320:	0e 94 74 05 	call	0xae8	; 0xae8 <LED_TurnON>
			LCD_ClearDesplay();
     324:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_ClearDesplay>
			LCD_GoToLocation(1,1);
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	61 e0       	ldi	r22, 0x01	; 1
     32c:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_GoToLocation>
			LCD_SendString("      Back      ");
     330:	c3 01       	movw	r24, r6
     332:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     336:	8f ef       	ldi	r24, 0xFF	; 255
     338:	99 e6       	ldi	r25, 0x69	; 105
     33a:	a8 e1       	ldi	r26, 0x18	; 24
     33c:	81 50       	subi	r24, 0x01	; 1
     33e:	90 40       	sbci	r25, 0x00	; 0
     340:	a0 40       	sbci	r26, 0x00	; 0
     342:	e1 f7       	brne	.-8      	; 0x33c <UltraSonicMode_SuperLoop+0xf6>
     344:	00 c0       	rjmp	.+0      	; 0x346 <UltraSonicMode_SuperLoop+0x100>
     346:	00 00       	nop
			_delay_ms(500);
			WHEEL_Stop();
     348:	0e 94 01 07 	call	0xe02	; 0xe02 <WHEEL_Stop>
			
			// Measure Distance At Right
			SERVO_TurnON(RIGHT_Angle);
     34c:	60 e0       	ldi	r22, 0x00	; 0
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	84 e3       	ldi	r24, 0x34	; 52
     352:	93 e4       	ldi	r25, 0x43	; 67
     354:	0e 94 93 05 	call	0xb26	; 0xb26 <SERVO_TurnON>
			ULTRASOIC_GetDistance(&UltraSonic_RightValue);
     358:	ce 01       	movw	r24, r28
     35a:	05 96       	adiw	r24, 0x05	; 5
     35c:	0e 94 c3 05 	call	0xb86	; 0xb86 <ULTRASOIC_GetDistance>
			LCD_ClearDesplay();
     360:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_ClearDesplay>
			LCD_GoToLocation(1,1);
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	61 e0       	ldi	r22, 0x01	; 1
     368:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_GoToLocation>
			LCD_SendString("R_Distance=");
     36c:	c2 01       	movw	r24, r4
     36e:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
			LCD_SendIntegarNumber((u16)UltraSonic_RightValue);
     372:	6d 81       	ldd	r22, Y+5	; 0x05
     374:	7e 81       	ldd	r23, Y+6	; 0x06
     376:	8f 81       	ldd	r24, Y+7	; 0x07
     378:	98 85       	ldd	r25, Y+8	; 0x08
     37a:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__fixunssfsi>
     37e:	dc 01       	movw	r26, r24
     380:	cb 01       	movw	r24, r22
     382:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_SendIntegarNumber>
			LCD_SendString("CM");
     386:	c8 01       	movw	r24, r16
     388:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
     38c:	8f ef       	ldi	r24, 0xFF	; 255
     38e:	99 e6       	ldi	r25, 0x69	; 105
     390:	a8 e1       	ldi	r26, 0x18	; 24
     392:	81 50       	subi	r24, 0x01	; 1
     394:	90 40       	sbci	r25, 0x00	; 0
     396:	a0 40       	sbci	r26, 0x00	; 0
     398:	e1 f7       	brne	.-8      	; 0x392 <UltraSonicMode_SuperLoop+0x14c>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <UltraSonicMode_SuperLoop+0x156>
     39c:	00 00       	nop
			_delay_ms(500);
			
			// Measure Distance At Left
			SERVO_TurnON(LEFT_Angle);
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	70 e0       	ldi	r23, 0x00	; 0
     3a2:	cb 01       	movw	r24, r22
     3a4:	0e 94 93 05 	call	0xb26	; 0xb26 <SERVO_TurnON>
			ULTRASOIC_GetDistance(&UltraSonic_LeftValue);
     3a8:	ce 01       	movw	r24, r28
     3aa:	09 96       	adiw	r24, 0x09	; 9
     3ac:	0e 94 c3 05 	call	0xb86	; 0xb86 <ULTRASOIC_GetDistance>
			LCD_ClearDesplay();
     3b0:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_ClearDesplay>
			LCD_GoToLocation(1,1);
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	61 e0       	ldi	r22, 0x01	; 1
     3b8:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_GoToLocation>
			LCD_SendString("L_Distance=");
     3bc:	c1 01       	movw	r24, r2
     3be:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
			LCD_SendIntegarNumber((u16)UltraSonic_LeftValue);
     3c2:	69 85       	ldd	r22, Y+9	; 0x09
     3c4:	7a 85       	ldd	r23, Y+10	; 0x0a
     3c6:	8b 85       	ldd	r24, Y+11	; 0x0b
     3c8:	9c 85       	ldd	r25, Y+12	; 0x0c
     3ca:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__fixunssfsi>
     3ce:	dc 01       	movw	r26, r24
     3d0:	cb 01       	movw	r24, r22
     3d2:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_SendIntegarNumber>
			LCD_SendString("CM");
     3d6:	c8 01       	movw	r24, r16
     3d8:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
     3dc:	8f ef       	ldi	r24, 0xFF	; 255
     3de:	99 e6       	ldi	r25, 0x69	; 105
     3e0:	a8 e1       	ldi	r26, 0x18	; 24
     3e2:	81 50       	subi	r24, 0x01	; 1
     3e4:	90 40       	sbci	r25, 0x00	; 0
     3e6:	a0 40       	sbci	r26, 0x00	; 0
     3e8:	e1 f7       	brne	.-8      	; 0x3e2 <UltraSonicMode_SuperLoop+0x19c>
     3ea:	00 c0       	rjmp	.+0      	; 0x3ec <UltraSonicMode_SuperLoop+0x1a6>
     3ec:	00 00       	nop
			_delay_ms(500);
			LED_TurnOFF(LED_BACK_PORT,LED_BACK_PIN);
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	62 e0       	ldi	r22, 0x02	; 2
     3f2:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <LED_TurnOFF>
			
			if (UltraSonic_RightValue > UltraSonic_LeftValue)
     3f6:	6d 81       	ldd	r22, Y+5	; 0x05
     3f8:	7e 81       	ldd	r23, Y+6	; 0x06
     3fa:	8f 81       	ldd	r24, Y+7	; 0x07
     3fc:	98 85       	ldd	r25, Y+8	; 0x08
     3fe:	29 85       	ldd	r18, Y+9	; 0x09
     400:	3a 85       	ldd	r19, Y+10	; 0x0a
     402:	4b 85       	ldd	r20, Y+11	; 0x0b
     404:	5c 85       	ldd	r21, Y+12	; 0x0c
     406:	0e 94 b9 10 	call	0x2172	; 0x2172 <__gesf2>
     40a:	18 16       	cp	r1, r24
     40c:	34 f5       	brge	.+76     	; 0x45a <UltraSonicMode_SuperLoop+0x214>
			{
				//MOVE Right
				SERVO_TurnON(FORWARD_Angle);
     40e:	60 e0       	ldi	r22, 0x00	; 0
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	84 eb       	ldi	r24, 0xB4	; 180
     414:	92 e4       	ldi	r25, 0x42	; 66
     416:	0e 94 93 05 	call	0xb26	; 0xb26 <SERVO_TurnON>
				LED_TurnON(LED_FORWARD_RIGHT_PORT,LED2_FORWARD_RIGHT_PIN);
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	64 e0       	ldi	r22, 0x04	; 4
     41e:	0e 94 74 05 	call	0xae8	; 0xae8 <LED_TurnON>
				WHEEL_MoveForwardRight();
     422:	0e 94 1b 07 	call	0xe36	; 0xe36 <WHEEL_MoveForwardRight>
				LCD_ClearDesplay();
     426:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_ClearDesplay>
				LCD_GoToLocation(1,1);
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	61 e0       	ldi	r22, 0x01	; 1
     42e:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_GoToLocation>
				LCD_SendString("  Turn Right->> ");
     432:	86 ea       	ldi	r24, 0xA6	; 166
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
     43a:	8f ef       	ldi	r24, 0xFF	; 255
     43c:	93 ed       	ldi	r25, 0xD3	; 211
     43e:	a0 e3       	ldi	r26, 0x30	; 48
     440:	81 50       	subi	r24, 0x01	; 1
     442:	90 40       	sbci	r25, 0x00	; 0
     444:	a0 40       	sbci	r26, 0x00	; 0
     446:	e1 f7       	brne	.-8      	; 0x440 <UltraSonicMode_SuperLoop+0x1fa>
     448:	00 c0       	rjmp	.+0      	; 0x44a <UltraSonicMode_SuperLoop+0x204>
     44a:	00 00       	nop
				_delay_ms(1000);
				LED_TurnOFF(LED_FORWARD_RIGHT_PORT,LED2_FORWARD_RIGHT_PIN);
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	64 e0       	ldi	r22, 0x04	; 4
     450:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <LED_TurnOFF>
				WHEEL_Stop();
     454:	0e 94 01 07 	call	0xe02	; 0xe02 <WHEEL_Stop>
     458:	20 cf       	rjmp	.-448    	; 0x29a <UltraSonicMode_SuperLoop+0x54>
			}
			else
			{
				//MOVE Left 
				SERVO_TurnON(FORWARD_Angle);
     45a:	60 e0       	ldi	r22, 0x00	; 0
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	84 eb       	ldi	r24, 0xB4	; 180
     460:	92 e4       	ldi	r25, 0x42	; 66
     462:	0e 94 93 05 	call	0xb26	; 0xb26 <SERVO_TurnON>
				LED_TurnON(LED_FORWARD_LEFT_PORT,LED2_FORWARD_LEFT_PIN);
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	63 e0       	ldi	r22, 0x03	; 3
     46a:	0e 94 74 05 	call	0xae8	; 0xae8 <LED_TurnON>
				WHEEL_MoveForwardleft();
     46e:	0e 94 35 07 	call	0xe6a	; 0xe6a <WHEEL_MoveForwardleft>
				LCD_ClearDesplay();
     472:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_ClearDesplay>
				LCD_GoToLocation(1,1);
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	61 e0       	ldi	r22, 0x01	; 1
     47a:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_GoToLocation>
				LCD_SendString(" <<- Turn Left  ");
     47e:	87 eb       	ldi	r24, 0xB7	; 183
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
     486:	8f ef       	ldi	r24, 0xFF	; 255
     488:	93 ed       	ldi	r25, 0xD3	; 211
     48a:	a0 e3       	ldi	r26, 0x30	; 48
     48c:	81 50       	subi	r24, 0x01	; 1
     48e:	90 40       	sbci	r25, 0x00	; 0
     490:	a0 40       	sbci	r26, 0x00	; 0
     492:	e1 f7       	brne	.-8      	; 0x48c <UltraSonicMode_SuperLoop+0x246>
     494:	00 c0       	rjmp	.+0      	; 0x496 <UltraSonicMode_SuperLoop+0x250>
     496:	00 00       	nop
				_delay_ms(1000);
				LED_TurnOFF(LED_FORWARD_LEFT_PORT,LED2_FORWARD_LEFT_PIN);
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	63 e0       	ldi	r22, 0x03	; 3
     49c:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <LED_TurnOFF>
				WHEEL_Stop();
     4a0:	0e 94 01 07 	call	0xe02	; 0xe02 <WHEEL_Stop>
     4a4:	fa ce       	rjmp	.-524    	; 0x29a <UltraSonicMode_SuperLoop+0x54>

000004a6 <main>:
#define MAX_SPEED                         100
#define MIN_SPEED                         0


int main(void)
{
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	0f 92       	push	r0
     4ac:	cd b7       	in	r28, 0x3d	; 61
     4ae:	de b7       	in	r29, 0x3e	; 62
	u8 ModeValue ;
	
	GLBI_Enable();
     4b0:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <GLBI_Enable>
	
	BUTTON_init(BUTTON_MODE_PORT,BUTTON_MODE_PIN);
     4b4:	83 e0       	ldi	r24, 0x03	; 3
     4b6:	62 e0       	ldi	r22, 0x02	; 2
     4b8:	0e 94 de 02 	call	0x5bc	; 0x5bc <BUTTON_init>
	BUTTON_ReadValue(BUTTON_MODE_PORT,BUTTON_MODE_PIN,&ModeValue,BUTTON_PullDown);
     4bc:	83 e0       	ldi	r24, 0x03	; 3
     4be:	62 e0       	ldi	r22, 0x02	; 2
     4c0:	ae 01       	movw	r20, r28
     4c2:	4f 5f       	subi	r20, 0xFF	; 255
     4c4:	5f 4f       	sbci	r21, 0xFF	; 255
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	0e 94 ed 02 	call	0x5da	; 0x5da <BUTTON_ReadValue>
	
	LCD_init();
     4cc:	0e 94 89 03 	call	0x712	; 0x712 <LCD_init>
	
	WHEEL_Init();
     4d0:	0e 94 9f 06 	call	0xd3e	; 0xd3e <WHEEL_Init>
	
	LED_init(LED_BACK_PORT,LED_BACK_PIN);
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	62 e0       	ldi	r22, 0x02	; 2
     4d8:	0e 94 6c 05 	call	0xad8	; 0xad8 <LED_init>
	LED_init(LED_FORWARD_RIGHT_PORT,LED2_FORWARD_RIGHT_PIN);
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	64 e0       	ldi	r22, 0x04	; 4
     4e0:	0e 94 6c 05 	call	0xad8	; 0xad8 <LED_init>
	LED_init(LED_FORWARD_LEFT_PORT,LED2_FORWARD_LEFT_PIN);
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	63 e0       	ldi	r22, 0x03	; 3
     4e8:	0e 94 6c 05 	call	0xad8	; 0xad8 <LED_init>
	LED_init(LED_FLASH_PORT,LED_FLASH_PIN);
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	61 e0       	ldi	r22, 0x01	; 1
     4f0:	0e 94 6c 05 	call	0xad8	; 0xad8 <LED_init>
	BUZZER_init(BUZZER_PORT,BUZZER_PIN);
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	65 e0       	ldi	r22, 0x05	; 5
     4f8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <BUZZER_init>
	
	LED_TurnOFF(LED_FORWARD_RIGHT_PORT,LED2_FORWARD_RIGHT_PIN);
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	64 e0       	ldi	r22, 0x04	; 4
     500:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <LED_TurnOFF>
	LED_TurnOFF(LED_FORWARD_LEFT_PORT,LED2_FORWARD_LEFT_PIN);
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	63 e0       	ldi	r22, 0x03	; 3
     508:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <LED_TurnOFF>
	LED_TurnOFF(LED_BACK_PORT,LED_BACK_PIN);
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	62 e0       	ldi	r22, 0x02	; 2
     510:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <LED_TurnOFF>
	LED_TurnOFF(LED_FLASH_PORT,LED_FLASH_PIN);
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	61 e0       	ldi	r22, 0x01	; 1
     518:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <LED_TurnOFF>
	BUZZER_TurnOff(BUZZER_PORT,BUZZER_PIN);
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	65 e0       	ldi	r22, 0x05	; 5
     520:	0e 94 04 03 	call	0x608	; 0x608 <BUZZER_TurnOff>
	
	
	if (ULTRASONIC_MODE == ModeValue)
     524:	89 81       	ldd	r24, Y+1	; 0x01
     526:	88 23       	and	r24, r24
     528:	31 f5       	brne	.+76     	; 0x576 <main+0xd0>
	{
		LCD_GoToLocation(1,1);
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	61 e0       	ldi	r22, 0x01	; 1
     52e:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_GoToLocation>
		LCD_SendString("Ultrasonic ON");
     532:	88 ec       	ldi	r24, 0xC8	; 200
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
     53a:	8f ef       	ldi	r24, 0xFF	; 255
     53c:	93 ed       	ldi	r25, 0xD3	; 211
     53e:	a0 e3       	ldi	r26, 0x30	; 48
     540:	81 50       	subi	r24, 0x01	; 1
     542:	90 40       	sbci	r25, 0x00	; 0
     544:	a0 40       	sbci	r26, 0x00	; 0
     546:	e1 f7       	brne	.-8      	; 0x540 <main+0x9a>
     548:	00 c0       	rjmp	.+0      	; 0x54a <main+0xa4>
     54a:	00 00       	nop
		_delay_ms(1000);
		
		SERVO_init();
     54c:	0e 94 8b 05 	call	0xb16	; 0xb16 <SERVO_init>
		SERVO_TurnON(FORWARD_Angle);
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	84 eb       	ldi	r24, 0xB4	; 180
     556:	92 e4       	ldi	r25, 0x42	; 66
     558:	0e 94 93 05 	call	0xb26	; 0xb26 <SERVO_TurnON>
		ULTRASOIC_init();
     55c:	0e 94 ab 05 	call	0xb56	; 0xb56 <ULTRASOIC_init>
     560:	8f ef       	ldi	r24, 0xFF	; 255
     562:	93 ed       	ldi	r25, 0xD3	; 211
     564:	a0 e3       	ldi	r26, 0x30	; 48
     566:	81 50       	subi	r24, 0x01	; 1
     568:	90 40       	sbci	r25, 0x00	; 0
     56a:	a0 40       	sbci	r26, 0x00	; 0
     56c:	e1 f7       	brne	.-8      	; 0x566 <main+0xc0>
     56e:	00 c0       	rjmp	.+0      	; 0x570 <main+0xca>
     570:	00 00       	nop
		_delay_ms(1000);
		UltraSonicMode_SuperLoop();
     572:	0e 94 23 01 	call	0x246	; 0x246 <UltraSonicMode_SuperLoop>
	}
	else
	{
		LCD_GoToLocation(1,1);
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	61 e0       	ldi	r22, 0x01	; 1
     57a:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_GoToLocation>
		LCD_SendString("BlueTooth ON");
     57e:	86 ed       	ldi	r24, 0xD6	; 214
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
     586:	8f ef       	ldi	r24, 0xFF	; 255
     588:	93 ed       	ldi	r25, 0xD3	; 211
     58a:	a0 e3       	ldi	r26, 0x30	; 48
     58c:	81 50       	subi	r24, 0x01	; 1
     58e:	90 40       	sbci	r25, 0x00	; 0
     590:	a0 40       	sbci	r26, 0x00	; 0
     592:	e1 f7       	brne	.-8      	; 0x58c <main+0xe6>
     594:	00 c0       	rjmp	.+0      	; 0x596 <main+0xf0>
     596:	00 00       	nop
		_delay_ms(1000);
		LCD_ClearDesplay();
     598:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_ClearDesplay>
		
		BLUETOOTH_init();
     59c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <BLUETOOTH_init>
		BlueToothMode_SuperLoop();
     5a0:	0e 94 92 00 	call	0x124	; 0x124 <BlueToothMode_SuperLoop>

000005a4 <BLUETOOTH_init>:
#include "../include/BLUETOOTH_private.h"


void BLUETOOTH_init(void)
{
	UART_init();
     5a4:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <UART_init>
}
     5a8:	08 95       	ret

000005aa <BLUETOOTH_TransimitChar>:

void BLUETOOTH_TransimitChar(u8 TransimitData)
{
	UART_TransmiteChar(TransimitData);
     5aa:	0e 94 65 0e 	call	0x1cca	; 0x1cca <UART_TransmiteChar>
}
     5ae:	08 95       	ret

000005b0 <BLUETOOTH_ReceiveChar>:

void BLUETOOTH_ReceiveChar(u8* ReceiveData)
{
	UART_ReceiveChar(ReceiveData);
     5b0:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <UART_ReceiveChar>
}
     5b4:	08 95       	ret

000005b6 <BLUETOOTH_TransimitString>:

void BLUETOOTH_TransimitString (u8* TransimitData)
{
	UART_TransmiteString(TransimitData);
     5b6:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <UART_TransmiteString>
     5ba:	08 95       	ret

000005bc <BUTTON_init>:
#include "../include/BUTTON_private.h"


void BUTTON_init(u8 ButtonPort ,u8 ButtonPin)
{
	if (ButtonPort <=3 && ButtonPin<=7)
     5bc:	84 30       	cpi	r24, 0x04	; 4
     5be:	28 f4       	brcc	.+10     	; 0x5ca <BUTTON_init+0xe>
     5c0:	68 30       	cpi	r22, 0x08	; 8
     5c2:	18 f4       	brcc	.+6      	; 0x5ca <BUTTON_init+0xe>
	{
		DIO_SetPinDirection(ButtonPort,ButtonPin,DIO_PIN_INPUT);
     5c4:	40 e0       	ldi	r20, 0x00	; 0
     5c6:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_SetPinDirection>
     5ca:	08 95       	ret

000005cc <BUTTON_ActivePullUp>:
	}
}

void BUTTON_ActivePullUp(u8 ButtonPort ,u8 ButtonPin)
{
	if (ButtonPort <=3 && ButtonPin<=7)
     5cc:	84 30       	cpi	r24, 0x04	; 4
     5ce:	20 f4       	brcc	.+8      	; 0x5d8 <BUTTON_ActivePullUp+0xc>
     5d0:	68 30       	cpi	r22, 0x08	; 8
     5d2:	10 f4       	brcc	.+4      	; 0x5d8 <BUTTON_ActivePullUp+0xc>
	{
		DIO_activePinInPullUpResistance(ButtonPort,ButtonPin);
     5d4:	0e 94 80 0a 	call	0x1500	; 0x1500 <DIO_activePinInPullUpResistance>
     5d8:	08 95       	ret

000005da <BUTTON_ReadValue>:
	}
}

void BUTTON_ReadValue(u8 ButtonPort ,u8 ButtonPin,u8* PinValue,u8 BUTTON_STATUE)
{
	if (ButtonPort <=3 && ButtonPin<=7)
     5da:	84 30       	cpi	r24, 0x04	; 4
     5dc:	20 f4       	brcc	.+8      	; 0x5e6 <BUTTON_ReadValue+0xc>
     5de:	68 30       	cpi	r22, 0x08	; 8
     5e0:	10 f4       	brcc	.+4      	; 0x5e6 <BUTTON_ReadValue+0xc>
	{
		DIO_ReadValue(ButtonPort,ButtonPin,PinValue);
     5e2:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_ReadValue>
     5e6:	08 95       	ret

000005e8 <BUZZER_init>:
#include "../include/BUZZER_interface.h"
#include "../include/BUZZER_private.h"

void BUZZER_init(u8 BuzzerPort ,u8 BuzzerPin )
{
	if(BuzzerPort<=3 && BuzzerPin<=7)
     5e8:	84 30       	cpi	r24, 0x04	; 4
     5ea:	28 f4       	brcc	.+10     	; 0x5f6 <BUZZER_init+0xe>
     5ec:	68 30       	cpi	r22, 0x08	; 8
     5ee:	18 f4       	brcc	.+6      	; 0x5f6 <BUZZER_init+0xe>
	{
		DIO_SetPinDirection(BuzzerPort,BuzzerPin,DIO_PIN_OUTPUT);
     5f0:	41 e0       	ldi	r20, 0x01	; 1
     5f2:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_SetPinDirection>
     5f6:	08 95       	ret

000005f8 <BUZZER_TurnOn>:
}


void BUZZER_TurnOn(u8 BuzzerPort ,u8 BuzzerPin )
{
	if(BuzzerPort<=3 && BuzzerPin<=7)
     5f8:	84 30       	cpi	r24, 0x04	; 4
     5fa:	28 f4       	brcc	.+10     	; 0x606 <BUZZER_TurnOn+0xe>
     5fc:	68 30       	cpi	r22, 0x08	; 8
     5fe:	18 f4       	brcc	.+6      	; 0x606 <BUZZER_TurnOn+0xe>
	{
		DIO_SetPinValue(BuzzerPort,BuzzerPin,DIO_PIN_HIGH);
     600:	41 e0       	ldi	r20, 0x01	; 1
     602:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
     606:	08 95       	ret

00000608 <BUZZER_TurnOff>:
	}
}

void BUZZER_TurnOff(u8 BuzzerPort ,u8 BuzzerPin )
{
	if(BuzzerPort<=3 && BuzzerPin<=7)
     608:	84 30       	cpi	r24, 0x04	; 4
     60a:	28 f4       	brcc	.+10     	; 0x616 <BUZZER_TurnOff+0xe>
     60c:	68 30       	cpi	r22, 0x08	; 8
     60e:	18 f4       	brcc	.+6      	; 0x616 <BUZZER_TurnOff+0xe>
	{
		DIO_SetPinValue(BuzzerPort,BuzzerPin,DIO_PIN_LOW);
     610:	40 e0       	ldi	r20, 0x00	; 0
     612:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
     616:	08 95       	ret

00000618 <BUZZER_Toggle>:
	}
}	

void BUZZER_Toggle(u8 BuzzerPort ,u8 BuzzerPin )
{
	if(BuzzerPort<=3 && BuzzerPin<=7)
     618:	84 30       	cpi	r24, 0x04	; 4
     61a:	20 f4       	brcc	.+8      	; 0x624 <BUZZER_Toggle+0xc>
     61c:	68 30       	cpi	r22, 0x08	; 8
     61e:	10 f4       	brcc	.+4      	; 0x624 <BUZZER_Toggle+0xc>
	{
		DIO_TogglePinValue(BuzzerPort,BuzzerPin);
     620:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_TogglePinValue>
     624:	08 95       	ret

00000626 <private_WriteHalfPort>:
{
	LCD_sendComnd(ShiftCmnd);
}

void private_WriteHalfPort (u8 Value)
{
     626:	cf 93       	push	r28
     628:	c8 2f       	mov	r28, r24
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit0)) ? (DIO_SetPinValue(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_HIGH));
     62a:	80 fd       	sbrc	r24, 0
     62c:	06 c0       	rjmp	.+12     	; 0x63a <private_WriteHalfPort+0x14>
     62e:	82 e0       	ldi	r24, 0x02	; 2
     630:	64 e0       	ldi	r22, 0x04	; 4
     632:	40 e0       	ldi	r20, 0x00	; 0
     634:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
     638:	05 c0       	rjmp	.+10     	; 0x644 <private_WriteHalfPort+0x1e>
     63a:	82 e0       	ldi	r24, 0x02	; 2
     63c:	64 e0       	ldi	r22, 0x04	; 4
     63e:	41 e0       	ldi	r20, 0x01	; 1
     640:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit1)) ? (DIO_SetPinValue(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_HIGH));
     644:	8c 2f       	mov	r24, r28
     646:	86 95       	lsr	r24
     648:	80 fd       	sbrc	r24, 0
     64a:	06 c0       	rjmp	.+12     	; 0x658 <private_WriteHalfPort+0x32>
     64c:	82 e0       	ldi	r24, 0x02	; 2
     64e:	65 e0       	ldi	r22, 0x05	; 5
     650:	40 e0       	ldi	r20, 0x00	; 0
     652:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
     656:	05 c0       	rjmp	.+10     	; 0x662 <private_WriteHalfPort+0x3c>
     658:	82 e0       	ldi	r24, 0x02	; 2
     65a:	65 e0       	ldi	r22, 0x05	; 5
     65c:	41 e0       	ldi	r20, 0x01	; 1
     65e:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit2)) ? (DIO_SetPinValue(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_HIGH));
     662:	8c 2f       	mov	r24, r28
     664:	86 95       	lsr	r24
     666:	86 95       	lsr	r24
     668:	80 fd       	sbrc	r24, 0
     66a:	06 c0       	rjmp	.+12     	; 0x678 <private_WriteHalfPort+0x52>
     66c:	82 e0       	ldi	r24, 0x02	; 2
     66e:	66 e0       	ldi	r22, 0x06	; 6
     670:	40 e0       	ldi	r20, 0x00	; 0
     672:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
     676:	05 c0       	rjmp	.+10     	; 0x682 <private_WriteHalfPort+0x5c>
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	66 e0       	ldi	r22, 0x06	; 6
     67c:	41 e0       	ldi	r20, 0x01	; 1
     67e:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit3)) ? (DIO_SetPinValue(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_HIGH));
     682:	c6 95       	lsr	r28
     684:	c6 95       	lsr	r28
     686:	c6 95       	lsr	r28
     688:	c0 fd       	sbrc	r28, 0
     68a:	06 c0       	rjmp	.+12     	; 0x698 <private_WriteHalfPort+0x72>
     68c:	82 e0       	ldi	r24, 0x02	; 2
     68e:	67 e0       	ldi	r22, 0x07	; 7
     690:	40 e0       	ldi	r20, 0x00	; 0
     692:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
     696:	05 c0       	rjmp	.+10     	; 0x6a2 <private_WriteHalfPort+0x7c>
     698:	82 e0       	ldi	r24, 0x02	; 2
     69a:	67 e0       	ldi	r22, 0x07	; 7
     69c:	41 e0       	ldi	r20, 0x01	; 1
     69e:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
}
     6a2:	cf 91       	pop	r28
     6a4:	08 95       	ret

000006a6 <LCD_sendComnd>:
	
	#endif
}

void LCD_sendComnd(u8 Cmnd)
{
     6a6:	cf 93       	push	r28
     6a8:	c8 2f       	mov	r28, r24
	#if   LCD_MODE == LCD_FourBitMode
	
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	61 e0       	ldi	r22, 0x01	; 1
     6ae:	40 e0       	ldi	r20, 0x00	; 0
     6b0:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	62 e0       	ldi	r22, 0x02	; 2
     6b8:	40 e0       	ldi	r20, 0x00	; 0
     6ba:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	
	private_WriteHalfPort(Cmnd>>4);                                    //PORTA_REG= (PORTA_REG & 0x0f) | (Cmnd & 0xf0)
     6be:	8c 2f       	mov	r24, r28
     6c0:	82 95       	swap	r24
     6c2:	8f 70       	andi	r24, 0x0F	; 15
     6c4:	0e 94 13 03 	call	0x626	; 0x626 <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	63 e0       	ldi	r22, 0x03	; 3
     6cc:	41 e0       	ldi	r20, 0x01	; 1
     6ce:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
     6d2:	8f e9       	ldi	r24, 0x9F	; 159
     6d4:	9f e0       	ldi	r25, 0x0F	; 15
     6d6:	01 97       	sbiw	r24, 0x01	; 1
     6d8:	f1 f7       	brne	.-4      	; 0x6d6 <LCD_sendComnd+0x30>
     6da:	00 c0       	rjmp	.+0      	; 0x6dc <LCD_sendComnd+0x36>
     6dc:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	63 e0       	ldi	r22, 0x03	; 3
     6e2:	40 e0       	ldi	r20, 0x00	; 0
     6e4:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	
	private_WriteHalfPort(Cmnd);                                      //PORTA_REG= (PORTA_REG & 0x0f) | ((Cmnd & 0xf0) <<4)
     6e8:	8c 2f       	mov	r24, r28
     6ea:	0e 94 13 03 	call	0x626	; 0x626 <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	63 e0       	ldi	r22, 0x03	; 3
     6f2:	41 e0       	ldi	r20, 0x01	; 1
     6f4:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
     6f8:	8f e9       	ldi	r24, 0x9F	; 159
     6fa:	9f e0       	ldi	r25, 0x0F	; 15
     6fc:	01 97       	sbiw	r24, 0x01	; 1
     6fe:	f1 f7       	brne	.-4      	; 0x6fc <LCD_sendComnd+0x56>
     700:	00 c0       	rjmp	.+0      	; 0x702 <LCD_sendComnd+0x5c>
     702:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	63 e0       	ldi	r22, 0x03	; 3
     708:	40 e0       	ldi	r20, 0x00	; 0
     70a:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#endif
	
}
     70e:	cf 91       	pop	r28
     710:	08 95       	ret

00000712 <LCD_init>:

void LCD_init(void)
{
	#if   LCD_MODE == LCD_FourBitMode 
	//SET PIN AS OUTPUT
	DIO_SetPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_OUTPUT);
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	61 e0       	ldi	r22, 0x01	; 1
     716:	41 e0       	ldi	r20, 0x01	; 1
     718:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_OUTPUT);
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	62 e0       	ldi	r22, 0x02	; 2
     720:	41 e0       	ldi	r20, 0x01	; 1
     722:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_OUTPUT);
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	63 e0       	ldi	r22, 0x03	; 3
     72a:	41 e0       	ldi	r20, 0x01	; 1
     72c:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_SetPinDirection>
	
	
	DIO_SetPinDirection(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_OUTPUT);
     730:	82 e0       	ldi	r24, 0x02	; 2
     732:	64 e0       	ldi	r22, 0x04	; 4
     734:	41 e0       	ldi	r20, 0x01	; 1
     736:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_OUTPUT);
     73a:	82 e0       	ldi	r24, 0x02	; 2
     73c:	65 e0       	ldi	r22, 0x05	; 5
     73e:	41 e0       	ldi	r20, 0x01	; 1
     740:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_OUTPUT);
     744:	82 e0       	ldi	r24, 0x02	; 2
     746:	66 e0       	ldi	r22, 0x06	; 6
     748:	41 e0       	ldi	r20, 0x01	; 1
     74a:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_OUTPUT);
     74e:	82 e0       	ldi	r24, 0x02	; 2
     750:	67 e0       	ldi	r22, 0x07	; 7
     752:	41 e0       	ldi	r20, 0x01	; 1
     754:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_SetPinDirection>
     758:	8f e7       	ldi	r24, 0x7F	; 127
     75a:	95 eb       	ldi	r25, 0xB5	; 181
     75c:	a1 e0       	ldi	r26, 0x01	; 1
     75e:	81 50       	subi	r24, 0x01	; 1
     760:	90 40       	sbci	r25, 0x00	; 0
     762:	a0 40       	sbci	r26, 0x00	; 0
     764:	e1 f7       	brne	.-8      	; 0x75e <LCD_init+0x4c>
     766:	00 c0       	rjmp	.+0      	; 0x768 <LCD_init+0x56>
     768:	00 00       	nop
	
	
	_delay_ms(35);
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	61 e0       	ldi	r22, 0x01	; 1
     76e:	40 e0       	ldi	r20, 0x00	; 0
     770:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	62 e0       	ldi	r22, 0x02	; 2
     778:	40 e0       	ldi	r20, 0x00	; 0
     77a:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	private_WriteHalfPort(LCD_COMMAND_FOR_FOUR_BIT_MODE);
     77e:	82 e0       	ldi	r24, 0x02	; 2
     780:	0e 94 13 03 	call	0x626	; 0x626 <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	63 e0       	ldi	r22, 0x03	; 3
     788:	41 e0       	ldi	r20, 0x01	; 1
     78a:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
     78e:	af e9       	ldi	r26, 0x9F	; 159
     790:	bf e0       	ldi	r27, 0x0F	; 15
     792:	11 97       	sbiw	r26, 0x01	; 1
     794:	f1 f7       	brne	.-4      	; 0x792 <LCD_init+0x80>
     796:	00 c0       	rjmp	.+0      	; 0x798 <LCD_init+0x86>
     798:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	63 e0       	ldi	r22, 0x03	; 3
     79e:	40 e0       	ldi	r20, 0x00	; 0
     7a0:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	
	LCD_sendComnd(LCD_FUNCTION_SET);
     7a4:	88 e2       	ldi	r24, 0x28	; 40
     7a6:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7aa:	b0 ef       	ldi	r27, 0xF0	; 240
     7ac:	ba 95       	dec	r27
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <LCD_init+0x9a>
	_delay_us(45);
	
	LCD_sendComnd(LCD_DISPLAY_ON_OFF_CONTROL);
     7b0:	8c e0       	ldi	r24, 0x0C	; 12
     7b2:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendComnd>
     7b6:	80 ef       	ldi	r24, 0xF0	; 240
     7b8:	8a 95       	dec	r24
     7ba:	f1 f7       	brne	.-4      	; 0x7b8 <LCD_init+0xa6>
	_delay_us(45);
	
	LCD_sendComnd(LCD_DESPLAY_CLEAR);
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7c2:	af e3       	ldi	r26, 0x3F	; 63
     7c4:	bf e1       	ldi	r27, 0x1F	; 31
     7c6:	11 97       	sbiw	r26, 0x01	; 1
     7c8:	f1 f7       	brne	.-4      	; 0x7c6 <LCD_init+0xb4>
     7ca:	00 c0       	rjmp	.+0      	; 0x7cc <LCD_init+0xba>
     7cc:	00 00       	nop
	_delay_ms(2);
	
	LCD_sendComnd(LCD_ENTRY_MODE_SET);
     7ce:	86 e0       	ldi	r24, 0x06	; 6
     7d0:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7d4:	b0 ef       	ldi	r27, 0xF0	; 240
     7d6:	ba 95       	dec	r27
     7d8:	f1 f7       	brne	.-4      	; 0x7d6 <LCD_init+0xc4>
	
	LCD_sendComnd(LCD_ENTRY_MODE_SET);
	_delay_us(45);
	
	#endif
}
     7da:	08 95       	ret

000007dc <LCD_sendChar>:
	
}


void LCD_sendChar(u8 Character_Data)
{
     7dc:	cf 93       	push	r28
     7de:	c8 2f       	mov	r28, r24
	#if   LCD_MODE == LCD_FourBitMode
	
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	61 e0       	ldi	r22, 0x01	; 1
     7e4:	41 e0       	ldi	r20, 0x01	; 1
     7e6:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	62 e0       	ldi	r22, 0x02	; 2
     7ee:	40 e0       	ldi	r20, 0x00	; 0
     7f0:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	
	private_WriteHalfPort(Character_Data>>4);                        //PORTA_REG= (PORTA_REG & 0x0f) | (Character_Data & 0xf0)
     7f4:	8c 2f       	mov	r24, r28
     7f6:	82 95       	swap	r24
     7f8:	8f 70       	andi	r24, 0x0F	; 15
     7fa:	0e 94 13 03 	call	0x626	; 0x626 <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	63 e0       	ldi	r22, 0x03	; 3
     802:	41 e0       	ldi	r20, 0x01	; 1
     804:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     808:	8f e9       	ldi	r24, 0x9F	; 159
     80a:	9f e0       	ldi	r25, 0x0F	; 15
     80c:	01 97       	sbiw	r24, 0x01	; 1
     80e:	f1 f7       	brne	.-4      	; 0x80c <LCD_sendChar+0x30>
     810:	00 c0       	rjmp	.+0      	; 0x812 <LCD_sendChar+0x36>
     812:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	63 e0       	ldi	r22, 0x03	; 3
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	
	private_WriteHalfPort(Character_Data);                         //PORTA_REG= (PORTA_REG & 0x0f) | ((Character_Data & 0xf0) <<4)
     81e:	8c 2f       	mov	r24, r28
     820:	0e 94 13 03 	call	0x626	; 0x626 <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	63 e0       	ldi	r22, 0x03	; 3
     828:	41 e0       	ldi	r20, 0x01	; 1
     82a:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
     82e:	8f e9       	ldi	r24, 0x9F	; 159
     830:	9f e0       	ldi	r25, 0x0F	; 15
     832:	01 97       	sbiw	r24, 0x01	; 1
     834:	f1 f7       	brne	.-4      	; 0x832 <LCD_sendChar+0x56>
     836:	00 c0       	rjmp	.+0      	; 0x838 <LCD_sendChar+0x5c>
     838:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	63 e0       	ldi	r22, 0x03	; 3
     83e:	40 e0       	ldi	r20, 0x00	; 0
     840:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#endif
}
     844:	cf 91       	pop	r28
     846:	08 95       	ret

00000848 <LCD_SendString>:

void LCD_SendString (u8 *String_Data)
{
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	ec 01       	movw	r28, r24
	while((*String_Data)!='\0')
     84e:	88 81       	ld	r24, Y
     850:	88 23       	and	r24, r24
     852:	31 f0       	breq	.+12     	; 0x860 <__stack+0x1>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#endif
}

void LCD_SendString (u8 *String_Data)
     854:	21 96       	adiw	r28, 0x01	; 1
{
	while((*String_Data)!='\0')
	{
		LCD_sendChar(*String_Data);
     856:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_sendChar>
	#endif
}

void LCD_SendString (u8 *String_Data)
{
	while((*String_Data)!='\0')
     85a:	89 91       	ld	r24, Y+
     85c:	88 23       	and	r24, r24
     85e:	d9 f7       	brne	.-10     	; 0x856 <LCD_SendString+0xe>
	{
		LCD_sendChar(*String_Data);
		String_Data++;
	}
}
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	08 95       	ret

00000866 <LCD_SendRealNumber>:

void LCD_SendRealNumber(f64 Number)
{
     866:	8f 92       	push	r8
     868:	9f 92       	push	r9
     86a:	af 92       	push	r10
     86c:	bf 92       	push	r11
     86e:	cf 92       	push	r12
     870:	df 92       	push	r13
     872:	ef 92       	push	r14
     874:	ff 92       	push	r15
     876:	0f 93       	push	r16
     878:	1f 93       	push	r17
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	cd b7       	in	r28, 0x3d	; 61
     880:	de b7       	in	r29, 0x3e	; 62
     882:	60 97       	sbiw	r28, 0x10	; 16
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	f8 94       	cli
     888:	de bf       	out	0x3e, r29	; 62
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	cd bf       	out	0x3d, r28	; 61
     88e:	6b 01       	movw	r12, r22
     890:	7c 01       	movw	r14, r24
	u8 str [16];
	u8 *tmpsign = (Number < 0)? "-" : "";
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	a9 01       	movw	r20, r18
     898:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__cmpsf2>
     89c:	88 23       	and	r24, r24
     89e:	5c f4       	brge	.+22     	; 0x8b6 <LCD_SendRealNumber+0x50>
	f32 tmpval = (Number < 0)? -Number : Number;
     8a0:	f7 fa       	bst	r15, 7
     8a2:	f0 94       	com	r15
     8a4:	f7 f8       	bld	r15, 7
     8a6:	f0 94       	com	r15
}

void LCD_SendRealNumber(f64 Number)
{
	u8 str [16];
	u8 *tmpsign = (Number < 0)? "-" : "";
     8a8:	0f 2e       	mov	r0, r31
     8aa:	f5 ee       	ldi	r31, 0xE5	; 229
     8ac:	8f 2e       	mov	r8, r31
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	9f 2e       	mov	r9, r31
     8b2:	f0 2d       	mov	r31, r0
     8b4:	06 c0       	rjmp	.+12     	; 0x8c2 <LCD_SendRealNumber+0x5c>
     8b6:	0f 2e       	mov	r0, r31
     8b8:	f7 ee       	ldi	r31, 0xE7	; 231
     8ba:	8f 2e       	mov	r8, r31
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	9f 2e       	mov	r9, r31
     8c0:	f0 2d       	mov	r31, r0
	f32 tmpval = (Number < 0)? -Number : Number;
	u16 tmpint1 = (u16)tmpval;
     8c2:	c7 01       	movw	r24, r14
     8c4:	b6 01       	movw	r22, r12
     8c6:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__fixunssfsi>
     8ca:	dc 01       	movw	r26, r24
     8cc:	cb 01       	movw	r24, r22
	f32 tmpfrac = tmpval - (float)tmpint1;
	u16 tmpint2 = tmpfrac * 10000;
	sprintf(str,"%s%d.%04d", tmpsign, tmpint1, tmpint2);
     8ce:	2d b7       	in	r18, 0x3d	; 61
     8d0:	3e b7       	in	r19, 0x3e	; 62
     8d2:	2a 50       	subi	r18, 0x0A	; 10
     8d4:	30 40       	sbci	r19, 0x00	; 0
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	f8 94       	cli
     8da:	3e bf       	out	0x3e, r19	; 62
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	2d bf       	out	0x3d, r18	; 61
     8e0:	0d b7       	in	r16, 0x3d	; 61
     8e2:	1e b7       	in	r17, 0x3e	; 62
     8e4:	0f 5f       	subi	r16, 0xFF	; 255
     8e6:	1f 4f       	sbci	r17, 0xFF	; 255
     8e8:	5e 01       	movw	r10, r28
     8ea:	08 94       	sec
     8ec:	a1 1c       	adc	r10, r1
     8ee:	b1 1c       	adc	r11, r1
     8f0:	ed b7       	in	r30, 0x3d	; 61
     8f2:	fe b7       	in	r31, 0x3e	; 62
     8f4:	b2 82       	std	Z+2, r11	; 0x02
     8f6:	a1 82       	std	Z+1, r10	; 0x01
     8f8:	28 ee       	ldi	r18, 0xE8	; 232
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	f8 01       	movw	r30, r16
     8fe:	33 83       	std	Z+3, r19	; 0x03
     900:	22 83       	std	Z+2, r18	; 0x02
     902:	95 82       	std	Z+5, r9	; 0x05
     904:	84 82       	std	Z+4, r8	; 0x04
     906:	97 83       	std	Z+7, r25	; 0x07
     908:	86 83       	std	Z+6, r24	; 0x06
{
	u8 str [16];
	u8 *tmpsign = (Number < 0)? "-" : "";
	f32 tmpval = (Number < 0)? -Number : Number;
	u16 tmpint1 = (u16)tmpval;
	f32 tmpfrac = tmpval - (float)tmpint1;
     90a:	bc 01       	movw	r22, r24
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0e 94 07 10 	call	0x200e	; 0x200e <__floatunsisf>
     914:	9b 01       	movw	r18, r22
     916:	ac 01       	movw	r20, r24
     918:	c7 01       	movw	r24, r14
     91a:	b6 01       	movw	r22, r12
     91c:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__subsf3>
	u16 tmpint2 = tmpfrac * 10000;
     920:	20 e0       	ldi	r18, 0x00	; 0
     922:	30 e4       	ldi	r19, 0x40	; 64
     924:	4c e1       	ldi	r20, 0x1C	; 28
     926:	56 e4       	ldi	r21, 0x46	; 70
     928:	0e 94 bd 10 	call	0x217a	; 0x217a <__mulsf3>
     92c:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__fixunssfsi>
     930:	dc 01       	movw	r26, r24
     932:	cb 01       	movw	r24, r22
	sprintf(str,"%s%d.%04d", tmpsign, tmpint1, tmpint2);
     934:	f8 01       	movw	r30, r16
     936:	91 87       	std	Z+9, r25	; 0x09
     938:	80 87       	std	Z+8, r24	; 0x08
     93a:	0e 94 b8 11 	call	0x2370	; 0x2370 <sprintf>
	LCD_SendString(str);
     93e:	2d b7       	in	r18, 0x3d	; 61
     940:	3e b7       	in	r19, 0x3e	; 62
     942:	26 5f       	subi	r18, 0xF6	; 246
     944:	3f 4f       	sbci	r19, 0xFF	; 255
     946:	0f b6       	in	r0, 0x3f	; 63
     948:	f8 94       	cli
     94a:	3e bf       	out	0x3e, r19	; 62
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	2d bf       	out	0x3d, r18	; 61
     950:	c5 01       	movw	r24, r10
     952:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
}
     956:	60 96       	adiw	r28, 0x10	; 16
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	f8 94       	cli
     95c:	de bf       	out	0x3e, r29	; 62
     95e:	0f be       	out	0x3f, r0	; 63
     960:	cd bf       	out	0x3d, r28	; 61
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	ff 90       	pop	r15
     96c:	ef 90       	pop	r14
     96e:	df 90       	pop	r13
     970:	cf 90       	pop	r12
     972:	bf 90       	pop	r11
     974:	af 90       	pop	r10
     976:	9f 90       	pop	r9
     978:	8f 90       	pop	r8
     97a:	08 95       	ret

0000097c <LCD_ClearDesplay>:

void LCD_ClearDesplay()
{
	LCD_sendComnd (LCD_DESPLAY_CLEAR);
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendComnd>
     982:	8f e3       	ldi	r24, 0x3F	; 63
     984:	9f e1       	ldi	r25, 0x1F	; 31
     986:	01 97       	sbiw	r24, 0x01	; 1
     988:	f1 f7       	brne	.-4      	; 0x986 <LCD_ClearDesplay+0xa>
     98a:	00 c0       	rjmp	.+0      	; 0x98c <LCD_ClearDesplay+0x10>
     98c:	00 00       	nop
	_delay_ms(2);
	LCD_sendComnd (LCD_Cursor_At_Home_position);	
     98e:	80 e8       	ldi	r24, 0x80	; 128
     990:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendComnd>
}
     994:	08 95       	ret

00000996 <LCD_GoToLocation>:

void LCD_GoToLocation(u8 X_Location, u8 LineNumber)
{
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	00 d0       	rcall	.+0      	; 0x99c <LCD_GoToLocation+0x6>
     99c:	00 d0       	rcall	.+0      	; 0x99e <LCD_GoToLocation+0x8>
     99e:	cd b7       	in	r28, 0x3d	; 61
     9a0:	de b7       	in	r29, 0x3e	; 62
	u8 FirstLocation[] = {0x80, 0xC0, 0x94, 0xD4};
     9a2:	90 e8       	ldi	r25, 0x80	; 128
     9a4:	99 83       	std	Y+1, r25	; 0x01
     9a6:	90 ec       	ldi	r25, 0xC0	; 192
     9a8:	9a 83       	std	Y+2, r25	; 0x02
     9aa:	94 e9       	ldi	r25, 0x94	; 148
     9ac:	9b 83       	std	Y+3, r25	; 0x03
     9ae:	94 ed       	ldi	r25, 0xD4	; 212
     9b0:	9c 83       	std	Y+4, r25	; 0x04
	LCD_sendComnd(FirstLocation[LineNumber-1] + X_Location-1);
     9b2:	81 50       	subi	r24, 0x01	; 1
     9b4:	fe 01       	movw	r30, r28
     9b6:	e6 0f       	add	r30, r22
     9b8:	f1 1d       	adc	r31, r1
     9ba:	90 81       	ld	r25, Z
     9bc:	89 0f       	add	r24, r25
     9be:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9c2:	8f e9       	ldi	r24, 0x9F	; 159
     9c4:	9f e0       	ldi	r25, 0x0F	; 15
     9c6:	01 97       	sbiw	r24, 0x01	; 1
     9c8:	f1 f7       	brne	.-4      	; 0x9c6 <LCD_GoToLocation+0x30>
     9ca:	00 c0       	rjmp	.+0      	; 0x9cc <LCD_GoToLocation+0x36>
     9cc:	00 00       	nop
	_delay_us(1000);
}
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	0f 90       	pop	r0
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	08 95       	ret

000009dc <LCD_SendIntegarNumber>:

void LCD_SendIntegarNumber(u16 IntegerNumber)
{
     9dc:	0f 93       	push	r16
     9de:	1f 93       	push	r17
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	cd b7       	in	r28, 0x3d	; 61
     9e6:	de b7       	in	r29, 0x3e	; 62
     9e8:	a0 97       	sbiw	r28, 0x20	; 32
     9ea:	0f b6       	in	r0, 0x3f	; 63
     9ec:	f8 94       	cli
     9ee:	de bf       	out	0x3e, r29	; 62
     9f0:	0f be       	out	0x3f, r0	; 63
     9f2:	cd bf       	out	0x3d, r28	; 61
	u16 NumberString[16];
	snprintf(NumberString,17,"%d",IntegerNumber);
     9f4:	2d b7       	in	r18, 0x3d	; 61
     9f6:	3e b7       	in	r19, 0x3e	; 62
     9f8:	28 50       	subi	r18, 0x08	; 8
     9fa:	30 40       	sbci	r19, 0x00	; 0
     9fc:	0f b6       	in	r0, 0x3f	; 63
     9fe:	f8 94       	cli
     a00:	3e bf       	out	0x3e, r19	; 62
     a02:	0f be       	out	0x3f, r0	; 63
     a04:	2d bf       	out	0x3d, r18	; 61
     a06:	ed b7       	in	r30, 0x3d	; 61
     a08:	fe b7       	in	r31, 0x3e	; 62
     a0a:	31 96       	adiw	r30, 0x01	; 1
     a0c:	8e 01       	movw	r16, r28
     a0e:	0f 5f       	subi	r16, 0xFF	; 255
     a10:	1f 4f       	sbci	r17, 0xFF	; 255
     a12:	ad b7       	in	r26, 0x3d	; 61
     a14:	be b7       	in	r27, 0x3e	; 62
     a16:	12 96       	adiw	r26, 0x02	; 2
     a18:	1c 93       	st	X, r17
     a1a:	0e 93       	st	-X, r16
     a1c:	11 97       	sbiw	r26, 0x01	; 1
     a1e:	21 e1       	ldi	r18, 0x11	; 17
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	33 83       	std	Z+3, r19	; 0x03
     a24:	22 83       	std	Z+2, r18	; 0x02
     a26:	22 ef       	ldi	r18, 0xF2	; 242
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	35 83       	std	Z+5, r19	; 0x05
     a2c:	24 83       	std	Z+4, r18	; 0x04
     a2e:	97 83       	std	Z+7, r25	; 0x07
     a30:	86 83       	std	Z+6, r24	; 0x06
     a32:	0e 94 88 11 	call	0x2310	; 0x2310 <snprintf>
	LCD_SendString(NumberString);
     a36:	2d b7       	in	r18, 0x3d	; 61
     a38:	3e b7       	in	r19, 0x3e	; 62
     a3a:	28 5f       	subi	r18, 0xF8	; 248
     a3c:	3f 4f       	sbci	r19, 0xFF	; 255
     a3e:	0f b6       	in	r0, 0x3f	; 63
     a40:	f8 94       	cli
     a42:	3e bf       	out	0x3e, r19	; 62
     a44:	0f be       	out	0x3f, r0	; 63
     a46:	2d bf       	out	0x3d, r18	; 61
     a48:	c8 01       	movw	r24, r16
     a4a:	0e 94 24 04 	call	0x848	; 0x848 <LCD_SendString>
}
     a4e:	a0 96       	adiw	r28, 0x20	; 32
     a50:	0f b6       	in	r0, 0x3f	; 63
     a52:	f8 94       	cli
     a54:	de bf       	out	0x3e, r29	; 62
     a56:	0f be       	out	0x3f, r0	; 63
     a58:	cd bf       	out	0x3d, r28	; 61
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	1f 91       	pop	r17
     a60:	0f 91       	pop	r16
     a62:	08 95       	ret

00000a64 <LCD_SendNumberToLocation>:


void LCD_SendNumberToLocation(u16 Number,u8 X_Location, u8 LineNumber)
{
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
     a68:	ec 01       	movw	r28, r24
     a6a:	86 2f       	mov	r24, r22
	LCD_GoToLocation(X_Location,LineNumber);
     a6c:	64 2f       	mov	r22, r20
     a6e:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_GoToLocation>
	LCD_SendIntegarNumber(Number);
     a72:	ce 01       	movw	r24, r28
     a74:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_SendIntegarNumber>
}
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	08 95       	ret

00000a7e <LCD_Shift>:


void LCD_Shift(u8 ShiftCmnd)
{
	LCD_sendComnd(ShiftCmnd);
     a7e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendComnd>
}
     a82:	08 95       	ret

00000a84 <LDR_init>:
#include "../include/LDR_interface.h"
#include "../include/LDR_private.h"

void LDR_init(u8 PortId ,u8 PinId)
{
	if (PortId<=3 && PinId <=7  )
     a84:	84 30       	cpi	r24, 0x04	; 4
     a86:	48 f4       	brcc	.+18     	; 0xa9a <LDR_init+0x16>
     a88:	68 30       	cpi	r22, 0x08	; 8
     a8a:	38 f4       	brcc	.+14     	; 0xa9a <LDR_init+0x16>
	{
		DIO_SetPinDirection(PortId,PinId,DIO_PIN_INPUT);
     a8c:	40 e0       	ldi	r20, 0x00	; 0
     a8e:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_SetPinDirection>
		ADC_init(ADC_REFERENCE_AVCC,ADC_Prescaller_128);
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	60 e8       	ldi	r22, 0x80	; 128
     a96:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <ADC_init>
     a9a:	08 95       	ret

00000a9c <LDR_ReadValue>:
		//No Thing
	}
}

void LDR_ReadValue(u8 ChannalId,u16 *AnalogLdrValue)
{
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	00 d0       	rcall	.+0      	; 0xaa6 <LDR_ReadValue+0xa>
     aa6:	cd b7       	in	r28, 0x3d	; 61
     aa8:	de b7       	in	r29, 0x3e	; 62
     aaa:	8b 01       	movw	r16, r22
	u16 DigitalLdrValue ;
	if (AnalogLdrValue != NULL && ChannalId<=7)
     aac:	61 15       	cp	r22, r1
     aae:	71 05       	cpc	r23, r1
     ab0:	61 f0       	breq	.+24     	; 0xaca <LDR_ReadValue+0x2e>
     ab2:	88 30       	cpi	r24, 0x08	; 8
     ab4:	50 f4       	brcc	.+20     	; 0xaca <LDR_ReadValue+0x2e>
	{
		ADC_ReadDigitalValue(ChannalId,&DigitalLdrValue);
     ab6:	be 01       	movw	r22, r28
     ab8:	6f 5f       	subi	r22, 0xFF	; 255
     aba:	7f 4f       	sbci	r23, 0xFF	; 255
     abc:	0e 94 2f 08 	call	0x105e	; 0x105e <ADC_ReadDigitalValue>
		*AnalogLdrValue=DigitalLdrValue;
     ac0:	89 81       	ldd	r24, Y+1	; 0x01
     ac2:	9a 81       	ldd	r25, Y+2	; 0x02
     ac4:	f8 01       	movw	r30, r16
     ac6:	91 83       	std	Z+1, r25	; 0x01
     ac8:	80 83       	st	Z, r24
	}
	else
	{
		//No Thing
	}
     aca:	0f 90       	pop	r0
     acc:	0f 90       	pop	r0
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	1f 91       	pop	r17
     ad4:	0f 91       	pop	r16
     ad6:	08 95       	ret

00000ad8 <LED_init>:
#include "../include/LED_config.h"


void LED_init(u8 LedPort,u8 LedPin)
{
	if (LedPort <=3 && LedPin<=7)
     ad8:	84 30       	cpi	r24, 0x04	; 4
     ada:	28 f4       	brcc	.+10     	; 0xae6 <LED_init+0xe>
     adc:	68 30       	cpi	r22, 0x08	; 8
     ade:	18 f4       	brcc	.+6      	; 0xae6 <LED_init+0xe>
	{
		DIO_SetPinDirection(LedPort,LedPin,DIO_PIN_OUTPUT);
     ae0:	41 e0       	ldi	r20, 0x01	; 1
     ae2:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_SetPinDirection>
     ae6:	08 95       	ret

00000ae8 <LED_TurnON>:
}


void LED_TurnON(u8 LedPort,u8 LedPin)
{
	if (LedPort <=3 && LedPin<=7)
     ae8:	84 30       	cpi	r24, 0x04	; 4
     aea:	28 f4       	brcc	.+10     	; 0xaf6 <LED_TurnON+0xe>
     aec:	68 30       	cpi	r22, 0x08	; 8
     aee:	18 f4       	brcc	.+6      	; 0xaf6 <LED_TurnON+0xe>
	{
		DIO_SetPinValue(LedPort,LedPin,DIO_PIN_HIGH);
     af0:	41 e0       	ldi	r20, 0x01	; 1
     af2:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
     af6:	08 95       	ret

00000af8 <LED_TurnOFF>:
}


void LED_TurnOFF(u8 LedPort,u8 LedPin)
{
	if (LedPort <=3 && LedPin<=7)
     af8:	84 30       	cpi	r24, 0x04	; 4
     afa:	28 f4       	brcc	.+10     	; 0xb06 <LED_TurnOFF+0xe>
     afc:	68 30       	cpi	r22, 0x08	; 8
     afe:	18 f4       	brcc	.+6      	; 0xb06 <LED_TurnOFF+0xe>
	{
		DIO_SetPinValue(LedPort,LedPin,DIO_PIN_LOW);
     b00:	40 e0       	ldi	r20, 0x00	; 0
     b02:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
     b06:	08 95       	ret

00000b08 <LED_Toggle>:
}


void LED_Toggle(u8 LedPort,u8 LedPin)
{
	 if (LedPort <=3 && LedPin<=7)
     b08:	84 30       	cpi	r24, 0x04	; 4
     b0a:	20 f4       	brcc	.+8      	; 0xb14 <LED_Toggle+0xc>
     b0c:	68 30       	cpi	r22, 0x08	; 8
     b0e:	10 f4       	brcc	.+4      	; 0xb14 <LED_Toggle+0xc>
	 {
		DIO_TogglePinValue(LedPort,LedPin);
     b10:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_TogglePinValue>
     b14:	08 95       	ret

00000b16 <SERVO_init>:
#include "../include/SERVO_interface.h"
#include "../include/SERVO_private.h"

void SERVO_init(void)
{
	DIO_SetPinDirection(TMR1_OC1A_PORT,TMR1_OC1A_PIN,DIO_PIN_OUTPUT);
     b16:	83 e0       	ldi	r24, 0x03	; 3
     b18:	65 e0       	ldi	r22, 0x05	; 5
     b1a:	41 e0       	ldi	r20, 0x01	; 1
     b1c:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_SetPinDirection>
	TMR1_init();
     b20:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <TMR1_init>
}
     b24:	08 95       	ret

00000b26 <SERVO_TurnON>:

void SERVO_TurnON(f32 Angle)
{
	f32 DutyCycle;
	DutyCycle=5.0+(Angle/36.0);
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	40 e1       	ldi	r20, 0x10	; 16
     b2c:	52 e4       	ldi	r21, 0x42	; 66
     b2e:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__divsf3>
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	40 ea       	ldi	r20, 0xA0	; 160
     b38:	50 e4       	ldi	r21, 0x40	; 64
     b3a:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__addsf3>
     b3e:	ab 01       	movw	r20, r22
     b40:	bc 01       	movw	r22, r24
	TMR1_SetDutyCycle_And_Freq_Value(50,DutyCycle);
     b42:	82 e3       	ldi	r24, 0x32	; 50
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <TMR1_SetDutyCycle_And_Freq_Value>
	TMR1_Start();
     b4a:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <TMR1_Start>
}
     b4e:	08 95       	ret

00000b50 <SERVO_TurnOFF>:

void SERVO_TurnOFF()
{
	TMR1_Stop();
     b50:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <TMR1_Stop>
}
     b54:	08 95       	ret

00000b56 <ULTRASOIC_init>:



void ULTRASOIC_init(void)
{
	DIO_SetPinDirection(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_PIN_OUTPUT);
     b56:	83 e0       	ldi	r24, 0x03	; 3
     b58:	66 e0       	ldi	r22, 0x06	; 6
     b5a:	41 e0       	ldi	r20, 0x01	; 1
     b5c:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_SetPinDirection>
	DIO_SetPinDirection(ULTRASONIC_ECHO_PORT,ULTRASONIC_ECHO_PIN,DIO_PIN_INPUT);
     b60:	83 e0       	ldi	r24, 0x03	; 3
     b62:	63 e0       	ldi	r22, 0x03	; 3
     b64:	40 e0       	ldi	r20, 0x00	; 0
     b66:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_SetPinDirection>
	DIO_SetPinValue(ULTRASONIC_ECHO_PORT,ULTRASONIC_ECHO_PIN,DIO_PIN_HIGH);
     b6a:	83 e0       	ldi	r24, 0x03	; 3
     b6c:	63 e0       	ldi	r22, 0x03	; 3
     b6e:	41 e0       	ldi	r20, 0x01	; 1
     b70:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	EXTI_Enable(EXTI_INT1,EXTI_ANY_LOGICAL_CHANGE);
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	63 e0       	ldi	r22, 0x03	; 3
     b78:	0e 94 92 0b 	call	0x1724	; 0x1724 <EXTI_Enable>
	TMR0_init();
     b7c:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <TMR0_init>
	TMR0_Start();
     b80:	0e 94 83 0c 	call	0x1906	; 0x1906 <TMR0_Start>
}
     b84:	08 95       	ret

00000b86 <ULTRASOIC_GetDistance>:

void ULTRASOIC_GetDistance(f64* DistanceValue)
{
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	ec 01       	movw	r28, r24
	if (!sensor_working)
     b8c:	80 91 fb 00 	lds	r24, 0x00FB
     b90:	88 23       	and	r24, r24
     b92:	81 f4       	brne	.+32     	; 0xbb4 <ULTRASOIC_GetDistance+0x2e>
	{
		DIO_SetPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_PIN_HIGH);
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	66 e0       	ldi	r22, 0x06	; 6
     b98:	41 e0       	ldi	r20, 0x01	; 1
     b9a:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
     b9e:	80 e5       	ldi	r24, 0x50	; 80
     ba0:	8a 95       	dec	r24
     ba2:	f1 f7       	brne	.-4      	; 0xba0 <ULTRASOIC_GetDistance+0x1a>
		_delay_us(15);
		DIO_SetPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_PIN_LOW);
     ba4:	83 e0       	ldi	r24, 0x03	; 3
     ba6:	66 e0       	ldi	r22, 0x06	; 6
     ba8:	40 e0       	ldi	r20, 0x00	; 0
     baa:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
		sensor_working=1;
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	80 93 fb 00 	sts	0x00FB, r24
	}		
	*DistanceValue=distance;	
     bb4:	80 91 1d 01 	lds	r24, 0x011D
     bb8:	90 91 1e 01 	lds	r25, 0x011E
     bbc:	a0 91 1f 01 	lds	r26, 0x011F
     bc0:	b0 91 20 01 	lds	r27, 0x0120
     bc4:	88 83       	st	Y, r24
     bc6:	99 83       	std	Y+1, r25	; 0x01
     bc8:	aa 83       	std	Y+2, r26	; 0x02
     bca:	bb 83       	std	Y+3, r27	; 0x03
}
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	08 95       	ret

00000bd2 <__vector_2>:


void  __vector_2(void) __attribute__((signal));
void  __vector_2(void)
{
     bd2:	1f 92       	push	r1
     bd4:	0f 92       	push	r0
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	0f 92       	push	r0
     bda:	11 24       	eor	r1, r1
     bdc:	2f 93       	push	r18
     bde:	3f 93       	push	r19
     be0:	4f 93       	push	r20
     be2:	5f 93       	push	r21
     be4:	6f 93       	push	r22
     be6:	7f 93       	push	r23
     be8:	8f 93       	push	r24
     bea:	9f 93       	push	r25
     bec:	af 93       	push	r26
     bee:	bf 93       	push	r27
     bf0:	ef 93       	push	r30
     bf2:	ff 93       	push	r31
	if(sensor_working==1)
     bf4:	80 91 fb 00 	lds	r24, 0x00FB
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	09 f0       	breq	.+2      	; 0xbfe <__vector_2+0x2c>
     bfc:	53 c0       	rjmp	.+166    	; 0xca4 <__vector_2+0xd2>
	{
		if (rising_edge==0)
     bfe:	80 91 fa 00 	lds	r24, 0x00FA
     c02:	88 23       	and	r24, r24
     c04:	69 f4       	brne	.+26     	; 0xc20 <__vector_2+0x4e>
		{
			TCNT0=0X00;
     c06:	12 be       	out	0x32, r1	; 50
			rising_edge=1;
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	80 93 fa 00 	sts	0x00FA, r24
			timer_counter=0;
     c0e:	10 92 f6 00 	sts	0x00F6, r1
     c12:	10 92 f7 00 	sts	0x00F7, r1
     c16:	10 92 f8 00 	sts	0x00F8, r1
     c1a:	10 92 f9 00 	sts	0x00F9, r1
     c1e:	42 c0       	rjmp	.+132    	; 0xca4 <__vector_2+0xd2>
		}
		else
		{
			distance=(343*(timer_counter*256+TCNT0)/320000)+1;
     c20:	22 b7       	in	r18, 0x32	; 50
     c22:	80 91 f6 00 	lds	r24, 0x00F6
     c26:	90 91 f7 00 	lds	r25, 0x00F7
     c2a:	a0 91 f8 00 	lds	r26, 0x00F8
     c2e:	b0 91 f9 00 	lds	r27, 0x00F9
     c32:	66 27       	eor	r22, r22
     c34:	78 2f       	mov	r23, r24
     c36:	89 2f       	mov	r24, r25
     c38:	9a 2f       	mov	r25, r26
     c3a:	62 0f       	add	r22, r18
     c3c:	71 1d       	adc	r23, r1
     c3e:	81 1d       	adc	r24, r1
     c40:	91 1d       	adc	r25, r1
     c42:	27 e5       	ldi	r18, 0x57	; 87
     c44:	31 e0       	ldi	r19, 0x01	; 1
     c46:	40 e0       	ldi	r20, 0x00	; 0
     c48:	50 e0       	ldi	r21, 0x00	; 0
     c4a:	0e 94 20 11 	call	0x2240	; 0x2240 <__mulsi3>
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	32 ee       	ldi	r19, 0xE2	; 226
     c52:	44 e0       	ldi	r20, 0x04	; 4
     c54:	50 e0       	ldi	r21, 0x00	; 0
     c56:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__udivmodsi4>
     c5a:	ca 01       	movw	r24, r20
     c5c:	b9 01       	movw	r22, r18
     c5e:	6f 5f       	subi	r22, 0xFF	; 255
     c60:	7f 4f       	sbci	r23, 0xFF	; 255
     c62:	8f 4f       	sbci	r24, 0xFF	; 255
     c64:	9f 4f       	sbci	r25, 0xFF	; 255
     c66:	0e 94 07 10 	call	0x200e	; 0x200e <__floatunsisf>
     c6a:	dc 01       	movw	r26, r24
     c6c:	cb 01       	movw	r24, r22
     c6e:	80 93 1d 01 	sts	0x011D, r24
     c72:	90 93 1e 01 	sts	0x011E, r25
     c76:	a0 93 1f 01 	sts	0x011F, r26
     c7a:	b0 93 20 01 	sts	0x0120, r27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c7e:	8f ef       	ldi	r24, 0xFF	; 255
     c80:	93 ef       	ldi	r25, 0xF3	; 243
     c82:	a1 e0       	ldi	r26, 0x01	; 1
     c84:	81 50       	subi	r24, 0x01	; 1
     c86:	90 40       	sbci	r25, 0x00	; 0
     c88:	a0 40       	sbci	r26, 0x00	; 0
     c8a:	e1 f7       	brne	.-8      	; 0xc84 <__vector_2+0xb2>
     c8c:	00 c0       	rjmp	.+0      	; 0xc8e <__vector_2+0xbc>
     c8e:	00 00       	nop
			_delay_ms(40);
			timer_counter=0;
     c90:	10 92 f6 00 	sts	0x00F6, r1
     c94:	10 92 f7 00 	sts	0x00F7, r1
     c98:	10 92 f8 00 	sts	0x00F8, r1
     c9c:	10 92 f9 00 	sts	0x00F9, r1
			rising_edge=0;
     ca0:	10 92 fa 00 	sts	0x00FA, r1
		}
	}
}
     ca4:	ff 91       	pop	r31
     ca6:	ef 91       	pop	r30
     ca8:	bf 91       	pop	r27
     caa:	af 91       	pop	r26
     cac:	9f 91       	pop	r25
     cae:	8f 91       	pop	r24
     cb0:	7f 91       	pop	r23
     cb2:	6f 91       	pop	r22
     cb4:	5f 91       	pop	r21
     cb6:	4f 91       	pop	r20
     cb8:	3f 91       	pop	r19
     cba:	2f 91       	pop	r18
     cbc:	0f 90       	pop	r0
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	0f 90       	pop	r0
     cc2:	1f 90       	pop	r1
     cc4:	18 95       	reti

00000cc6 <__vector_11>:


void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     cc6:	1f 92       	push	r1
     cc8:	0f 92       	push	r0
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	0f 92       	push	r0
     cce:	11 24       	eor	r1, r1
     cd0:	2f 93       	push	r18
     cd2:	8f 93       	push	r24
     cd4:	9f 93       	push	r25
     cd6:	af 93       	push	r26
     cd8:	bf 93       	push	r27
	timer_counter++;
     cda:	80 91 f6 00 	lds	r24, 0x00F6
     cde:	90 91 f7 00 	lds	r25, 0x00F7
     ce2:	a0 91 f8 00 	lds	r26, 0x00F8
     ce6:	b0 91 f9 00 	lds	r27, 0x00F9
     cea:	01 96       	adiw	r24, 0x01	; 1
     cec:	a1 1d       	adc	r26, r1
     cee:	b1 1d       	adc	r27, r1
     cf0:	80 93 f6 00 	sts	0x00F6, r24
     cf4:	90 93 f7 00 	sts	0x00F7, r25
     cf8:	a0 93 f8 00 	sts	0x00F8, r26
     cfc:	b0 93 f9 00 	sts	0x00F9, r27
	if( timer_counter >1462)
     d00:	87 3b       	cpi	r24, 0xB7	; 183
     d02:	25 e0       	ldi	r18, 0x05	; 5
     d04:	92 07       	cpc	r25, r18
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	a2 07       	cpc	r26, r18
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	b2 07       	cpc	r27, r18
     d0e:	68 f0       	brcs	.+26     	; 0xd2a <__vector_11+0x64>
	{
		TCNT0 = 0x00;
     d10:	12 be       	out	0x32, r1	; 50
		sensor_working=0;
     d12:	10 92 fb 00 	sts	0x00FB, r1
		rising_edge=0;
     d16:	10 92 fa 00 	sts	0x00FA, r1
		timer_counter=0;
     d1a:	10 92 f6 00 	sts	0x00F6, r1
     d1e:	10 92 f7 00 	sts	0x00F7, r1
     d22:	10 92 f8 00 	sts	0x00F8, r1
     d26:	10 92 f9 00 	sts	0x00F9, r1
	}
	
     d2a:	bf 91       	pop	r27
     d2c:	af 91       	pop	r26
     d2e:	9f 91       	pop	r25
     d30:	8f 91       	pop	r24
     d32:	2f 91       	pop	r18
     d34:	0f 90       	pop	r0
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	0f 90       	pop	r0
     d3a:	1f 90       	pop	r1
     d3c:	18 95       	reti

00000d3e <WHEEL_Init>:
#include "../include/MOTOR_config.h"

void WHEEL_Init()
{
	//Directions for both motors
	DIO_SetPinDirection(MOTOR_LEFTPORT,MOTOR_LEFTINPUT1,DIO_PIN_OUTPUT);
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	64 e0       	ldi	r22, 0x04	; 4
     d42:	41 e0       	ldi	r20, 0x01	; 1
     d44:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_LEFTPORT,MOTOR_LEFTINPUT2,DIO_PIN_OUTPUT);
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	65 e0       	ldi	r22, 0x05	; 5
     d4c:	41 e0       	ldi	r20, 0x01	; 1
     d4e:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_OUTPUT);
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	66 e0       	ldi	r22, 0x06	; 6
     d56:	41 e0       	ldi	r20, 0x01	; 1
     d58:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_OUTPUT);
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	67 e0       	ldi	r22, 0x07	; 7
     d60:	41 e0       	ldi	r20, 0x01	; 1
     d62:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_SetPinDirection>
	
	// Enable Settings for both motors
	DIO_SetPinDirection(MOTOR_ENABLEPORT,MOTOR_ENABLEPIN,DIO_PIN_OUTPUT); //ENABLE OC2
     d66:	83 e0       	ldi	r24, 0x03	; 3
     d68:	67 e0       	ldi	r22, 0x07	; 7
     d6a:	41 e0       	ldi	r20, 0x01	; 1
     d6c:	0e 94 b2 08 	call	0x1164	; 0x1164 <DIO_SetPinDirection>
	
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT1,DIO_PIN_LOW);
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	64 e0       	ldi	r22, 0x04	; 4
     d74:	40 e0       	ldi	r20, 0x00	; 0
     d76:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT2,DIO_PIN_LOW);
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	65 e0       	ldi	r22, 0x05	; 5
     d7e:	40 e0       	ldi	r20, 0x00	; 0
     d80:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	
	
	// Motor2 Control
	
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_LOW);
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	66 e0       	ldi	r22, 0x06	; 6
     d88:	40 e0       	ldi	r20, 0x00	; 0
     d8a:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_LOW);
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	67 e0       	ldi	r22, 0x07	; 7
     d92:	40 e0       	ldi	r20, 0x00	; 0
     d94:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	
	
}
     d98:	08 95       	ret

00000d9a <WHEEL_MoveForward>:

void WHEEL_MoveForward ()
{
	DIO_SetPinValue(MOTOR_ENABLEPORT,MOTOR_ENABLEPIN,DIO_PIN_HIGH);
     d9a:	83 e0       	ldi	r24, 0x03	; 3
     d9c:	67 e0       	ldi	r22, 0x07	; 7
     d9e:	41 e0       	ldi	r20, 0x01	; 1
     da0:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT1,DIO_PIN_LOW);
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	64 e0       	ldi	r22, 0x04	; 4
     da8:	40 e0       	ldi	r20, 0x00	; 0
     daa:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT2,DIO_PIN_HIGH);
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	65 e0       	ldi	r22, 0x05	; 5
     db2:	41 e0       	ldi	r20, 0x01	; 1
     db4:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	
	
	// Motor2 Control
	
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_LOW);
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	66 e0       	ldi	r22, 0x06	; 6
     dbc:	40 e0       	ldi	r20, 0x00	; 0
     dbe:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_HIGH);
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	67 e0       	ldi	r22, 0x07	; 7
     dc6:	41 e0       	ldi	r20, 0x01	; 1
     dc8:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	
}
     dcc:	08 95       	ret

00000dce <WHEEL_MoveBackward>:

void WHEEL_MoveBackward ()
{
	DIO_SetPinValue(MOTOR_ENABLEPORT,MOTOR_ENABLEPIN,DIO_PIN_HIGH);
     dce:	83 e0       	ldi	r24, 0x03	; 3
     dd0:	67 e0       	ldi	r22, 0x07	; 7
     dd2:	41 e0       	ldi	r20, 0x01	; 1
     dd4:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT1,DIO_PIN_HIGH);
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	64 e0       	ldi	r22, 0x04	; 4
     ddc:	41 e0       	ldi	r20, 0x01	; 1
     dde:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT2,DIO_PIN_LOW);
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	65 e0       	ldi	r22, 0x05	; 5
     de6:	40 e0       	ldi	r20, 0x00	; 0
     de8:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>

	
	
	// Motor2 Control
	
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_HIGH);
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	66 e0       	ldi	r22, 0x06	; 6
     df0:	41 e0       	ldi	r20, 0x01	; 1
     df2:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_LOW);
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	67 e0       	ldi	r22, 0x07	; 7
     dfa:	40 e0       	ldi	r20, 0x00	; 0
     dfc:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
}
     e00:	08 95       	ret

00000e02 <WHEEL_Stop>:


void WHEEL_Stop ()
{
	DIO_SetPinValue(MOTOR_ENABLEPORT,MOTOR_ENABLEPIN,DIO_PIN_HIGH);
     e02:	83 e0       	ldi	r24, 0x03	; 3
     e04:	67 e0       	ldi	r22, 0x07	; 7
     e06:	41 e0       	ldi	r20, 0x01	; 1
     e08:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT1,DIO_PIN_LOW);
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	64 e0       	ldi	r22, 0x04	; 4
     e10:	40 e0       	ldi	r20, 0x00	; 0
     e12:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT2,DIO_PIN_LOW);
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	65 e0       	ldi	r22, 0x05	; 5
     e1a:	40 e0       	ldi	r20, 0x00	; 0
     e1c:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	
	
	// Motor2 Control
	
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_LOW);
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	66 e0       	ldi	r22, 0x06	; 6
     e24:	40 e0       	ldi	r20, 0x00	; 0
     e26:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_LOW);
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	67 e0       	ldi	r22, 0x07	; 7
     e2e:	40 e0       	ldi	r20, 0x00	; 0
     e30:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
}
     e34:	08 95       	ret

00000e36 <WHEEL_MoveForwardRight>:


void WHEEL_MoveForwardRight ()
{
	DIO_SetPinValue(MOTOR_ENABLEPORT,MOTOR_ENABLEPIN,DIO_PIN_HIGH);
     e36:	83 e0       	ldi	r24, 0x03	; 3
     e38:	67 e0       	ldi	r22, 0x07	; 7
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	//RIGHT WHEELS STOP, LEFT WHEELS FORWARD
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT1,DIO_PIN_LOW);
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	64 e0       	ldi	r22, 0x04	; 4
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT2,DIO_PIN_HIGH);
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	65 e0       	ldi	r22, 0x05	; 5
     e4e:	41 e0       	ldi	r20, 0x01	; 1
     e50:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	
	
	// Motor2 Control
	
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_LOW);
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	66 e0       	ldi	r22, 0x06	; 6
     e58:	40 e0       	ldi	r20, 0x00	; 0
     e5a:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_LOW);
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	67 e0       	ldi	r22, 0x07	; 7
     e62:	40 e0       	ldi	r20, 0x00	; 0
     e64:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	
}
     e68:	08 95       	ret

00000e6a <WHEEL_MoveForwardleft>:

void WHEEL_MoveForwardleft ()
{
	DIO_SetPinValue(MOTOR_ENABLEPORT,MOTOR_ENABLEPIN,DIO_PIN_HIGH);
     e6a:	83 e0       	ldi	r24, 0x03	; 3
     e6c:	67 e0       	ldi	r22, 0x07	; 7
     e6e:	41 e0       	ldi	r20, 0x01	; 1
     e70:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	//LEFT WHEELS STOP, RIGHT WHEELS FORWARD
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT1,DIO_PIN_LOW);
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	64 e0       	ldi	r22, 0x04	; 4
     e78:	40 e0       	ldi	r20, 0x00	; 0
     e7a:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT2,DIO_PIN_LOW);
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	65 e0       	ldi	r22, 0x05	; 5
     e82:	40 e0       	ldi	r20, 0x00	; 0
     e84:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	
	
	// Motor2 Control
	
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_LOW);
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	66 e0       	ldi	r22, 0x06	; 6
     e8c:	40 e0       	ldi	r20, 0x00	; 0
     e8e:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_HIGH);
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	67 e0       	ldi	r22, 0x07	; 7
     e96:	41 e0       	ldi	r20, 0x01	; 1
     e98:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
}
     e9c:	08 95       	ret

00000e9e <WHEEL_MoveBackwardleft>:

void WHEEL_MoveBackwardleft ()
{
	DIO_SetPinValue(MOTOR_ENABLEPORT,MOTOR_ENABLEPIN,DIO_PIN_HIGH);
     e9e:	83 e0       	ldi	r24, 0x03	; 3
     ea0:	67 e0       	ldi	r22, 0x07	; 7
     ea2:	41 e0       	ldi	r20, 0x01	; 1
     ea4:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT1,DIO_PIN_LOW);
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	64 e0       	ldi	r22, 0x04	; 4
     eac:	40 e0       	ldi	r20, 0x00	; 0
     eae:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT2,DIO_PIN_LOW);
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	65 e0       	ldi	r22, 0x05	; 5
     eb6:	40 e0       	ldi	r20, 0x00	; 0
     eb8:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	
	
	// Motor2 Control
	
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_HIGH);
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	66 e0       	ldi	r22, 0x06	; 6
     ec0:	41 e0       	ldi	r20, 0x01	; 1
     ec2:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_LOW);
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	67 e0       	ldi	r22, 0x07	; 7
     eca:	40 e0       	ldi	r20, 0x00	; 0
     ecc:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
}
     ed0:	08 95       	ret

00000ed2 <WHEEL_MoveBackwardRight>:

void WHEEL_MoveBackwardRight ()
{
	DIO_SetPinValue(MOTOR_ENABLEPORT,MOTOR_ENABLEPIN,DIO_PIN_HIGH);
     ed2:	83 e0       	ldi	r24, 0x03	; 3
     ed4:	67 e0       	ldi	r22, 0x07	; 7
     ed6:	41 e0       	ldi	r20, 0x01	; 1
     ed8:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT1,DIO_PIN_HIGH);
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	64 e0       	ldi	r22, 0x04	; 4
     ee0:	41 e0       	ldi	r20, 0x01	; 1
     ee2:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_LEFTPORT,MOTOR_LEFTINPUT2,DIO_PIN_LOW);
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	65 e0       	ldi	r22, 0x05	; 5
     eea:	40 e0       	ldi	r20, 0x00	; 0
     eec:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	
	
	// Motor2 Control
	
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT1,DIO_PIN_LOW);
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	66 e0       	ldi	r22, 0x06	; 6
     ef4:	40 e0       	ldi	r20, 0x00	; 0
     ef6:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_RIGHTPORT,MOTOR_RIGHTINPUT2,DIO_PIN_LOW);
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	67 e0       	ldi	r22, 0x07	; 7
     efe:	40 e0       	ldi	r20, 0x00	; 0
     f00:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinValue>
}
     f04:	08 95       	ret

00000f06 <WHEEL_TurnDirection>:

void WHEEL_TurnDirection ()
{
}
     f06:	08 95       	ret

00000f08 <WHEEL_SendDutyCycleAndStart>:
void WHEEL_SendDutyCycleAndStart(u8 speed)
{
     f08:	cf 93       	push	r28
     f0a:	c8 2f       	mov	r28, r24
	//WHEEL_Init();
	TMR2_init();
     f0c:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <TMR2_init>
	TMR2_SetDutyCycleValue_FastPWM(speed); // RANGE FROM 0 to 100 
     f10:	6c 2f       	mov	r22, r28
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 07 10 	call	0x200e	; 0x200e <__floatunsisf>
     f1c:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <TMR2_SetDutyCycleValue_FastPWM>
	TMR2_Start();
     f20:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <TMR2_Start>
}
     f24:	cf 91       	pop	r28
     f26:	08 95       	ret

00000f28 <WHEEL_AdjustSpeed>:
void WHEEL_AdjustSpeed ()
{
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
	static u8 speed = 0;
	u8 *PinValue;
	DIO_ReadValue(DIO_PORTB,DIO_PIN4,PinValue);
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	64 e0       	ldi	r22, 0x04	; 4
     f30:	c0 e0       	ldi	r28, 0x00	; 0
     f32:	d0 e0       	ldi	r29, 0x00	; 0
     f34:	ae 01       	movw	r20, r28
     f36:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_ReadValue>
	if(*PinValue == 1)
     f3a:	88 81       	ld	r24, Y
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	81 f4       	brne	.+32     	; 0xf60 <WHEEL_AdjustSpeed+0x38>
     f40:	8f ef       	ldi	r24, 0xFF	; 255
     f42:	96 e1       	ldi	r25, 0x16	; 22
     f44:	a1 e1       	ldi	r26, 0x11	; 17
     f46:	81 50       	subi	r24, 0x01	; 1
     f48:	90 40       	sbci	r25, 0x00	; 0
     f4a:	a0 40       	sbci	r26, 0x00	; 0
     f4c:	e1 f7       	brne	.-8      	; 0xf46 <WHEEL_AdjustSpeed+0x1e>
     f4e:	00 c0       	rjmp	.+0      	; 0xf50 <WHEEL_AdjustSpeed+0x28>
     f50:	00 00       	nop
	{
		_delay_ms(350);
		if(speed > 90)
     f52:	80 91 fc 00 	lds	r24, 0x00FC
     f56:	8b 35       	cpi	r24, 0x5B	; 91
     f58:	18 f0       	brcs	.+6      	; 0xf60 <WHEEL_AdjustSpeed+0x38>
		{
			speed+=10; // WHEEL_SpeedUP
     f5a:	86 5f       	subi	r24, 0xF6	; 246
     f5c:	80 93 fc 00 	sts	0x00FC, r24
		}
	}
	DIO_ReadValue(DIO_PORTB,DIO_PIN5,PinValue);
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	65 e0       	ldi	r22, 0x05	; 5
     f64:	c0 e0       	ldi	r28, 0x00	; 0
     f66:	d0 e0       	ldi	r29, 0x00	; 0
     f68:	ae 01       	movw	r20, r28
     f6a:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_ReadValue>
	if (*PinValue == 1)
     f6e:	88 81       	ld	r24, Y
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	81 f4       	brne	.+32     	; 0xf94 <WHEEL_AdjustSpeed+0x6c>
     f74:	8f ef       	ldi	r24, 0xFF	; 255
     f76:	96 e1       	ldi	r25, 0x16	; 22
     f78:	a1 e1       	ldi	r26, 0x11	; 17
     f7a:	81 50       	subi	r24, 0x01	; 1
     f7c:	90 40       	sbci	r25, 0x00	; 0
     f7e:	a0 40       	sbci	r26, 0x00	; 0
     f80:	e1 f7       	brne	.-8      	; 0xf7a <WHEEL_AdjustSpeed+0x52>
     f82:	00 c0       	rjmp	.+0      	; 0xf84 <WHEEL_AdjustSpeed+0x5c>
     f84:	00 00       	nop
	{
		_delay_ms(350);
		if(speed > 10)
     f86:	80 91 fc 00 	lds	r24, 0x00FC
     f8a:	8b 30       	cpi	r24, 0x0B	; 11
     f8c:	18 f0       	brcs	.+6      	; 0xf94 <WHEEL_AdjustSpeed+0x6c>
		{
			speed-=10; // WHEEL_SpeedUP
     f8e:	8a 50       	subi	r24, 0x0A	; 10
     f90:	80 93 fc 00 	sts	0x00FC, r24
		}
		
		
	}
	DIO_ReadValue(DIO_PORTB,DIO_PIN6,PinValue);
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	66 e0       	ldi	r22, 0x06	; 6
     f98:	c0 e0       	ldi	r28, 0x00	; 0
     f9a:	d0 e0       	ldi	r29, 0x00	; 0
     f9c:	ae 01       	movw	r20, r28
     f9e:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_ReadValue>
	if (*PinValue == 1)
     fa2:	88 81       	ld	r24, Y
     fa4:	81 30       	cpi	r24, 0x01	; 1
     fa6:	59 f4       	brne	.+22     	; 0xfbe <WHEEL_AdjustSpeed+0x96>
     fa8:	8f ef       	ldi	r24, 0xFF	; 255
     faa:	96 e1       	ldi	r25, 0x16	; 22
     fac:	a1 e1       	ldi	r26, 0x11	; 17
     fae:	81 50       	subi	r24, 0x01	; 1
     fb0:	90 40       	sbci	r25, 0x00	; 0
     fb2:	a0 40       	sbci	r26, 0x00	; 0
     fb4:	e1 f7       	brne	.-8      	; 0xfae <WHEEL_AdjustSpeed+0x86>
     fb6:	00 c0       	rjmp	.+0      	; 0xfb8 <WHEEL_AdjustSpeed+0x90>
     fb8:	00 00       	nop
	{
		_delay_ms(350);
		speed = 0; // WHEEL_SpeedReset
     fba:	10 92 fc 00 	sts	0x00FC, r1
	}
	
	OCR2 = (256*speed)/100 ; 
     fbe:	90 91 fc 00 	lds	r25, 0x00FC
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	64 e6       	ldi	r22, 0x64	; 100
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	0e 94 3f 11 	call	0x227e	; 0x227e <__divmodhi4>
     fcc:	63 bd       	out	0x23, r22	; 35
	
}
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	08 95       	ret

00000fd4 <ADC_init>:
static void (*PRIVATE_PtrCallBackADC) (void) = NULL;

void ADC_init(u8 RefrenceVolt,u8 ADC_Prescaller)
{
	/*	Select reference voltage	*/
	switch (RefrenceVolt)
     fd4:	82 30       	cpi	r24, 0x02	; 2
     fd6:	29 f0       	breq	.+10     	; 0xfe2 <ADC_init+0xe>
     fd8:	83 30       	cpi	r24, 0x03	; 3
     fda:	49 f0       	breq	.+18     	; 0xfee <ADC_init+0x1a>
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	49 f4       	brne	.+18     	; 0xff2 <ADC_init+0x1e>
     fe0:	03 c0       	rjmp	.+6      	; 0xfe8 <ADC_init+0x14>
	{
		case ADC_REFERENCE_AREF:
		CLR_BIT(ADMUX,REFS0);
     fe2:	3e 98       	cbi	0x07, 6	; 7
		CLR_BIT(ADMUX,REFS1);
     fe4:	3f 98       	cbi	0x07, 7	; 7
		break;
     fe6:	05 c0       	rjmp	.+10     	; 0xff2 <ADC_init+0x1e>
		
		case ADC_REFERENCE_AVCC:
		SET_BIT(ADMUX,REFS0);
     fe8:	3e 9a       	sbi	0x07, 6	; 7
		CLR_BIT(ADMUX,REFS1);
     fea:	3f 98       	cbi	0x07, 7	; 7
		break;
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <ADC_init+0x1e>
		
		case ADC_REFERENCE_INTERNAL:
		SET_BIT(ADMUX,REFS0);
     fee:	3e 9a       	sbi	0x07, 6	; 7
		SET_BIT(ADMUX,REFS1);
     ff0:	3f 9a       	sbi	0x07, 7	; 7
		break;
	}
	
	/*		ADCR	*/
	CLR_BIT(ADMUX,ADLAR);
     ff2:	3d 98       	cbi	0x07, 5	; 7
	
	/*auto trigger mode (1) or single conversion mode (0) */
	CLR_BIT(ADCSRA,ADATE);
     ff4:	35 98       	cbi	0x06, 5	; 6
	
	/*	Interrupt enable	*/
	CLR_BIT(ADCSRA,ADIE);
     ff6:	33 98       	cbi	0x06, 3	; 6
	
	/*	Prescaller Select 128 for 16MHZ(125 KHZ)	*/
	
	if (ADC_Prescaller >= 2 && ADC_Prescaller <= 128 )
     ff8:	86 2f       	mov	r24, r22
     ffa:	82 50       	subi	r24, 0x02	; 2
     ffc:	8f 37       	cpi	r24, 0x7F	; 127
     ffe:	68 f5       	brcc	.+90     	; 0x105a <ADC_init+0x86>
	{
		switch(ADC_Prescaller)
    1000:	60 31       	cpi	r22, 0x10	; 16
    1002:	e1 f0       	breq	.+56     	; 0x103c <ADC_init+0x68>
    1004:	61 31       	cpi	r22, 0x11	; 17
    1006:	38 f4       	brcc	.+14     	; 0x1016 <ADC_init+0x42>
    1008:	64 30       	cpi	r22, 0x04	; 4
    100a:	81 f0       	breq	.+32     	; 0x102c <ADC_init+0x58>
    100c:	68 30       	cpi	r22, 0x08	; 8
    100e:	91 f0       	breq	.+36     	; 0x1034 <ADC_init+0x60>
    1010:	62 30       	cpi	r22, 0x02	; 2
    1012:	19 f5       	brne	.+70     	; 0x105a <ADC_init+0x86>
    1014:	07 c0       	rjmp	.+14     	; 0x1024 <ADC_init+0x50>
    1016:	60 34       	cpi	r22, 0x40	; 64
    1018:	c9 f0       	breq	.+50     	; 0x104c <ADC_init+0x78>
    101a:	60 38       	cpi	r22, 0x80	; 128
    101c:	d9 f0       	breq	.+54     	; 0x1054 <ADC_init+0x80>
    101e:	60 32       	cpi	r22, 0x20	; 32
    1020:	e1 f4       	brne	.+56     	; 0x105a <ADC_init+0x86>
    1022:	10 c0       	rjmp	.+32     	; 0x1044 <ADC_init+0x70>
		{
			case ADC_Prescaller_2:
			CLR_BIT(ADCSRA,ADPS0);
    1024:	30 98       	cbi	0x06, 0	; 6
			CLR_BIT(ADCSRA,ADPS1);
    1026:	31 98       	cbi	0x06, 1	; 6
			CLR_BIT(ADCSRA,ADPS2);
    1028:	32 98       	cbi	0x06, 2	; 6
			break;
    102a:	17 c0       	rjmp	.+46     	; 0x105a <ADC_init+0x86>
			
			case ADC_Prescaller_4:
			CLR_BIT(ADCSRA,ADPS0);
    102c:	30 98       	cbi	0x06, 0	; 6
			SET_BIT(ADCSRA,ADPS1);
    102e:	31 9a       	sbi	0x06, 1	; 6
			CLR_BIT(ADCSRA,ADPS2);
    1030:	32 98       	cbi	0x06, 2	; 6
			break;
    1032:	13 c0       	rjmp	.+38     	; 0x105a <ADC_init+0x86>
			
			case ADC_Prescaller_8:
			SET_BIT(ADCSRA,ADPS0);
    1034:	30 9a       	sbi	0x06, 0	; 6
			SET_BIT(ADCSRA,ADPS1);
    1036:	31 9a       	sbi	0x06, 1	; 6
			CLR_BIT(ADCSRA,ADPS2);
    1038:	32 98       	cbi	0x06, 2	; 6
			break;
    103a:	0f c0       	rjmp	.+30     	; 0x105a <ADC_init+0x86>
			
			case ADC_Prescaller_16:
			CLR_BIT(ADCSRA,ADPS0);
    103c:	30 98       	cbi	0x06, 0	; 6
			CLR_BIT(ADCSRA,ADPS1);
    103e:	31 98       	cbi	0x06, 1	; 6
			SET_BIT(ADCSRA,ADPS2);
    1040:	32 9a       	sbi	0x06, 2	; 6
			break;
    1042:	0b c0       	rjmp	.+22     	; 0x105a <ADC_init+0x86>
			
			case ADC_Prescaller_32:
			SET_BIT(ADCSRA,ADPS0);
    1044:	30 9a       	sbi	0x06, 0	; 6
			CLR_BIT(ADCSRA,ADPS1);
    1046:	31 98       	cbi	0x06, 1	; 6
			SET_BIT(ADCSRA,ADPS2);
    1048:	32 9a       	sbi	0x06, 2	; 6
			break;
    104a:	07 c0       	rjmp	.+14     	; 0x105a <ADC_init+0x86>
			
			case ADC_Prescaller_64:
			CLR_BIT(ADCSRA,ADPS0);
    104c:	30 98       	cbi	0x06, 0	; 6
			SET_BIT(ADCSRA,ADPS1);
    104e:	31 9a       	sbi	0x06, 1	; 6
			SET_BIT(ADCSRA,ADPS2);
    1050:	32 9a       	sbi	0x06, 2	; 6
			break;
    1052:	03 c0       	rjmp	.+6      	; 0x105a <ADC_init+0x86>
			
			case ADC_Prescaller_128:
			SET_BIT(ADCSRA,ADPS0);
    1054:	30 9a       	sbi	0x06, 0	; 6
			SET_BIT(ADCSRA,ADPS1);
    1056:	31 9a       	sbi	0x06, 1	; 6
			SET_BIT(ADCSRA,ADPS2);
    1058:	32 9a       	sbi	0x06, 2	; 6
	{
		//No Thing 
	}
	
	/*Enable ADC */                          //best in last line in function
	SET_BIT(ADCSRA,ADEN);
    105a:	37 9a       	sbi	0x06, 7	; 6
}
    105c:	08 95       	ret

0000105e <ADC_ReadDigitalValue>:

void ADC_ReadDigitalValue(u8 ChannelId ,u16* DigitalValue)
{
	if( DigitalValue != NULL && ChannelId <32 )
    105e:	61 15       	cp	r22, r1
    1060:	71 05       	cpc	r23, r1
    1062:	09 f4       	brne	.+2      	; 0x1066 <ADC_ReadDigitalValue+0x8>
    1064:	4e c0       	rjmp	.+156    	; 0x1102 <ADC_ReadDigitalValue+0xa4>
    1066:	80 32       	cpi	r24, 0x20	; 32
    1068:	08 f0       	brcs	.+2      	; 0x106c <ADC_ReadDigitalValue+0xe>
    106a:	4b c0       	rjmp	.+150    	; 0x1102 <ADC_ReadDigitalValue+0xa4>
		/*	type without 32 switch case but take care about #define of channel id */
// 		ADMUX & = 0xE0;
// 		ADMUX | = ChannelId;


		switch (ChannelId)
    106c:	83 30       	cpi	r24, 0x03	; 3
    106e:	11 f1       	breq	.+68     	; 0x10b4 <ADC_ReadDigitalValue+0x56>
    1070:	84 30       	cpi	r24, 0x04	; 4
    1072:	28 f4       	brcc	.+10     	; 0x107e <ADC_ReadDigitalValue+0x20>
    1074:	81 30       	cpi	r24, 0x01	; 1
    1076:	91 f0       	breq	.+36     	; 0x109c <ADC_ReadDigitalValue+0x3e>
    1078:	82 30       	cpi	r24, 0x02	; 2
    107a:	b0 f4       	brcc	.+44     	; 0x10a8 <ADC_ReadDigitalValue+0x4a>
    107c:	09 c0       	rjmp	.+18     	; 0x1090 <ADC_ReadDigitalValue+0x32>
    107e:	85 30       	cpi	r24, 0x05	; 5
    1080:	29 f1       	breq	.+74     	; 0x10cc <ADC_ReadDigitalValue+0x6e>
    1082:	85 30       	cpi	r24, 0x05	; 5
    1084:	e8 f0       	brcs	.+58     	; 0x10c0 <ADC_ReadDigitalValue+0x62>
    1086:	86 30       	cpi	r24, 0x06	; 6
    1088:	39 f1       	breq	.+78     	; 0x10d8 <ADC_ReadDigitalValue+0x7a>
    108a:	87 30       	cpi	r24, 0x07	; 7
    108c:	81 f5       	brne	.+96     	; 0x10ee <ADC_ReadDigitalValue+0x90>
    108e:	2a c0       	rjmp	.+84     	; 0x10e4 <ADC_ReadDigitalValue+0x86>
		{
			case ADC_CHANNEL_0:
			CLR_BIT(ADMUX,MUX0);
    1090:	38 98       	cbi	0x07, 0	; 7
			CLR_BIT(ADMUX,MUX1);
    1092:	39 98       	cbi	0x07, 1	; 7
			CLR_BIT(ADMUX,MUX2);
    1094:	3a 98       	cbi	0x07, 2	; 7
			CLR_BIT(ADMUX,MUX3);
    1096:	3b 98       	cbi	0x07, 3	; 7
			CLR_BIT(ADMUX,MUX4);
    1098:	3c 98       	cbi	0x07, 4	; 7
			break;
    109a:	29 c0       	rjmp	.+82     	; 0x10ee <ADC_ReadDigitalValue+0x90>
			
			case ADC_CHANNEL_1:
			SET_BIT(ADMUX,MUX0);
    109c:	38 9a       	sbi	0x07, 0	; 7
			CLR_BIT(ADMUX,MUX1);
    109e:	39 98       	cbi	0x07, 1	; 7
			CLR_BIT(ADMUX,MUX2);
    10a0:	3a 98       	cbi	0x07, 2	; 7
			CLR_BIT(ADMUX,MUX3);
    10a2:	3b 98       	cbi	0x07, 3	; 7
			CLR_BIT(ADMUX,MUX4);
    10a4:	3c 98       	cbi	0x07, 4	; 7
			break;
    10a6:	23 c0       	rjmp	.+70     	; 0x10ee <ADC_ReadDigitalValue+0x90>
			
			case ADC_CHANNEL_2:
			CLR_BIT(ADMUX,MUX0);
    10a8:	38 98       	cbi	0x07, 0	; 7
			SET_BIT(ADMUX,MUX1);
    10aa:	39 9a       	sbi	0x07, 1	; 7
			CLR_BIT(ADMUX,MUX2);
    10ac:	3a 98       	cbi	0x07, 2	; 7
			CLR_BIT(ADMUX,MUX3);
    10ae:	3b 98       	cbi	0x07, 3	; 7
			CLR_BIT(ADMUX,MUX4);
    10b0:	3c 98       	cbi	0x07, 4	; 7
			break;
    10b2:	1d c0       	rjmp	.+58     	; 0x10ee <ADC_ReadDigitalValue+0x90>
			
			case ADC_CHANNEL_3:
			SET_BIT(ADMUX,MUX0);
    10b4:	38 9a       	sbi	0x07, 0	; 7
			SET_BIT(ADMUX,MUX1);
    10b6:	39 9a       	sbi	0x07, 1	; 7
			CLR_BIT(ADMUX,MUX2);
    10b8:	3a 98       	cbi	0x07, 2	; 7
			CLR_BIT(ADMUX,MUX3);
    10ba:	3b 98       	cbi	0x07, 3	; 7
			CLR_BIT(ADMUX,MUX4);
    10bc:	3c 98       	cbi	0x07, 4	; 7
			break;
    10be:	17 c0       	rjmp	.+46     	; 0x10ee <ADC_ReadDigitalValue+0x90>
			
			case ADC_CHANNEL_4:
			CLR_BIT(ADMUX,MUX0);
    10c0:	38 98       	cbi	0x07, 0	; 7
			CLR_BIT(ADMUX,MUX1);
    10c2:	39 98       	cbi	0x07, 1	; 7
			SET_BIT(ADMUX,MUX2);
    10c4:	3a 9a       	sbi	0x07, 2	; 7
			CLR_BIT(ADMUX,MUX3);
    10c6:	3b 98       	cbi	0x07, 3	; 7
			CLR_BIT(ADMUX,MUX4);
    10c8:	3c 98       	cbi	0x07, 4	; 7
			break;
    10ca:	11 c0       	rjmp	.+34     	; 0x10ee <ADC_ReadDigitalValue+0x90>
			
			case ADC_CHANNEL_5:
			SET_BIT(ADMUX,MUX0);
    10cc:	38 9a       	sbi	0x07, 0	; 7
			CLR_BIT(ADMUX,MUX1);
    10ce:	39 98       	cbi	0x07, 1	; 7
			SET_BIT(ADMUX,MUX2);
    10d0:	3a 9a       	sbi	0x07, 2	; 7
			CLR_BIT(ADMUX,MUX3);
    10d2:	3b 98       	cbi	0x07, 3	; 7
			CLR_BIT(ADMUX,MUX4);
    10d4:	3c 98       	cbi	0x07, 4	; 7
			break;
    10d6:	0b c0       	rjmp	.+22     	; 0x10ee <ADC_ReadDigitalValue+0x90>
			
			case ADC_CHANNEL_6:
			CLR_BIT(ADMUX,MUX0);
    10d8:	38 98       	cbi	0x07, 0	; 7
			SET_BIT(ADMUX,MUX1);
    10da:	39 9a       	sbi	0x07, 1	; 7
			SET_BIT(ADMUX,MUX2);
    10dc:	3a 9a       	sbi	0x07, 2	; 7
			CLR_BIT(ADMUX,MUX3);
    10de:	3b 98       	cbi	0x07, 3	; 7
			CLR_BIT(ADMUX,MUX4);
    10e0:	3c 98       	cbi	0x07, 4	; 7
			break;
    10e2:	05 c0       	rjmp	.+10     	; 0x10ee <ADC_ReadDigitalValue+0x90>
			
			case ADC_CHANNEL_7:
			SET_BIT(ADMUX,MUX0);
    10e4:	38 9a       	sbi	0x07, 0	; 7
			SET_BIT(ADMUX,MUX1);
    10e6:	39 9a       	sbi	0x07, 1	; 7
			SET_BIT(ADMUX,MUX2);
    10e8:	3a 9a       	sbi	0x07, 2	; 7
			CLR_BIT(ADMUX,MUX3);
    10ea:	3b 98       	cbi	0x07, 3	; 7
			CLR_BIT(ADMUX,MUX4);
    10ec:	3c 98       	cbi	0x07, 4	; 7
			break;
		} 
		SET_BIT(ADCSRA,ADSC);                //start conversion 
    10ee:	36 9a       	sbi	0x06, 6	; 6
		
		while( 0 == GET_BIT(ADCSRA,ADIF) );  //wait for flag set 1
    10f0:	86 b1       	in	r24, 0x06	; 6
    10f2:	84 ff       	sbrs	r24, 4
    10f4:	fd cf       	rjmp	.-6      	; 0x10f0 <ADC_ReadDigitalValue+0x92>
		
		*DigitalValue=ADC_DATA;
    10f6:	84 b1       	in	r24, 0x04	; 4
    10f8:	95 b1       	in	r25, 0x05	; 5
    10fa:	fb 01       	movw	r30, r22
    10fc:	91 83       	std	Z+1, r25	; 0x01
    10fe:	80 83       	st	Z, r24
		
		SET_BIT(ADCSRA,ADIF);                   //TO Clear flag again 
    1100:	34 9a       	sbi	0x06, 4	; 6
    1102:	08 95       	ret

00001104 <ADC_SetCallBackADC>:
}


void ADC_SetCallBackADC (void (*PtrToFunc) (void))
{
	if( PtrToFunc!=NULL )
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	21 f0       	breq	.+8      	; 0x1110 <ADC_SetCallBackADC+0xc>
	{
		PRIVATE_PtrCallBackADC=PtrToFunc;
    1108:	90 93 fe 00 	sts	0x00FE, r25
    110c:	80 93 fd 00 	sts	0x00FD, r24
    1110:	08 95       	ret

00001112 <__vector_16>:
	}
}

void  __vector_16(void) __attribute__((signal));
void  __vector_16(void)
{
    1112:	1f 92       	push	r1
    1114:	0f 92       	push	r0
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	0f 92       	push	r0
    111a:	11 24       	eor	r1, r1
    111c:	2f 93       	push	r18
    111e:	3f 93       	push	r19
    1120:	4f 93       	push	r20
    1122:	5f 93       	push	r21
    1124:	6f 93       	push	r22
    1126:	7f 93       	push	r23
    1128:	8f 93       	push	r24
    112a:	9f 93       	push	r25
    112c:	af 93       	push	r26
    112e:	bf 93       	push	r27
    1130:	ef 93       	push	r30
    1132:	ff 93       	push	r31
	if (PRIVATE_PtrCallBackADC != NULL)
    1134:	e0 91 fd 00 	lds	r30, 0x00FD
    1138:	f0 91 fe 00 	lds	r31, 0x00FE
    113c:	30 97       	sbiw	r30, 0x00	; 0
    113e:	09 f0       	breq	.+2      	; 0x1142 <__vector_16+0x30>
	{
		PRIVATE_PtrCallBackADC();
    1140:	09 95       	icall
	}
    1142:	ff 91       	pop	r31
    1144:	ef 91       	pop	r30
    1146:	bf 91       	pop	r27
    1148:	af 91       	pop	r26
    114a:	9f 91       	pop	r25
    114c:	8f 91       	pop	r24
    114e:	7f 91       	pop	r23
    1150:	6f 91       	pop	r22
    1152:	5f 91       	pop	r21
    1154:	4f 91       	pop	r20
    1156:	3f 91       	pop	r19
    1158:	2f 91       	pop	r18
    115a:	0f 90       	pop	r0
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	0f 90       	pop	r0
    1160:	1f 90       	pop	r1
    1162:	18 95       	reti

00001164 <DIO_SetPinDirection>:


DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PInDirection<=DIO_PIN_OUTPUT))
    1164:	84 30       	cpi	r24, 0x04	; 4
    1166:	08 f0       	brcs	.+2      	; 0x116a <DIO_SetPinDirection+0x6>
    1168:	8b c0       	rjmp	.+278    	; 0x1280 <DIO_SetPinDirection+0x11c>
    116a:	68 30       	cpi	r22, 0x08	; 8
    116c:	08 f0       	brcs	.+2      	; 0x1170 <DIO_SetPinDirection+0xc>
    116e:	8a c0       	rjmp	.+276    	; 0x1284 <DIO_SetPinDirection+0x120>
    1170:	42 30       	cpi	r20, 0x02	; 2
    1172:	08 f0       	brcs	.+2      	; 0x1176 <DIO_SetPinDirection+0x12>
    1174:	89 c0       	rjmp	.+274    	; 0x1288 <DIO_SetPinDirection+0x124>
	{
    	switch(PortId)
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	41 f1       	breq	.+80     	; 0x11ca <DIO_SetPinDirection+0x66>
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	38 f0       	brcs	.+14     	; 0x118c <DIO_SetPinDirection+0x28>
    117e:	82 30       	cpi	r24, 0x02	; 2
    1180:	09 f4       	brne	.+2      	; 0x1184 <DIO_SetPinDirection+0x20>
    1182:	41 c0       	rjmp	.+130    	; 0x1206 <DIO_SetPinDirection+0xa2>
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	09 f0       	breq	.+2      	; 0x118a <DIO_SetPinDirection+0x26>
    1188:	81 c0       	rjmp	.+258    	; 0x128c <DIO_SetPinDirection+0x128>
    118a:	5b c0       	rjmp	.+182    	; 0x1242 <DIO_SetPinDirection+0xde>
    	{
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
    118c:	41 30       	cpi	r20, 0x01	; 1
    118e:	71 f4       	brne	.+28     	; 0x11ac <DIO_SetPinDirection+0x48>
    1190:	2a b3       	in	r18, 0x1a	; 26
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	ac 01       	movw	r20, r24
    1198:	02 c0       	rjmp	.+4      	; 0x119e <DIO_SetPinDirection+0x3a>
    119a:	44 0f       	add	r20, r20
    119c:	55 1f       	adc	r21, r21
    119e:	6a 95       	dec	r22
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <DIO_SetPinDirection+0x36>
    11a2:	ba 01       	movw	r22, r20
    11a4:	62 2b       	or	r22, r18
    11a6:	6a bb       	out	0x1a, r22	; 26



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	08 95       	ret
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PInDirection<=DIO_PIN_OUTPUT))
	{
    	switch(PortId)
    	{
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
    11ac:	2a b3       	in	r18, 0x1a	; 26
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	ac 01       	movw	r20, r24
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <DIO_SetPinDirection+0x56>
    11b6:	44 0f       	add	r20, r20
    11b8:	55 1f       	adc	r21, r21
    11ba:	6a 95       	dec	r22
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <DIO_SetPinDirection+0x52>
    11be:	ba 01       	movw	r22, r20
    11c0:	60 95       	com	r22
    11c2:	62 23       	and	r22, r18
    11c4:	6a bb       	out	0x1a, r22	; 26



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	08 95       	ret
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
    11ca:	41 30       	cpi	r20, 0x01	; 1
    11cc:	69 f4       	brne	.+26     	; 0x11e8 <DIO_SetPinDirection+0x84>
    11ce:	47 b3       	in	r20, 0x17	; 23
    11d0:	21 e0       	ldi	r18, 0x01	; 1
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	c9 01       	movw	r24, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <DIO_SetPinDirection+0x78>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	6a 95       	dec	r22
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <DIO_SetPinDirection+0x74>
    11e0:	84 2b       	or	r24, r20
    11e2:	87 bb       	out	0x17, r24	; 23



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	08 95       	ret
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
    11e8:	27 b3       	in	r18, 0x17	; 23
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	ac 01       	movw	r20, r24
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <DIO_SetPinDirection+0x92>
    11f2:	44 0f       	add	r20, r20
    11f4:	55 1f       	adc	r21, r21
    11f6:	6a 95       	dec	r22
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <DIO_SetPinDirection+0x8e>
    11fa:	ba 01       	movw	r22, r20
    11fc:	60 95       	com	r22
    11fe:	62 23       	and	r22, r18
    1200:	67 bb       	out	0x17, r22	; 23



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	08 95       	ret
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
    1206:	41 30       	cpi	r20, 0x01	; 1
    1208:	69 f4       	brne	.+26     	; 0x1224 <DIO_SetPinDirection+0xc0>
    120a:	44 b3       	in	r20, 0x14	; 20
    120c:	21 e0       	ldi	r18, 0x01	; 1
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	c9 01       	movw	r24, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_SetPinDirection+0xb4>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	6a 95       	dec	r22
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_SetPinDirection+0xb0>
    121c:	84 2b       	or	r24, r20
    121e:	84 bb       	out	0x14, r24	; 20



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	08 95       	ret
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
    1224:	24 b3       	in	r18, 0x14	; 20
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	ac 01       	movw	r20, r24
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <DIO_SetPinDirection+0xce>
    122e:	44 0f       	add	r20, r20
    1230:	55 1f       	adc	r21, r21
    1232:	6a 95       	dec	r22
    1234:	e2 f7       	brpl	.-8      	; 0x122e <DIO_SetPinDirection+0xca>
    1236:	ba 01       	movw	r22, r20
    1238:	60 95       	com	r22
    123a:	62 23       	and	r22, r18
    123c:	64 bb       	out	0x14, r22	; 20



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	08 95       	ret
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
		   break;
		   
		   case DIO_PORTD:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRD_REG,PinId)) : (CLR_BIT(DDRD_REG,PinId));
    1242:	41 30       	cpi	r20, 0x01	; 1
    1244:	71 f4       	brne	.+28     	; 0x1262 <DIO_SetPinDirection+0xfe>
    1246:	21 b3       	in	r18, 0x11	; 17
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	ac 01       	movw	r20, r24
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <DIO_SetPinDirection+0xf0>
    1250:	44 0f       	add	r20, r20
    1252:	55 1f       	adc	r21, r21
    1254:	6a 95       	dec	r22
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <DIO_SetPinDirection+0xec>
    1258:	ba 01       	movw	r22, r20
    125a:	62 2b       	or	r22, r18
    125c:	61 bb       	out	0x11, r22	; 17



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	08 95       	ret
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
		   break;
		   
		   case DIO_PORTD:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRD_REG,PinId)) : (CLR_BIT(DDRD_REG,PinId));
    1262:	21 b3       	in	r18, 0x11	; 17
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	ac 01       	movw	r20, r24
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <DIO_SetPinDirection+0x10c>
    126c:	44 0f       	add	r20, r20
    126e:	55 1f       	adc	r21, r21
    1270:	6a 95       	dec	r22
    1272:	e2 f7       	brpl	.-8      	; 0x126c <DIO_SetPinDirection+0x108>
    1274:	ba 01       	movw	r22, r20
    1276:	60 95       	com	r22
    1278:	62 23       	and	r22, r18
    127a:	61 bb       	out	0x11, r22	; 17



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	08 95       	ret
		   break;
	    }	
	} 
	else
	{
		ErrorStatus = DIO_NOK;
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	08 95       	ret
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	08 95       	ret
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	08 95       	ret



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
    128c:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    128e:	08 95       	ret

00001290 <DIO_SetPinValue>:

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PinValue<=DIO_PIN_HIGH))
    1290:	84 30       	cpi	r24, 0x04	; 4
    1292:	08 f0       	brcs	.+2      	; 0x1296 <DIO_SetPinValue+0x6>
    1294:	8b c0       	rjmp	.+278    	; 0x13ac <DIO_SetPinValue+0x11c>
    1296:	68 30       	cpi	r22, 0x08	; 8
    1298:	08 f0       	brcs	.+2      	; 0x129c <DIO_SetPinValue+0xc>
    129a:	8a c0       	rjmp	.+276    	; 0x13b0 <DIO_SetPinValue+0x120>
    129c:	42 30       	cpi	r20, 0x02	; 2
    129e:	08 f0       	brcs	.+2      	; 0x12a2 <DIO_SetPinValue+0x12>
    12a0:	89 c0       	rjmp	.+274    	; 0x13b4 <DIO_SetPinValue+0x124>
	{
			switch (PortId)
    12a2:	81 30       	cpi	r24, 0x01	; 1
    12a4:	41 f1       	breq	.+80     	; 0x12f6 <DIO_SetPinValue+0x66>
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	38 f0       	brcs	.+14     	; 0x12b8 <DIO_SetPinValue+0x28>
    12aa:	82 30       	cpi	r24, 0x02	; 2
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <DIO_SetPinValue+0x20>
    12ae:	41 c0       	rjmp	.+130    	; 0x1332 <DIO_SetPinValue+0xa2>
    12b0:	83 30       	cpi	r24, 0x03	; 3
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <DIO_SetPinValue+0x26>
    12b4:	81 c0       	rjmp	.+258    	; 0x13b8 <DIO_SetPinValue+0x128>
    12b6:	5b c0       	rjmp	.+182    	; 0x136e <DIO_SetPinValue+0xde>
			{
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
    12b8:	41 30       	cpi	r20, 0x01	; 1
    12ba:	71 f4       	brne	.+28     	; 0x12d8 <DIO_SetPinValue+0x48>
    12bc:	2b b3       	in	r18, 0x1b	; 27
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	ac 01       	movw	r20, r24
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <DIO_SetPinValue+0x3a>
    12c6:	44 0f       	add	r20, r20
    12c8:	55 1f       	adc	r21, r21
    12ca:	6a 95       	dec	r22
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <DIO_SetPinValue+0x36>
    12ce:	ba 01       	movw	r22, r20
    12d0:	62 2b       	or	r22, r18
    12d2:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	08 95       	ret
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PinValue<=DIO_PIN_HIGH))
	{
			switch (PortId)
			{
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
    12d8:	2b b3       	in	r18, 0x1b	; 27
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	ac 01       	movw	r20, r24
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <DIO_SetPinValue+0x56>
    12e2:	44 0f       	add	r20, r20
    12e4:	55 1f       	adc	r21, r21
    12e6:	6a 95       	dec	r22
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <DIO_SetPinValue+0x52>
    12ea:	ba 01       	movw	r22, r20
    12ec:	60 95       	com	r22
    12ee:	62 23       	and	r22, r18
    12f0:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	08 95       	ret
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
    12f6:	41 30       	cpi	r20, 0x01	; 1
    12f8:	69 f4       	brne	.+26     	; 0x1314 <DIO_SetPinValue+0x84>
    12fa:	48 b3       	in	r20, 0x18	; 24
    12fc:	21 e0       	ldi	r18, 0x01	; 1
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	c9 01       	movw	r24, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <DIO_SetPinValue+0x78>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	6a 95       	dec	r22
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <DIO_SetPinValue+0x74>
    130c:	84 2b       	or	r24, r20
    130e:	88 bb       	out	0x18, r24	; 24
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	08 95       	ret
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
    1314:	28 b3       	in	r18, 0x18	; 24
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	ac 01       	movw	r20, r24
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <DIO_SetPinValue+0x92>
    131e:	44 0f       	add	r20, r20
    1320:	55 1f       	adc	r21, r21
    1322:	6a 95       	dec	r22
    1324:	e2 f7       	brpl	.-8      	; 0x131e <DIO_SetPinValue+0x8e>
    1326:	ba 01       	movw	r22, r20
    1328:	60 95       	com	r22
    132a:	62 23       	and	r22, r18
    132c:	68 bb       	out	0x18, r22	; 24
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	08 95       	ret
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
    1332:	41 30       	cpi	r20, 0x01	; 1
    1334:	69 f4       	brne	.+26     	; 0x1350 <DIO_SetPinValue+0xc0>
    1336:	45 b3       	in	r20, 0x15	; 21
    1338:	21 e0       	ldi	r18, 0x01	; 1
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	c9 01       	movw	r24, r18
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <DIO_SetPinValue+0xb4>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	6a 95       	dec	r22
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <DIO_SetPinValue+0xb0>
    1348:	84 2b       	or	r24, r20
    134a:	85 bb       	out	0x15, r24	; 21
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	08 95       	ret
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
    1350:	25 b3       	in	r18, 0x15	; 21
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	ac 01       	movw	r20, r24
    1358:	02 c0       	rjmp	.+4      	; 0x135e <DIO_SetPinValue+0xce>
    135a:	44 0f       	add	r20, r20
    135c:	55 1f       	adc	r21, r21
    135e:	6a 95       	dec	r22
    1360:	e2 f7       	brpl	.-8      	; 0x135a <DIO_SetPinValue+0xca>
    1362:	ba 01       	movw	r22, r20
    1364:	60 95       	com	r22
    1366:	62 23       	and	r22, r18
    1368:	65 bb       	out	0x15, r22	; 21
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	08 95       	ret
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTD:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTD_REG,PinId)) : (CLR_BIT(PORTD_REG,PinId)) ;
    136e:	41 30       	cpi	r20, 0x01	; 1
    1370:	71 f4       	brne	.+28     	; 0x138e <DIO_SetPinValue+0xfe>
    1372:	22 b3       	in	r18, 0x12	; 18
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	ac 01       	movw	r20, r24
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <DIO_SetPinValue+0xf0>
    137c:	44 0f       	add	r20, r20
    137e:	55 1f       	adc	r21, r21
    1380:	6a 95       	dec	r22
    1382:	e2 f7       	brpl	.-8      	; 0x137c <DIO_SetPinValue+0xec>
    1384:	ba 01       	movw	r22, r20
    1386:	62 2b       	or	r22, r18
    1388:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	08 95       	ret
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTD:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTD_REG,PinId)) : (CLR_BIT(PORTD_REG,PinId)) ;
    138e:	22 b3       	in	r18, 0x12	; 18
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	ac 01       	movw	r20, r24
    1396:	02 c0       	rjmp	.+4      	; 0x139c <DIO_SetPinValue+0x10c>
    1398:	44 0f       	add	r20, r20
    139a:	55 1f       	adc	r21, r21
    139c:	6a 95       	dec	r22
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <DIO_SetPinValue+0x108>
    13a0:	ba 01       	movw	r22, r20
    13a2:	60 95       	com	r22
    13a4:	62 23       	and	r22, r18
    13a6:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	08 95       	ret
			    break;
			}	
		} 
	else
	{
		ErrorStatus = DIO_NOK;
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	08 95       	ret
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	08 95       	ret
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	08 95       	ret
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
    13b8:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    13ba:	08 95       	ret

000013bc <DIO_TogglePinValue>:
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7))  //edit all
    13bc:	84 30       	cpi	r24, 0x04	; 4
    13be:	08 f0       	brcs	.+2      	; 0x13c2 <DIO_TogglePinValue+0x6>
    13c0:	45 c0       	rjmp	.+138    	; 0x144c <DIO_TogglePinValue+0x90>
    13c2:	68 30       	cpi	r22, 0x08	; 8
    13c4:	08 f0       	brcs	.+2      	; 0x13c8 <DIO_TogglePinValue+0xc>
    13c6:	44 c0       	rjmp	.+136    	; 0x1450 <DIO_TogglePinValue+0x94>
	{
		switch (PortId)
    13c8:	81 30       	cpi	r24, 0x01	; 1
    13ca:	b1 f0       	breq	.+44     	; 0x13f8 <DIO_TogglePinValue+0x3c>
    13cc:	81 30       	cpi	r24, 0x01	; 1
    13ce:	30 f0       	brcs	.+12     	; 0x13dc <DIO_TogglePinValue+0x20>
    13d0:	82 30       	cpi	r24, 0x02	; 2
    13d2:	01 f1       	breq	.+64     	; 0x1414 <DIO_TogglePinValue+0x58>
    13d4:	83 30       	cpi	r24, 0x03	; 3
    13d6:	09 f0       	breq	.+2      	; 0x13da <DIO_TogglePinValue+0x1e>
    13d8:	3d c0       	rjmp	.+122    	; 0x1454 <DIO_TogglePinValue+0x98>
    13da:	2a c0       	rjmp	.+84     	; 0x1430 <DIO_TogglePinValue+0x74>
		{
			case DIO_PORTA:
			TGL_BIT(PORTA_REG,PinId);
    13dc:	2b b3       	in	r18, 0x1b	; 27
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	ac 01       	movw	r20, r24
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <DIO_TogglePinValue+0x2e>
    13e6:	44 0f       	add	r20, r20
    13e8:	55 1f       	adc	r21, r21
    13ea:	6a 95       	dec	r22
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <DIO_TogglePinValue+0x2a>
    13ee:	ba 01       	movw	r22, r20
    13f0:	62 27       	eor	r22, r18
    13f2:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
    13f4:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch (PortId)
		{
			case DIO_PORTA:
			TGL_BIT(PORTA_REG,PinId);
			break;
    13f6:	08 95       	ret
			
			case DIO_PORTB:
			TGL_BIT(PORTB_REG,PinId);
    13f8:	28 b3       	in	r18, 0x18	; 24
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	ac 01       	movw	r20, r24
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <DIO_TogglePinValue+0x4a>
    1402:	44 0f       	add	r20, r20
    1404:	55 1f       	adc	r21, r21
    1406:	6a 95       	dec	r22
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <DIO_TogglePinValue+0x46>
    140a:	ba 01       	movw	r22, r20
    140c:	62 27       	eor	r22, r18
    140e:	68 bb       	out	0x18, r22	; 24
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
    1410:	80 e0       	ldi	r24, 0x00	; 0
			TGL_BIT(PORTA_REG,PinId);
			break;
			
			case DIO_PORTB:
			TGL_BIT(PORTB_REG,PinId);
			break;
    1412:	08 95       	ret
			
			case DIO_PORTC:
			TGL_BIT(PORTC_REG,PinId);
    1414:	25 b3       	in	r18, 0x15	; 21
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	ac 01       	movw	r20, r24
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <DIO_TogglePinValue+0x66>
    141e:	44 0f       	add	r20, r20
    1420:	55 1f       	adc	r21, r21
    1422:	6a 95       	dec	r22
    1424:	e2 f7       	brpl	.-8      	; 0x141e <DIO_TogglePinValue+0x62>
    1426:	ba 01       	movw	r22, r20
    1428:	62 27       	eor	r22, r18
    142a:	65 bb       	out	0x15, r22	; 21
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
    142c:	80 e0       	ldi	r24, 0x00	; 0
			TGL_BIT(PORTB_REG,PinId);
			break;
			
			case DIO_PORTC:
			TGL_BIT(PORTC_REG,PinId);
			break;
    142e:	08 95       	ret
			
			case DIO_PORTD:
			TGL_BIT(PORTD_REG,PinId);
    1430:	22 b3       	in	r18, 0x12	; 18
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	ac 01       	movw	r20, r24
    1438:	02 c0       	rjmp	.+4      	; 0x143e <DIO_TogglePinValue+0x82>
    143a:	44 0f       	add	r20, r20
    143c:	55 1f       	adc	r21, r21
    143e:	6a 95       	dec	r22
    1440:	e2 f7       	brpl	.-8      	; 0x143a <DIO_TogglePinValue+0x7e>
    1442:	ba 01       	movw	r22, r20
    1444:	62 27       	eor	r22, r18
    1446:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
    1448:	80 e0       	ldi	r24, 0x00	; 0
			TGL_BIT(PORTC_REG,PinId);
			break;
			
			case DIO_PORTD:
			TGL_BIT(PORTD_REG,PinId);
			break;
    144a:	08 95       	ret
		}
	} 
	else
	{
		ErrorStatus = DIO_NOK;
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	08 95       	ret
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	08 95       	ret
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
    1454:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    1456:	08 95       	ret

00001458 <DIO_ReadValue>:
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PinValue!=NULL)) //wild pointer 
    1458:	84 30       	cpi	r24, 0x04	; 4
    145a:	08 f0       	brcs	.+2      	; 0x145e <DIO_ReadValue+0x6>
    145c:	49 c0       	rjmp	.+146    	; 0x14f0 <DIO_ReadValue+0x98>
    145e:	68 30       	cpi	r22, 0x08	; 8
    1460:	08 f0       	brcs	.+2      	; 0x1464 <DIO_ReadValue+0xc>
    1462:	48 c0       	rjmp	.+144    	; 0x14f4 <DIO_ReadValue+0x9c>
    1464:	41 15       	cp	r20, r1
    1466:	51 05       	cpc	r21, r1
    1468:	09 f4       	brne	.+2      	; 0x146c <DIO_ReadValue+0x14>
    146a:	46 c0       	rjmp	.+140    	; 0x14f8 <DIO_ReadValue+0xa0>
	{
		switch (PortId)
    146c:	81 30       	cpi	r24, 0x01	; 1
    146e:	b1 f0       	breq	.+44     	; 0x149c <DIO_ReadValue+0x44>
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	30 f0       	brcs	.+12     	; 0x1480 <DIO_ReadValue+0x28>
    1474:	82 30       	cpi	r24, 0x02	; 2
    1476:	01 f1       	breq	.+64     	; 0x14b8 <DIO_ReadValue+0x60>
    1478:	83 30       	cpi	r24, 0x03	; 3
    147a:	09 f0       	breq	.+2      	; 0x147e <DIO_ReadValue+0x26>
    147c:	3f c0       	rjmp	.+126    	; 0x14fc <DIO_ReadValue+0xa4>
    147e:	2a c0       	rjmp	.+84     	; 0x14d4 <DIO_ReadValue+0x7c>
		{
			case DIO_PORTA:
			*PinValue= GET_BIT(PINA_REG,PinId);
    1480:	89 b3       	in	r24, 0x19	; 25
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	9c 01       	movw	r18, r24
    1486:	02 c0       	rjmp	.+4      	; 0x148c <DIO_ReadValue+0x34>
    1488:	35 95       	asr	r19
    148a:	27 95       	ror	r18
    148c:	6a 95       	dec	r22
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <DIO_ReadValue+0x30>
    1490:	b9 01       	movw	r22, r18
    1492:	61 70       	andi	r22, 0x01	; 1
    1494:	fa 01       	movw	r30, r20
    1496:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1498:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch (PortId)
		{
			case DIO_PORTA:
			*PinValue= GET_BIT(PINA_REG,PinId);
			break;
    149a:	08 95       	ret
			
			case DIO_PORTB:
			*PinValue= GET_BIT(PINB_REG,PinId);
    149c:	86 b3       	in	r24, 0x16	; 22
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	9c 01       	movw	r18, r24
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <DIO_ReadValue+0x50>
    14a4:	35 95       	asr	r19
    14a6:	27 95       	ror	r18
    14a8:	6a 95       	dec	r22
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <DIO_ReadValue+0x4c>
    14ac:	b9 01       	movw	r22, r18
    14ae:	61 70       	andi	r22, 0x01	; 1
    14b0:	fa 01       	movw	r30, r20
    14b2:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    14b4:	80 e0       	ldi	r24, 0x00	; 0
			*PinValue= GET_BIT(PINA_REG,PinId);
			break;
			
			case DIO_PORTB:
			*PinValue= GET_BIT(PINB_REG,PinId);
			break;
    14b6:	08 95       	ret
			
			case DIO_PORTC:
			*PinValue= GET_BIT(PINC_REG,PinId);
    14b8:	83 b3       	in	r24, 0x13	; 19
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	9c 01       	movw	r18, r24
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <DIO_ReadValue+0x6c>
    14c0:	35 95       	asr	r19
    14c2:	27 95       	ror	r18
    14c4:	6a 95       	dec	r22
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <DIO_ReadValue+0x68>
    14c8:	b9 01       	movw	r22, r18
    14ca:	61 70       	andi	r22, 0x01	; 1
    14cc:	fa 01       	movw	r30, r20
    14ce:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    14d0:	80 e0       	ldi	r24, 0x00	; 0
			*PinValue= GET_BIT(PINB_REG,PinId);
			break;
			
			case DIO_PORTC:
			*PinValue= GET_BIT(PINC_REG,PinId);
			break;
    14d2:	08 95       	ret
			
			case DIO_PORTD:
			*PinValue= GET_BIT(PIND_REG,PinId);
    14d4:	80 b3       	in	r24, 0x10	; 16
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	9c 01       	movw	r18, r24
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <DIO_ReadValue+0x88>
    14dc:	35 95       	asr	r19
    14de:	27 95       	ror	r18
    14e0:	6a 95       	dec	r22
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <DIO_ReadValue+0x84>
    14e4:	b9 01       	movw	r22, r18
    14e6:	61 70       	andi	r22, 0x01	; 1
    14e8:	fa 01       	movw	r30, r20
    14ea:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    14ec:	80 e0       	ldi	r24, 0x00	; 0
			*PinValue= GET_BIT(PINC_REG,PinId);
			break;
			
			case DIO_PORTD:
			*PinValue= GET_BIT(PIND_REG,PinId);
			break;
    14ee:	08 95       	ret
		}
	} 
	else
	{
		ErrorStatus = DIO_NOK;
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	08 95       	ret
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	08 95       	ret
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	08 95       	ret
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    14fc:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    14fe:	08 95       	ret

00001500 <DIO_activePinInPullUpResistance>:
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	 if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7))
    1500:	84 30       	cpi	r24, 0x04	; 4
    1502:	08 f0       	brcs	.+2      	; 0x1506 <DIO_activePinInPullUpResistance+0x6>
    1504:	45 c0       	rjmp	.+138    	; 0x1590 <DIO_activePinInPullUpResistance+0x90>
    1506:	68 30       	cpi	r22, 0x08	; 8
    1508:	08 f0       	brcs	.+2      	; 0x150c <DIO_activePinInPullUpResistance+0xc>
    150a:	44 c0       	rjmp	.+136    	; 0x1594 <DIO_activePinInPullUpResistance+0x94>
	 {
		 switch(PortId)
    150c:	81 30       	cpi	r24, 0x01	; 1
    150e:	b1 f0       	breq	.+44     	; 0x153c <DIO_activePinInPullUpResistance+0x3c>
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	30 f0       	brcs	.+12     	; 0x1520 <DIO_activePinInPullUpResistance+0x20>
    1514:	82 30       	cpi	r24, 0x02	; 2
    1516:	01 f1       	breq	.+64     	; 0x1558 <DIO_activePinInPullUpResistance+0x58>
    1518:	83 30       	cpi	r24, 0x03	; 3
    151a:	09 f0       	breq	.+2      	; 0x151e <DIO_activePinInPullUpResistance+0x1e>
    151c:	3d c0       	rjmp	.+122    	; 0x1598 <DIO_activePinInPullUpResistance+0x98>
    151e:	2a c0       	rjmp	.+84     	; 0x1574 <DIO_activePinInPullUpResistance+0x74>
		 {
			 case DIO_PORTA:
			 SET_BIT(PORTA_REG,PinId);
    1520:	2b b3       	in	r18, 0x1b	; 27
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	ac 01       	movw	r20, r24
    1528:	02 c0       	rjmp	.+4      	; 0x152e <DIO_activePinInPullUpResistance+0x2e>
    152a:	44 0f       	add	r20, r20
    152c:	55 1f       	adc	r21, r21
    152e:	6a 95       	dec	r22
    1530:	e2 f7       	brpl	.-8      	; 0x152a <DIO_activePinInPullUpResistance+0x2a>
    1532:	ba 01       	movw	r22, r20
    1534:	62 2b       	or	r22, r18
    1536:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1538:	80 e0       	ldi	r24, 0x00	; 0
	 {
		 switch(PortId)
		 {
			 case DIO_PORTA:
			 SET_BIT(PORTA_REG,PinId);
			 break;
    153a:	08 95       	ret
			 
			 case DIO_PORTB:
			 SET_BIT(PORTB_REG,PinId);
    153c:	28 b3       	in	r18, 0x18	; 24
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	ac 01       	movw	r20, r24
    1544:	02 c0       	rjmp	.+4      	; 0x154a <DIO_activePinInPullUpResistance+0x4a>
    1546:	44 0f       	add	r20, r20
    1548:	55 1f       	adc	r21, r21
    154a:	6a 95       	dec	r22
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <DIO_activePinInPullUpResistance+0x46>
    154e:	ba 01       	movw	r22, r20
    1550:	62 2b       	or	r22, r18
    1552:	68 bb       	out	0x18, r22	; 24
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1554:	80 e0       	ldi	r24, 0x00	; 0
			 SET_BIT(PORTA_REG,PinId);
			 break;
			 
			 case DIO_PORTB:
			 SET_BIT(PORTB_REG,PinId);
			 break;
    1556:	08 95       	ret
			 
			 case DIO_PORTC:
			 SET_BIT(PORTC_REG,PinId);
    1558:	25 b3       	in	r18, 0x15	; 21
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	ac 01       	movw	r20, r24
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <DIO_activePinInPullUpResistance+0x66>
    1562:	44 0f       	add	r20, r20
    1564:	55 1f       	adc	r21, r21
    1566:	6a 95       	dec	r22
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <DIO_activePinInPullUpResistance+0x62>
    156a:	ba 01       	movw	r22, r20
    156c:	62 2b       	or	r22, r18
    156e:	65 bb       	out	0x15, r22	; 21
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1570:	80 e0       	ldi	r24, 0x00	; 0
			 SET_BIT(PORTB_REG,PinId);
			 break;
			 
			 case DIO_PORTC:
			 SET_BIT(PORTC_REG,PinId);
			 break;
    1572:	08 95       	ret
			 
			 case DIO_PORTD:
			 SET_BIT(PORTD_REG,PinId);
    1574:	22 b3       	in	r18, 0x12	; 18
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	ac 01       	movw	r20, r24
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <DIO_activePinInPullUpResistance+0x82>
    157e:	44 0f       	add	r20, r20
    1580:	55 1f       	adc	r21, r21
    1582:	6a 95       	dec	r22
    1584:	e2 f7       	brpl	.-8      	; 0x157e <DIO_activePinInPullUpResistance+0x7e>
    1586:	ba 01       	movw	r22, r20
    1588:	62 2b       	or	r22, r18
    158a:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    158c:	80 e0       	ldi	r24, 0x00	; 0
			 SET_BIT(PORTC_REG,PinId);
			 break;
			 
			 case DIO_PORTD:
			 SET_BIT(PORTD_REG,PinId);
			 break;
    158e:	08 95       	ret
	      } 
	 }	 
	 else
	 {
		ErrorStatus = DIO_NOK;
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	08 95       	ret
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	08 95       	ret
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1598:	80 e0       	ldi	r24, 0x00	; 0
	 else
	 {
		ErrorStatus = DIO_NOK;
	 }
	 return ErrorStatus;
}
    159a:	08 95       	ret

0000159c <DIO_setPortDirection>:


DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD))
    159c:	84 30       	cpi	r24, 0x04	; 4
    159e:	a8 f5       	brcc	.+106    	; 0x160a <DIO_setPortDirection+0x6e>
	{
		switch(PortId)
    15a0:	81 30       	cpi	r24, 0x01	; 1
    15a2:	91 f0       	breq	.+36     	; 0x15c8 <DIO_setPortDirection+0x2c>
    15a4:	81 30       	cpi	r24, 0x01	; 1
    15a6:	28 f0       	brcs	.+10     	; 0x15b2 <DIO_setPortDirection+0x16>
    15a8:	82 30       	cpi	r24, 0x02	; 2
    15aa:	c9 f0       	breq	.+50     	; 0x15de <DIO_setPortDirection+0x42>
    15ac:	83 30       	cpi	r24, 0x03	; 3
    15ae:	79 f5       	brne	.+94     	; 0x160e <DIO_setPortDirection+0x72>
    15b0:	21 c0       	rjmp	.+66     	; 0x15f4 <DIO_setPortDirection+0x58>
		{
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
    15b2:	6f 3f       	cpi	r22, 0xFF	; 255
    15b4:	29 f4       	brne	.+10     	; 0x15c0 <DIO_setPortDirection+0x24>
    15b6:	8a b3       	in	r24, 0x1a	; 26
    15b8:	8f ef       	ldi	r24, 0xFF	; 255
    15ba:	8a bb       	out	0x1a, r24	; 26



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	08 95       	ret
	if ( (PortId<=DIO_PORTD))
	{
		switch(PortId)
		{
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
    15c0:	8a b3       	in	r24, 0x1a	; 26
    15c2:	1a ba       	out	0x1a, r1	; 26



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	08 95       	ret
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
			break;
			
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
    15c8:	6f 3f       	cpi	r22, 0xFF	; 255
    15ca:	29 f4       	brne	.+10     	; 0x15d6 <DIO_setPortDirection+0x3a>
    15cc:	87 b3       	in	r24, 0x17	; 23
    15ce:	8f ef       	ldi	r24, 0xFF	; 255
    15d0:	87 bb       	out	0x17, r24	; 23



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	08 95       	ret
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
			break;
			
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
    15d6:	87 b3       	in	r24, 0x17	; 23
    15d8:	17 ba       	out	0x17, r1	; 23



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	08 95       	ret
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
			break;
			
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
    15de:	6f 3f       	cpi	r22, 0xFF	; 255
    15e0:	29 f4       	brne	.+10     	; 0x15ec <DIO_setPortDirection+0x50>
    15e2:	84 b3       	in	r24, 0x14	; 20
    15e4:	8f ef       	ldi	r24, 0xFF	; 255
    15e6:	84 bb       	out	0x14, r24	; 20



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	08 95       	ret
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
			break;
			
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
    15ec:	84 b3       	in	r24, 0x14	; 20
    15ee:	14 ba       	out	0x14, r1	; 20



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	08 95       	ret
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
			break;
			
			case DIO_PORTD:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRD_REG)):(CLR_REG(DDRD_REG));
    15f4:	6f 3f       	cpi	r22, 0xFF	; 255
    15f6:	29 f4       	brne	.+10     	; 0x1602 <DIO_setPortDirection+0x66>
    15f8:	81 b3       	in	r24, 0x11	; 17
    15fa:	8f ef       	ldi	r24, 0xFF	; 255
    15fc:	81 bb       	out	0x11, r24	; 17



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	08 95       	ret
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
			break;
			
			case DIO_PORTD:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRD_REG)):(CLR_REG(DDRD_REG));
    1602:	81 b3       	in	r24, 0x11	; 17
    1604:	11 ba       	out	0x11, r1	; 17



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	08 95       	ret
			break;
		}
	} 
	else
	{
		ErrorStatus = DIO_NOK;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	08 95       	ret



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    160e:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    1610:	08 95       	ret

00001612 <DIO_setPortValue>:


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD) )
    1612:	84 30       	cpi	r24, 0x04	; 4
    1614:	a8 f4       	brcc	.+42     	; 0x1640 <DIO_setPortValue+0x2e>
	{
		switch(PortId)
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	51 f0       	breq	.+20     	; 0x162e <DIO_setPortValue+0x1c>
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	28 f0       	brcs	.+10     	; 0x1628 <DIO_setPortValue+0x16>
    161e:	82 30       	cpi	r24, 0x02	; 2
    1620:	49 f0       	breq	.+18     	; 0x1634 <DIO_setPortValue+0x22>
    1622:	83 30       	cpi	r24, 0x03	; 3
    1624:	79 f4       	brne	.+30     	; 0x1644 <DIO_setPortValue+0x32>
    1626:	09 c0       	rjmp	.+18     	; 0x163a <DIO_setPortValue+0x28>
		{
			case DIO_PORTA:
			PORTA_REG=PortValue;
    1628:	6b bb       	out	0x1b, r22	; 27
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    162a:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			PORTA_REG=PortValue;
			break;
    162c:	08 95       	ret
			
			case DIO_PORTB:
			PORTB_REG=PortValue;
    162e:	68 bb       	out	0x18, r22	; 24
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1630:	80 e0       	ldi	r24, 0x00	; 0
			PORTA_REG=PortValue;
			break;
			
			case DIO_PORTB:
			PORTB_REG=PortValue;
			break;
    1632:	08 95       	ret
			
			case DIO_PORTC:
			PORTC_REG=PortValue;
    1634:	65 bb       	out	0x15, r22	; 21
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1636:	80 e0       	ldi	r24, 0x00	; 0
			PORTB_REG=PortValue;
			break;
			
			case DIO_PORTC:
			PORTC_REG=PortValue;
			break;
    1638:	08 95       	ret
			
			case DIO_PORTD:
			PORTD_REG=PortValue;
    163a:	62 bb       	out	0x12, r22	; 18
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    163c:	80 e0       	ldi	r24, 0x00	; 0
			PORTC_REG=PortValue;
			break;
			
			case DIO_PORTD:
			PORTD_REG=PortValue;
			break;
    163e:	08 95       	ret
		}
	}
	else
	{
	ErrorStatus = DIO_NOK;
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	08 95       	ret
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1644:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
	ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    1646:	08 95       	ret

00001648 <DIO_getPortValue>:


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD) && (PortValue!=NULL) )
    1648:	84 30       	cpi	r24, 0x04	; 4
    164a:	00 f5       	brcc	.+64     	; 0x168c <DIO_getPortValue+0x44>
    164c:	61 15       	cp	r22, r1
    164e:	71 05       	cpc	r23, r1
    1650:	f9 f0       	breq	.+62     	; 0x1690 <DIO_getPortValue+0x48>
	{
		switch(PortId)
    1652:	81 30       	cpi	r24, 0x01	; 1
    1654:	61 f0       	breq	.+24     	; 0x166e <DIO_getPortValue+0x26>
    1656:	81 30       	cpi	r24, 0x01	; 1
    1658:	28 f0       	brcs	.+10     	; 0x1664 <DIO_getPortValue+0x1c>
    165a:	82 30       	cpi	r24, 0x02	; 2
    165c:	69 f0       	breq	.+26     	; 0x1678 <DIO_getPortValue+0x30>
    165e:	83 30       	cpi	r24, 0x03	; 3
    1660:	c9 f4       	brne	.+50     	; 0x1694 <DIO_getPortValue+0x4c>
    1662:	0f c0       	rjmp	.+30     	; 0x1682 <DIO_getPortValue+0x3a>
		{
			case DIO_PORTA:
			*PortValue =PORTA_REG;
    1664:	8b b3       	in	r24, 0x1b	; 27
    1666:	fb 01       	movw	r30, r22
    1668:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    166a:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			*PortValue =PORTA_REG;
			break;
    166c:	08 95       	ret
			
			case DIO_PORTB:
		    *PortValue =PORTB_REG;
    166e:	88 b3       	in	r24, 0x18	; 24
    1670:	fb 01       	movw	r30, r22
    1672:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1674:	80 e0       	ldi	r24, 0x00	; 0
			*PortValue =PORTA_REG;
			break;
			
			case DIO_PORTB:
		    *PortValue =PORTB_REG;
			break;
    1676:	08 95       	ret
			
			case DIO_PORTC:
			*PortValue =PORTC_REG;
    1678:	85 b3       	in	r24, 0x15	; 21
    167a:	fb 01       	movw	r30, r22
    167c:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    167e:	80 e0       	ldi	r24, 0x00	; 0
		    *PortValue =PORTB_REG;
			break;
			
			case DIO_PORTC:
			*PortValue =PORTC_REG;
			break;
    1680:	08 95       	ret
			
			case DIO_PORTD:
			*PortValue =PORTD_REG;
    1682:	82 b3       	in	r24, 0x12	; 18
    1684:	fb 01       	movw	r30, r22
    1686:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1688:	80 e0       	ldi	r24, 0x00	; 0
			*PortValue =PORTC_REG;
			break;
			
			case DIO_PORTD:
			*PortValue =PORTD_REG;
			break;
    168a:	08 95       	ret
		}
	}
	else
	{
		ErrorStatus = DIO_NOK;
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	08 95       	ret
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	08 95       	ret
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1694:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    1696:	08 95       	ret

00001698 <DIO_togglePortValue>:


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD))
    1698:	84 30       	cpi	r24, 0x04	; 4
    169a:	e8 f4       	brcc	.+58     	; 0x16d6 <DIO_togglePortValue+0x3e>
	{
		switch(PortId)
    169c:	81 30       	cpi	r24, 0x01	; 1
    169e:	61 f0       	breq	.+24     	; 0x16b8 <DIO_togglePortValue+0x20>
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	28 f0       	brcs	.+10     	; 0x16ae <DIO_togglePortValue+0x16>
    16a4:	82 30       	cpi	r24, 0x02	; 2
    16a6:	69 f0       	breq	.+26     	; 0x16c2 <DIO_togglePortValue+0x2a>
    16a8:	83 30       	cpi	r24, 0x03	; 3
    16aa:	b9 f4       	brne	.+46     	; 0x16da <DIO_togglePortValue+0x42>
    16ac:	0f c0       	rjmp	.+30     	; 0x16cc <DIO_togglePortValue+0x34>
		{
			case DIO_PORTA:
			TGL_REG(PORTA_REG);
    16ae:	8b b3       	in	r24, 0x1b	; 27
    16b0:	80 95       	com	r24
    16b2:	8b bb       	out	0x1b, r24	; 27
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    16b4:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			TGL_REG(PORTA_REG);
			break;
    16b6:	08 95       	ret
			
			case DIO_PORTB:
			TGL_REG(PORTB_REG);
    16b8:	88 b3       	in	r24, 0x18	; 24
    16ba:	80 95       	com	r24
    16bc:	88 bb       	out	0x18, r24	; 24
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    16be:	80 e0       	ldi	r24, 0x00	; 0
			TGL_REG(PORTA_REG);
			break;
			
			case DIO_PORTB:
			TGL_REG(PORTB_REG);
			break;
    16c0:	08 95       	ret
			
			case DIO_PORTC:
			TGL_REG(PORTC_REG);
    16c2:	85 b3       	in	r24, 0x15	; 21
    16c4:	80 95       	com	r24
    16c6:	85 bb       	out	0x15, r24	; 21
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    16c8:	80 e0       	ldi	r24, 0x00	; 0
			TGL_REG(PORTB_REG);
			break;
			
			case DIO_PORTC:
			TGL_REG(PORTC_REG);
			break;
    16ca:	08 95       	ret
			
			case DIO_PORTD:
			TGL_REG(PORTD_REG);
    16cc:	82 b3       	in	r24, 0x12	; 18
    16ce:	80 95       	com	r24
    16d0:	82 bb       	out	0x12, r24	; 18
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    16d2:	80 e0       	ldi	r24, 0x00	; 0
			TGL_REG(PORTC_REG);
			break;
			
			case DIO_PORTD:
			TGL_REG(PORTD_REG);
			break;
    16d4:	08 95       	ret
		}
	}
	else
	{
		ErrorStatus = DIO_NOK;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	08 95       	ret
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    16da:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    16dc:	08 95       	ret

000016de <DIO_activePortInPullUpResistance>:


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD))
    16de:	84 30       	cpi	r24, 0x04	; 4
    16e0:	e8 f4       	brcc	.+58     	; 0x171c <DIO_activePortInPullUpResistance+0x3e>
	{
		switch(PortId)
    16e2:	81 30       	cpi	r24, 0x01	; 1
    16e4:	61 f0       	breq	.+24     	; 0x16fe <DIO_activePortInPullUpResistance+0x20>
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	28 f0       	brcs	.+10     	; 0x16f4 <DIO_activePortInPullUpResistance+0x16>
    16ea:	82 30       	cpi	r24, 0x02	; 2
    16ec:	69 f0       	breq	.+26     	; 0x1708 <DIO_activePortInPullUpResistance+0x2a>
    16ee:	83 30       	cpi	r24, 0x03	; 3
    16f0:	b9 f4       	brne	.+46     	; 0x1720 <DIO_activePortInPullUpResistance+0x42>
    16f2:	0f c0       	rjmp	.+30     	; 0x1712 <DIO_activePortInPullUpResistance+0x34>
		{
			case DIO_PORTA:
			SET_REG(PORTA_REG);
    16f4:	8b b3       	in	r24, 0x1b	; 27
    16f6:	8f ef       	ldi	r24, 0xFF	; 255
    16f8:	8b bb       	out	0x1b, r24	; 27
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    16fa:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			SET_REG(PORTA_REG);
			break;
    16fc:	08 95       	ret
			
			case DIO_PORTB:
			SET_REG(PORTB_REG);
    16fe:	88 b3       	in	r24, 0x18	; 24
    1700:	8f ef       	ldi	r24, 0xFF	; 255
    1702:	88 bb       	out	0x18, r24	; 24
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1704:	80 e0       	ldi	r24, 0x00	; 0
			SET_REG(PORTA_REG);
			break;
			
			case DIO_PORTB:
			SET_REG(PORTB_REG);
			break;
    1706:	08 95       	ret
			
			case DIO_PORTC:
			SET_REG(PORTC_REG);
    1708:	85 b3       	in	r24, 0x15	; 21
    170a:	8f ef       	ldi	r24, 0xFF	; 255
    170c:	85 bb       	out	0x15, r24	; 21
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    170e:	80 e0       	ldi	r24, 0x00	; 0
			SET_REG(PORTB_REG);
			break;
			
			case DIO_PORTC:
			SET_REG(PORTC_REG);
			break;
    1710:	08 95       	ret
			
			case DIO_PORTD:
			SET_REG(PORTD_REG);
    1712:	82 b3       	in	r24, 0x12	; 18
    1714:	8f ef       	ldi	r24, 0xFF	; 255
    1716:	82 bb       	out	0x12, r24	; 18
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1718:	80 e0       	ldi	r24, 0x00	; 0
			SET_REG(PORTC_REG);
			break;
			
			case DIO_PORTD:
			SET_REG(PORTD_REG);
			break;
    171a:	08 95       	ret
		}
	}
	else
	{
		ErrorStatus = DIO_NOK;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	08 95       	ret
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1720:	80 e0       	ldi	r24, 0x00	; 0
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
	
}
    1722:	08 95       	ret

00001724 <EXTI_Enable>:
static void (*PRIVATE_PtrCallBackInt1) (void) = NULL;
static void (*PRIVATE_PtrCallBackInt2) (void) = NULL;

void EXTI_Enable(EXTI_InterruptSource InterruptSource ,EXTI_TriggerEdge TriggerEdge)
{
	switch(InterruptSource)
    1724:	81 30       	cpi	r24, 0x01	; 1
    1726:	71 f1       	breq	.+92     	; 0x1784 <EXTI_Enable+0x60>
    1728:	81 30       	cpi	r24, 0x01	; 1
    172a:	20 f0       	brcs	.+8      	; 0x1734 <EXTI_Enable+0x10>
    172c:	82 30       	cpi	r24, 0x02	; 2
    172e:	09 f0       	breq	.+2      	; 0x1732 <EXTI_Enable+0xe>
    1730:	60 c0       	rjmp	.+192    	; 0x17f2 <EXTI_Enable+0xce>
    1732:	50 c0       	rjmp	.+160    	; 0x17d4 <EXTI_Enable+0xb0>
	{
		case EXTI_INT0:
		switch(TriggerEdge)
    1734:	61 30       	cpi	r22, 0x01	; 1
    1736:	71 f0       	breq	.+28     	; 0x1754 <EXTI_Enable+0x30>
    1738:	61 30       	cpi	r22, 0x01	; 1
    173a:	28 f0       	brcs	.+10     	; 0x1746 <EXTI_Enable+0x22>
    173c:	62 30       	cpi	r22, 0x02	; 2
    173e:	89 f0       	breq	.+34     	; 0x1762 <EXTI_Enable+0x3e>
    1740:	63 30       	cpi	r22, 0x03	; 3
    1742:	e1 f4       	brne	.+56     	; 0x177c <EXTI_Enable+0x58>
    1744:	15 c0       	rjmp	.+42     	; 0x1770 <EXTI_Enable+0x4c>
		{
			case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
    1746:	85 b7       	in	r24, 0x35	; 53
    1748:	81 60       	ori	r24, 0x01	; 1
    174a:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
    174c:	85 b7       	in	r24, 0x35	; 53
    174e:	82 60       	ori	r24, 0x02	; 2
    1750:	85 bf       	out	0x35, r24	; 53
			break;
    1752:	14 c0       	rjmp	.+40     	; 0x177c <EXTI_Enable+0x58>
			
			case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
    1754:	85 b7       	in	r24, 0x35	; 53
    1756:	8e 7f       	andi	r24, 0xFE	; 254
    1758:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
    175a:	85 b7       	in	r24, 0x35	; 53
    175c:	82 60       	ori	r24, 0x02	; 2
    175e:	85 bf       	out	0x35, r24	; 53
			break;
    1760:	0d c0       	rjmp	.+26     	; 0x177c <EXTI_Enable+0x58>
			
			case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
    1762:	85 b7       	in	r24, 0x35	; 53
    1764:	8e 7f       	andi	r24, 0xFE	; 254
    1766:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC01);
    1768:	85 b7       	in	r24, 0x35	; 53
    176a:	8d 7f       	andi	r24, 0xFD	; 253
    176c:	85 bf       	out	0x35, r24	; 53
			break;
    176e:	06 c0       	rjmp	.+12     	; 0x177c <EXTI_Enable+0x58>
			
			case EXTI_ANY_LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC00);
    1770:	85 b7       	in	r24, 0x35	; 53
    1772:	81 60       	ori	r24, 0x01	; 1
    1774:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC01);
    1776:	85 b7       	in	r24, 0x35	; 53
    1778:	8d 7f       	andi	r24, 0xFD	; 253
    177a:	85 bf       	out	0x35, r24	; 53
			break;
		}
		SET_BIT(GICR,INT0);
    177c:	8b b7       	in	r24, 0x3b	; 59
    177e:	80 64       	ori	r24, 0x40	; 64
    1780:	8b bf       	out	0x3b, r24	; 59
		break;
    1782:	08 95       	ret
		
		case EXTI_INT1:
		switch(TriggerEdge)
    1784:	61 30       	cpi	r22, 0x01	; 1
    1786:	71 f0       	breq	.+28     	; 0x17a4 <EXTI_Enable+0x80>
    1788:	61 30       	cpi	r22, 0x01	; 1
    178a:	28 f0       	brcs	.+10     	; 0x1796 <EXTI_Enable+0x72>
    178c:	62 30       	cpi	r22, 0x02	; 2
    178e:	89 f0       	breq	.+34     	; 0x17b2 <EXTI_Enable+0x8e>
    1790:	63 30       	cpi	r22, 0x03	; 3
    1792:	e1 f4       	brne	.+56     	; 0x17cc <EXTI_Enable+0xa8>
    1794:	15 c0       	rjmp	.+42     	; 0x17c0 <EXTI_Enable+0x9c>
		{
			case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,ISC10);
    1796:	85 b7       	in	r24, 0x35	; 53
    1798:	84 60       	ori	r24, 0x04	; 4
    179a:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
    179c:	85 b7       	in	r24, 0x35	; 53
    179e:	88 60       	ori	r24, 0x08	; 8
    17a0:	85 bf       	out	0x35, r24	; 53
			break;
    17a2:	14 c0       	rjmp	.+40     	; 0x17cc <EXTI_Enable+0xa8>
			
			case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCR,ISC10);
    17a4:	85 b7       	in	r24, 0x35	; 53
    17a6:	8b 7f       	andi	r24, 0xFB	; 251
    17a8:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
    17aa:	85 b7       	in	r24, 0x35	; 53
    17ac:	88 60       	ori	r24, 0x08	; 8
    17ae:	85 bf       	out	0x35, r24	; 53
			break;
    17b0:	0d c0       	rjmp	.+26     	; 0x17cc <EXTI_Enable+0xa8>
			
			case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR,ISC10);
    17b2:	85 b7       	in	r24, 0x35	; 53
    17b4:	8b 7f       	andi	r24, 0xFB	; 251
    17b6:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC11);
    17b8:	85 b7       	in	r24, 0x35	; 53
    17ba:	87 7f       	andi	r24, 0xF7	; 247
    17bc:	85 bf       	out	0x35, r24	; 53
			break;
    17be:	06 c0       	rjmp	.+12     	; 0x17cc <EXTI_Enable+0xa8>
			
			case EXTI_ANY_LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC10);
    17c0:	85 b7       	in	r24, 0x35	; 53
    17c2:	84 60       	ori	r24, 0x04	; 4
    17c4:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC11);
    17c6:	85 b7       	in	r24, 0x35	; 53
    17c8:	87 7f       	andi	r24, 0xF7	; 247
    17ca:	85 bf       	out	0x35, r24	; 53
			break;
		}
		SET_BIT(GICR,INT1);
    17cc:	8b b7       	in	r24, 0x3b	; 59
    17ce:	80 68       	ori	r24, 0x80	; 128
    17d0:	8b bf       	out	0x3b, r24	; 59
		break;
    17d2:	08 95       	ret
		
		case EXTI_INT2:
		switch(TriggerEdge)
    17d4:	66 23       	and	r22, r22
    17d6:	19 f0       	breq	.+6      	; 0x17de <EXTI_Enable+0xba>
    17d8:	61 30       	cpi	r22, 0x01	; 1
    17da:	41 f4       	brne	.+16     	; 0x17ec <EXTI_Enable+0xc8>
    17dc:	04 c0       	rjmp	.+8      	; 0x17e6 <EXTI_Enable+0xc2>
		{
			case EXTI_RISING_EDGE:
			SET_BIT(MCUCSR,ISC2);
    17de:	84 b7       	in	r24, 0x34	; 52
    17e0:	80 64       	ori	r24, 0x40	; 64
    17e2:	84 bf       	out	0x34, r24	; 52
			break;
    17e4:	03 c0       	rjmp	.+6      	; 0x17ec <EXTI_Enable+0xc8>
			
			case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCSR,ISC2);
    17e6:	84 b7       	in	r24, 0x34	; 52
    17e8:	8f 7b       	andi	r24, 0xBF	; 191
    17ea:	84 bf       	out	0x34, r24	; 52
			break;
		}
		SET_BIT(GICR,INT2);
    17ec:	8b b7       	in	r24, 0x3b	; 59
    17ee:	80 62       	ori	r24, 0x20	; 32
    17f0:	8b bf       	out	0x3b, r24	; 59
    17f2:	08 95       	ret

000017f4 <EXTI_Disable>:
	}
}

void EXTI_Disable(EXTI_InterruptSource InterruptSource)
{
	switch(InterruptSource)
    17f4:	81 30       	cpi	r24, 0x01	; 1
    17f6:	49 f0       	breq	.+18     	; 0x180a <EXTI_Disable+0x16>
    17f8:	81 30       	cpi	r24, 0x01	; 1
    17fa:	18 f0       	brcs	.+6      	; 0x1802 <EXTI_Disable+0xe>
    17fc:	82 30       	cpi	r24, 0x02	; 2
    17fe:	61 f4       	brne	.+24     	; 0x1818 <EXTI_Disable+0x24>
    1800:	08 c0       	rjmp	.+16     	; 0x1812 <EXTI_Disable+0x1e>
	{
		case EXTI_INT0:
		CLR_BIT(GICR,INT0);
    1802:	8b b7       	in	r24, 0x3b	; 59
    1804:	8f 7b       	andi	r24, 0xBF	; 191
    1806:	8b bf       	out	0x3b, r24	; 59
		break;
    1808:	08 95       	ret
		
		case EXTI_INT1:
		CLR_BIT(GICR,INT1);
    180a:	8b b7       	in	r24, 0x3b	; 59
    180c:	8f 77       	andi	r24, 0x7F	; 127
    180e:	8b bf       	out	0x3b, r24	; 59
		break;
    1810:	08 95       	ret
		
		case EXTI_INT2:
		CLR_BIT(GICR,INT2);
    1812:	8b b7       	in	r24, 0x3b	; 59
    1814:	8f 7d       	andi	r24, 0xDF	; 223
    1816:	8b bf       	out	0x3b, r24	; 59
    1818:	08 95       	ret

0000181a <EXTI_SetCallBackInt0>:
	}
	
}
void EXTI_SetCallBackInt0 (void (*PtrToFunc) (void))
{
	if( PtrToFunc!=NULL )
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	21 f0       	breq	.+8      	; 0x1826 <EXTI_SetCallBackInt0+0xc>
	{
		PRIVATE_PtrCallBackInt0=PtrToFunc;
    181e:	90 93 00 01 	sts	0x0100, r25
    1822:	80 93 ff 00 	sts	0x00FF, r24
    1826:	08 95       	ret

00001828 <EXTI_SetCallBackInt1>:
	}
}
void EXTI_SetCallBackInt1 (void (*PtrToFunc) (void))
{
	if( PtrToFunc!=NULL )
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	21 f0       	breq	.+8      	; 0x1834 <EXTI_SetCallBackInt1+0xc>
	{
		PRIVATE_PtrCallBackInt1=PtrToFunc;
    182c:	90 93 02 01 	sts	0x0102, r25
    1830:	80 93 01 01 	sts	0x0101, r24
    1834:	08 95       	ret

00001836 <EXTI_SetCallBackInt2>:
	}
}
void EXTI_SetCallBackInt2 (void (*PtrToFunc) (void))
{
	if( PtrToFunc!=NULL )
    1836:	00 97       	sbiw	r24, 0x00	; 0
    1838:	21 f0       	breq	.+8      	; 0x1842 <EXTI_SetCallBackInt2+0xc>
	{
		PRIVATE_PtrCallBackInt2=PtrToFunc;
    183a:	90 93 04 01 	sts	0x0104, r25
    183e:	80 93 03 01 	sts	0x0103, r24
    1842:	08 95       	ret

00001844 <__vector_1>:
}


void  __vector_1(void) __attribute__((signal)); 
void  __vector_1(void)
{
    1844:	1f 92       	push	r1
    1846:	0f 92       	push	r0
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	0f 92       	push	r0
    184c:	11 24       	eor	r1, r1
    184e:	2f 93       	push	r18
    1850:	3f 93       	push	r19
    1852:	4f 93       	push	r20
    1854:	5f 93       	push	r21
    1856:	6f 93       	push	r22
    1858:	7f 93       	push	r23
    185a:	8f 93       	push	r24
    185c:	9f 93       	push	r25
    185e:	af 93       	push	r26
    1860:	bf 93       	push	r27
    1862:	ef 93       	push	r30
    1864:	ff 93       	push	r31
	if (PRIVATE_PtrCallBackInt0 != NULL)
    1866:	e0 91 ff 00 	lds	r30, 0x00FF
    186a:	f0 91 00 01 	lds	r31, 0x0100
    186e:	30 97       	sbiw	r30, 0x00	; 0
    1870:	09 f0       	breq	.+2      	; 0x1874 <__vector_1+0x30>
	{
		PRIVATE_PtrCallBackInt0();
    1872:	09 95       	icall
	}
}
    1874:	ff 91       	pop	r31
    1876:	ef 91       	pop	r30
    1878:	bf 91       	pop	r27
    187a:	af 91       	pop	r26
    187c:	9f 91       	pop	r25
    187e:	8f 91       	pop	r24
    1880:	7f 91       	pop	r23
    1882:	6f 91       	pop	r22
    1884:	5f 91       	pop	r21
    1886:	4f 91       	pop	r20
    1888:	3f 91       	pop	r19
    188a:	2f 91       	pop	r18
    188c:	0f 90       	pop	r0
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	0f 90       	pop	r0
    1892:	1f 90       	pop	r1
    1894:	18 95       	reti

00001896 <__vector_3>:



void  __vector_3(void) __attribute__((signal)); 
void  __vector_3(void)
{
    1896:	1f 92       	push	r1
    1898:	0f 92       	push	r0
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	0f 92       	push	r0
    189e:	11 24       	eor	r1, r1
    18a0:	2f 93       	push	r18
    18a2:	3f 93       	push	r19
    18a4:	4f 93       	push	r20
    18a6:	5f 93       	push	r21
    18a8:	6f 93       	push	r22
    18aa:	7f 93       	push	r23
    18ac:	8f 93       	push	r24
    18ae:	9f 93       	push	r25
    18b0:	af 93       	push	r26
    18b2:	bf 93       	push	r27
    18b4:	ef 93       	push	r30
    18b6:	ff 93       	push	r31
	if (PRIVATE_PtrCallBackInt2 != NULL)
    18b8:	e0 91 03 01 	lds	r30, 0x0103
    18bc:	f0 91 04 01 	lds	r31, 0x0104
    18c0:	30 97       	sbiw	r30, 0x00	; 0
    18c2:	09 f0       	breq	.+2      	; 0x18c6 <__vector_3+0x30>
	{
		PRIVATE_PtrCallBackInt2();
    18c4:	09 95       	icall
	}
    18c6:	ff 91       	pop	r31
    18c8:	ef 91       	pop	r30
    18ca:	bf 91       	pop	r27
    18cc:	af 91       	pop	r26
    18ce:	9f 91       	pop	r25
    18d0:	8f 91       	pop	r24
    18d2:	7f 91       	pop	r23
    18d4:	6f 91       	pop	r22
    18d6:	5f 91       	pop	r21
    18d8:	4f 91       	pop	r20
    18da:	3f 91       	pop	r19
    18dc:	2f 91       	pop	r18
    18de:	0f 90       	pop	r0
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	0f 90       	pop	r0
    18e4:	1f 90       	pop	r1
    18e6:	18 95       	reti

000018e8 <GLBI_Enable>:
#include "../include/GLBI_interfase.h"
#include "../include/GLBI_private.h"
 
 void GLBI_Enable()
 {
	 SET_BIT(SREG,I);
    18e8:	8f b7       	in	r24, 0x3f	; 63
    18ea:	80 68       	ori	r24, 0x80	; 128
    18ec:	8f bf       	out	0x3f, r24	; 63
    18ee:	08 95       	ret

000018f0 <TMR0_init>:
void TMR0_init(void)
{
#if TIMER0_MODE == TIMER0_NormalMode
	
	/*Select mode = Normal Mode  */
	CLR_BIT(TCCR0,WGM00);
    18f0:	83 b7       	in	r24, 0x33	; 51
    18f2:	8f 7b       	andi	r24, 0xBF	; 191
    18f4:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,WGM01);
    18f6:	83 b7       	in	r24, 0x33	; 51
    18f8:	87 7f       	andi	r24, 0xF7	; 247
    18fa:	83 bf       	out	0x33, r24	; 51
	
	/* preload value */
	TCNT0 = TMR0_PreloadValue;
    18fc:	12 be       	out	0x32, r1	; 50
	
	/*enable OVf */
	SET_BIT(TIMSK,TOIE0);
    18fe:	89 b7       	in	r24, 0x39	; 57
    1900:	81 60       	ori	r24, 0x01	; 1
    1902:	89 bf       	out	0x39, r24	; 57
	SET_BIT(TCCR0,COM00);
	SET_BIT(TCCR0,COM01);
    #endif

#endif
}
    1904:	08 95       	ret

00001906 <TMR0_Start>:

void TMR0_Start(void)
{
#if TIMER0_Prescaller==TIMER0_Prescaller_1
	SET_BIT(TCCR0,CS00);
    1906:	83 b7       	in	r24, 0x33	; 51
    1908:	81 60       	ori	r24, 0x01	; 1
    190a:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
    190c:	83 b7       	in	r24, 0x33	; 51
    190e:	8d 7f       	andi	r24, 0xFD	; 253
    1910:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS02);
    1912:	83 b7       	in	r24, 0x33	; 51
    1914:	8b 7f       	andi	r24, 0xFB	; 251
    1916:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS00);
	CLR_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS02);

#endif
}
    1918:	08 95       	ret

0000191a <TMR0_Stop>:

void TMR0_Stop(void)
{
	/*	Prescaller = 0	*/
	CLR_BIT(TCCR0,CS00);
    191a:	83 b7       	in	r24, 0x33	; 51
    191c:	8e 7f       	andi	r24, 0xFE	; 254
    191e:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
    1920:	83 b7       	in	r24, 0x33	; 51
    1922:	8d 7f       	andi	r24, 0xFD	; 253
    1924:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS02);
    1926:	83 b7       	in	r24, 0x33	; 51
    1928:	8b 7f       	andi	r24, 0xFB	; 251
    192a:	83 bf       	out	0x33, r24	; 51
}
    192c:	08 95       	ret

0000192e <TMR0_SetDelay_ms_UsingCTC>:
// }

void TMR0_SetDelay_ms_UsingCTC(u16 Delay_ms)
{
	//	Under Condition Tick Time = 4MS   -> Prescaller 64
	OCR0 = 249 ;
    192e:	29 ef       	ldi	r18, 0xF9	; 249
    1930:	2c bf       	out	0x3c, r18	; 60
	Private_CTC_Counter=Delay_ms;
    1932:	90 93 06 01 	sts	0x0106, r25
    1936:	80 93 05 01 	sts	0x0105, r24
}
    193a:	08 95       	ret

0000193c <TMR0_SetCompareMatchValue_FastPWM_NonInverting>:

void TMR0_SetCompareMatchValue_FastPWM_NonInverting(f32 DutyCycle)
{
	#if FastPWM_Mode == FastPWM_NonInverting_Mode
	/* non inverting */
	OCR0=((DutyCycle/100)*256)-1;          //TAKE CARE OVERFLOW 
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	48 ec       	ldi	r20, 0xC8	; 200
    1942:	52 e4       	ldi	r21, 0x42	; 66
    1944:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__divsf3>
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	40 e8       	ldi	r20, 0x80	; 128
    194e:	53 e4       	ldi	r21, 0x43	; 67
    1950:	0e 94 bd 10 	call	0x217a	; 0x217a <__mulsf3>
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	40 e8       	ldi	r20, 0x80	; 128
    195a:	5f e3       	ldi	r21, 0x3F	; 63
    195c:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__subsf3>
    1960:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__fixunssfsi>
    1964:	6c bf       	out	0x3c, r22	; 60
	#elif FastPWM_Mode == FastPWM_Inverting_Mode
	/*  inverting */
	OCR0=((DutyCycle/100)*256)-1;          //TAKE CARE OVERFLOW 
	#endif
}
    1966:	08 95       	ret

00001968 <TMR0_SetCallBackOverFlow>:

void TMR0_SetCallBackOverFlow (void (*PtrToFunc) (void))
{
	if( PtrToFunc!=NULL )
    1968:	00 97       	sbiw	r24, 0x00	; 0
    196a:	21 f0       	breq	.+8      	; 0x1974 <TMR0_SetCallBackOverFlow+0xc>
	{
		PRIVATE_PtrCallBackOverFlowFlag=PtrToFunc;
    196c:	90 93 08 01 	sts	0x0108, r25
    1970:	80 93 07 01 	sts	0x0107, r24
    1974:	08 95       	ret

00001976 <TMR0_SetCallBackCTC>:
	}
}

void TMR0_SetCallBackCTC(void (*PtrToFunc)(void))
{
	if( PtrToFunc!=NULL )
    1976:	00 97       	sbiw	r24, 0x00	; 0
    1978:	21 f0       	breq	.+8      	; 0x1982 <TMR0_SetCallBackCTC+0xc>
	{
		PRIVATE_PtrCallBackCTC=PtrToFunc;
    197a:	90 93 0a 01 	sts	0x010A, r25
    197e:	80 93 09 01 	sts	0x0109, r24
    1982:	08 95       	ret

00001984 <__vector_10>:



void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    1984:	1f 92       	push	r1
    1986:	0f 92       	push	r0
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	0f 92       	push	r0
    198c:	11 24       	eor	r1, r1
    198e:	2f 93       	push	r18
    1990:	3f 93       	push	r19
    1992:	4f 93       	push	r20
    1994:	5f 93       	push	r21
    1996:	6f 93       	push	r22
    1998:	7f 93       	push	r23
    199a:	8f 93       	push	r24
    199c:	9f 93       	push	r25
    199e:	af 93       	push	r26
    19a0:	bf 93       	push	r27
    19a2:	ef 93       	push	r30
    19a4:	ff 93       	push	r31
	static u16 CTC_Counter =0;
	CTC_Counter++;
    19a6:	80 91 0b 01 	lds	r24, 0x010B
    19aa:	90 91 0c 01 	lds	r25, 0x010C
    19ae:	01 96       	adiw	r24, 0x01	; 1
    19b0:	90 93 0c 01 	sts	0x010C, r25
    19b4:	80 93 0b 01 	sts	0x010B, r24
	
	if( Private_CTC_Counter == CTC_Counter)
    19b8:	20 91 05 01 	lds	r18, 0x0105
    19bc:	30 91 06 01 	lds	r19, 0x0106
    19c0:	82 17       	cp	r24, r18
    19c2:	93 07       	cpc	r25, r19
    19c4:	59 f4       	brne	.+22     	; 0x19dc <__vector_10+0x58>
	{
		CTC_Counter = 0;
    19c6:	10 92 0c 01 	sts	0x010C, r1
    19ca:	10 92 0b 01 	sts	0x010B, r1
		if (PRIVATE_PtrCallBackCTC != NULL)
    19ce:	e0 91 09 01 	lds	r30, 0x0109
    19d2:	f0 91 0a 01 	lds	r31, 0x010A
    19d6:	30 97       	sbiw	r30, 0x00	; 0
    19d8:	09 f0       	breq	.+2      	; 0x19dc <__vector_10+0x58>
		{
			PRIVATE_PtrCallBackCTC();
    19da:	09 95       	icall
		}
	}
	
}
    19dc:	ff 91       	pop	r31
    19de:	ef 91       	pop	r30
    19e0:	bf 91       	pop	r27
    19e2:	af 91       	pop	r26
    19e4:	9f 91       	pop	r25
    19e6:	8f 91       	pop	r24
    19e8:	7f 91       	pop	r23
    19ea:	6f 91       	pop	r22
    19ec:	5f 91       	pop	r21
    19ee:	4f 91       	pop	r20
    19f0:	3f 91       	pop	r19
    19f2:	2f 91       	pop	r18
    19f4:	0f 90       	pop	r0
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	0f 90       	pop	r0
    19fa:	1f 90       	pop	r1
    19fc:	18 95       	reti

000019fe <TMR1_init>:


void TMR1_init(void)
{
	/*Select Mode : mode 14  */
	CLR_BIT(TCCR1A,WGM10);
    19fe:	8f b5       	in	r24, 0x2f	; 47
    1a00:	8e 7f       	andi	r24, 0xFE	; 254
    1a02:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,WGM11);
    1a04:	8f b5       	in	r24, 0x2f	; 47
    1a06:	82 60       	ori	r24, 0x02	; 2
    1a08:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B,WGM12);
    1a0a:	8e b5       	in	r24, 0x2e	; 46
    1a0c:	88 60       	ori	r24, 0x08	; 8
    1a0e:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,WGM13);
    1a10:	8e b5       	in	r24, 0x2e	; 46
    1a12:	80 61       	ori	r24, 0x10	; 16
    1a14:	8e bd       	out	0x2e, r24	; 46
	
	CLR_BIT(TCCR1A,COM1A0);
    1a16:	8f b5       	in	r24, 0x2f	; 47
    1a18:	8f 7b       	andi	r24, 0xBF	; 191
    1a1a:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,COM1A1);
    1a1c:	8f b5       	in	r24, 0x2f	; 47
    1a1e:	80 68       	ori	r24, 0x80	; 128
    1a20:	8f bd       	out	0x2f, r24	; 47
	
	CLR_BIT(TCCR1A,COM1B0);
    1a22:	8f b5       	in	r24, 0x2f	; 47
    1a24:	8f 7e       	andi	r24, 0xEF	; 239
    1a26:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,COM1B1);
    1a28:	8f b5       	in	r24, 0x2f	; 47
    1a2a:	80 62       	ori	r24, 0x20	; 32
    1a2c:	8f bd       	out	0x2f, r24	; 47
}
    1a2e:	08 95       	ret

00001a30 <TMR1_Start>:

void TMR1_Start(void)
{
	/*select prescaler : 64*/
	
	SET_BIT(TCCR1B,CS10);
    1a30:	8e b5       	in	r24, 0x2e	; 46
    1a32:	81 60       	ori	r24, 0x01	; 1
    1a34:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,CS11);
    1a36:	8e b5       	in	r24, 0x2e	; 46
    1a38:	82 60       	ori	r24, 0x02	; 2
    1a3a:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,CS12);
    1a3c:	8e b5       	in	r24, 0x2e	; 46
    1a3e:	8b 7f       	andi	r24, 0xFB	; 251
    1a40:	8e bd       	out	0x2e, r24	; 46
}
    1a42:	08 95       	ret

00001a44 <TMR1_Stop>:


void TMR1_Stop(void)
{
	CLR_BIT(TCCR1B,CS10);
    1a44:	8e b5       	in	r24, 0x2e	; 46
    1a46:	8e 7f       	andi	r24, 0xFE	; 254
    1a48:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,CS11);
    1a4a:	8e b5       	in	r24, 0x2e	; 46
    1a4c:	8d 7f       	andi	r24, 0xFD	; 253
    1a4e:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,CS12);
    1a50:	8e b5       	in	r24, 0x2e	; 46
    1a52:	8b 7f       	andi	r24, 0xFB	; 251
    1a54:	8e bd       	out	0x2e, r24	; 46
}
    1a56:	08 95       	ret

00001a58 <TMR1_SetDutyCycle_And_Freq_Value>:


void TMR1_SetDutyCycle_And_Freq_Value(u16 Freq ,f32 Duty)
{
    1a58:	cf 92       	push	r12
    1a5a:	df 92       	push	r13
    1a5c:	ef 92       	push	r14
    1a5e:	ff 92       	push	r15
    1a60:	cf 93       	push	r28
    1a62:	df 93       	push	r29
    1a64:	ec 01       	movw	r28, r24
    1a66:	6a 01       	movw	r12, r20
    1a68:	7b 01       	movw	r14, r22
	// 	OCR1BL=Duty;
	if(Duty<=100)
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	ba 01       	movw	r22, r20
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	48 ec       	ldi	r20, 0xC8	; 200
    1a74:	52 e4       	ldi	r21, 0x42	; 66
    1a76:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__cmpsf2>
    1a7a:	18 16       	cp	r1, r24
    1a7c:	5c f1       	brlt	.+86     	; 0x1ad4 <TMR1_SetDutyCycle_And_Freq_Value+0x7c>
	{
		ICR1L =((1000000UL/Freq)/4)-1;
    1a7e:	9e 01       	movw	r18, r28
    1a80:	40 e0       	ldi	r20, 0x00	; 0
    1a82:	50 e0       	ldi	r21, 0x00	; 0
    1a84:	60 e9       	ldi	r22, 0x90	; 144
    1a86:	70 ed       	ldi	r23, 0xD0	; 208
    1a88:	83 e0       	ldi	r24, 0x03	; 3
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__udivmodsi4>
    1a90:	21 50       	subi	r18, 0x01	; 1
    1a92:	30 40       	sbci	r19, 0x00	; 0
    1a94:	37 bd       	out	0x27, r19	; 39
    1a96:	26 bd       	out	0x26, r18	; 38
		OCR1AL=((Duty*(ICR1L+1))/100.0)-1;
    1a98:	66 b5       	in	r22, 0x26	; 38
    1a9a:	77 b5       	in	r23, 0x27	; 39
    1a9c:	6f 5f       	subi	r22, 0xFF	; 255
    1a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	0e 94 07 10 	call	0x200e	; 0x200e <__floatunsisf>
    1aa8:	a7 01       	movw	r20, r14
    1aaa:	96 01       	movw	r18, r12
    1aac:	0e 94 bd 10 	call	0x217a	; 0x217a <__mulsf3>
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	48 ec       	ldi	r20, 0xC8	; 200
    1ab6:	52 e4       	ldi	r21, 0x42	; 66
    1ab8:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__divsf3>
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	40 e8       	ldi	r20, 0x80	; 128
    1ac2:	5f e3       	ldi	r21, 0x3F	; 63
    1ac4:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__subsf3>
    1ac8:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__fixunssfsi>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	9b bd       	out	0x2b, r25	; 43
    1ad2:	8a bd       	out	0x2a, r24	; 42
	}
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	ff 90       	pop	r15
    1ada:	ef 90       	pop	r14
    1adc:	df 90       	pop	r13
    1ade:	cf 90       	pop	r12
    1ae0:	08 95       	ret

00001ae2 <TMR2_init>:
	#endif

	#elif TMR2_MODE == TMR2_PHASECORRECT_MODE
	
	/*Select mode = Phase Correct MODE */
	SET_BIT(TCCR2,WGM20);
    1ae2:	85 b5       	in	r24, 0x25	; 37
    1ae4:	80 64       	ori	r24, 0x40	; 64
    1ae6:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,WGM21); 
    1ae8:	85 b5       	in	r24, 0x25	; 37
    1aea:	87 7f       	andi	r24, 0xF7	; 247
    1aec:	85 bd       	out	0x25, r24	; 37
	/* non inverting */
	CLR_BIT(TCCR2,COM20);
	SET_BIT(TCCR2,COM21);
	#elif TMR2_SelectFastPWM_Mode == TMR2_FastPWM_Inverting_Mode
	/*  inverting */
	SET_BIT(TCCR2,COM20);
    1aee:	85 b5       	in	r24, 0x25	; 37
    1af0:	80 61       	ori	r24, 0x10	; 16
    1af2:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,COM21);
    1af4:	85 b5       	in	r24, 0x25	; 37
    1af6:	80 62       	ori	r24, 0x20	; 32
    1af8:	85 bd       	out	0x25, r24	; 37
	#endif

	#endif
	
}
    1afa:	08 95       	ret

00001afc <TMR2_Start>:
	SET_BIT(TCCR2,CS20);
	SET_BIT(TCCR2,CS21);
	CLR_BIT(TCCR2,CS22);
	
#elif TMR2_PRESCALLER == TMR2_PRESCALLER_64
	CLR_BIT(TCCR2,CS20);
    1afc:	85 b5       	in	r24, 0x25	; 37
    1afe:	8e 7f       	andi	r24, 0xFE	; 254
    1b00:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,CS21);
    1b02:	85 b5       	in	r24, 0x25	; 37
    1b04:	8d 7f       	andi	r24, 0xFD	; 253
    1b06:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS22);
    1b08:	85 b5       	in	r24, 0x25	; 37
    1b0a:	84 60       	ori	r24, 0x04	; 4
    1b0c:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS20);
	SET_BIT(TCCR2,CS21);
	SET_BIT(TCCR2,CS22);
	
#endif	
}
    1b0e:	08 95       	ret

00001b10 <TMR2_Stop>:

void TMR2_Stop()
{
	CLR_BIT(TCCR2,CS20);
    1b10:	85 b5       	in	r24, 0x25	; 37
    1b12:	8e 7f       	andi	r24, 0xFE	; 254
    1b14:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,CS21);
    1b16:	85 b5       	in	r24, 0x25	; 37
    1b18:	8d 7f       	andi	r24, 0xFD	; 253
    1b1a:	85 bd       	out	0x25, r24	; 37
    CLR_BIT(TCCR2,CS22);
    1b1c:	85 b5       	in	r24, 0x25	; 37
    1b1e:	8b 7f       	andi	r24, 0xFB	; 251
    1b20:	85 bd       	out	0x25, r24	; 37
}	
    1b22:	08 95       	ret

00001b24 <TMR2_SetDelay_ms_UsingCTC>:

void TMR2_SetDelay_ms_UsingCTC(u16 Delay_ms)
{
	//	Under Condition Tick Time = 4MS   -> Prescaller 64
	
	OCR2 = 249 ;
    1b24:	29 ef       	ldi	r18, 0xF9	; 249
    1b26:	23 bd       	out	0x23, r18	; 35
	Private_CTC_Counter=Delay_ms;
    1b28:	90 93 0e 01 	sts	0x010E, r25
    1b2c:	80 93 0d 01 	sts	0x010D, r24
}
    1b30:	08 95       	ret

00001b32 <TMR2_SetDutyCycleValue_FastPWM>:
	#if TMR2_SelectFastPWM_Mode == TMR2_FastPWM_NonInverting_Mode
	/* non inverting */
	OCR2=((DutyCycle/100)*256)-1;          //TAKE CARE OVERFLOW
	#elif TMR2_SelectFastPWM_Mode == TMR2_FastPWM_Inverting_Mode
	/*  inverting */
	OCR2=(255-(256*(DutyCycle/100)));          //TAKE CARE OVERFLOW
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	48 ec       	ldi	r20, 0xC8	; 200
    1b38:	52 e4       	ldi	r21, 0x42	; 66
    1b3a:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__divsf3>
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e8       	ldi	r20, 0x80	; 128
    1b44:	53 e4       	ldi	r21, 0x43	; 67
    1b46:	0e 94 bd 10 	call	0x217a	; 0x217a <__mulsf3>
    1b4a:	9b 01       	movw	r18, r22
    1b4c:	ac 01       	movw	r20, r24
    1b4e:	60 e0       	ldi	r22, 0x00	; 0
    1b50:	70 e0       	ldi	r23, 0x00	; 0
    1b52:	8f e7       	ldi	r24, 0x7F	; 127
    1b54:	93 e4       	ldi	r25, 0x43	; 67
    1b56:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__subsf3>
    1b5a:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__fixunssfsi>
    1b5e:	63 bd       	out	0x23, r22	; 35
	#endif
}
    1b60:	08 95       	ret

00001b62 <TMR2_SetDutyCycleValue_PhaseCorrect>:
	#if TMR2_SelectPaseCorrect_Mode == TMR2_PaseCorrect_NonInverting_Mode
	/* non inverting */
	OCR2=((DutyCycle/100)*256);          //TAKE CARE OVERFLOW
	#elif TMR2_SelectPaseCorrect_Mode == TMR2_PaseCorrect_Inverting_Mode
	/*  inverting */
	OCR2=(256-(256*(DutyCycle/100)));          //TAKE CARE OVERFLOW
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	48 ec       	ldi	r20, 0xC8	; 200
    1b68:	52 e4       	ldi	r21, 0x42	; 66
    1b6a:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__divsf3>
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	40 e8       	ldi	r20, 0x80	; 128
    1b74:	53 e4       	ldi	r21, 0x43	; 67
    1b76:	0e 94 bd 10 	call	0x217a	; 0x217a <__mulsf3>
    1b7a:	9b 01       	movw	r18, r22
    1b7c:	ac 01       	movw	r20, r24
    1b7e:	60 e0       	ldi	r22, 0x00	; 0
    1b80:	70 e0       	ldi	r23, 0x00	; 0
    1b82:	80 e8       	ldi	r24, 0x80	; 128
    1b84:	93 e4       	ldi	r25, 0x43	; 67
    1b86:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__subsf3>
    1b8a:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__fixunssfsi>
    1b8e:	63 bd       	out	0x23, r22	; 35
	#endif
}
    1b90:	08 95       	ret

00001b92 <TMR2_SetCallBackOverFlow>:
void TMR2_SetCallBackOverFlow(void (*PtrToFunc)(void))
{
	if( PtrToFunc!=NULL )
    1b92:	00 97       	sbiw	r24, 0x00	; 0
    1b94:	21 f0       	breq	.+8      	; 0x1b9e <TMR2_SetCallBackOverFlow+0xc>
	{
		PRIVATE_PtrCallBackOverFlowFlag=PtrToFunc;
    1b96:	90 93 10 01 	sts	0x0110, r25
    1b9a:	80 93 0f 01 	sts	0x010F, r24
    1b9e:	08 95       	ret

00001ba0 <TMR2_SetCallBackCTC>:
	}
}

void TMR2_SetCallBackCTC(void (*PtrToFunc)(void))
{
	if( PtrToFunc!=NULL )
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	21 f0       	breq	.+8      	; 0x1bac <TMR2_SetCallBackCTC+0xc>
	{
		PRIVATE_PtrCallBackCTC=PtrToFunc;
    1ba4:	90 93 12 01 	sts	0x0112, r25
    1ba8:	80 93 11 01 	sts	0x0111, r24
    1bac:	08 95       	ret

00001bae <__vector_5>:
	}
}

void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
    1bae:	1f 92       	push	r1
    1bb0:	0f 92       	push	r0
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	0f 92       	push	r0
    1bb6:	11 24       	eor	r1, r1
    1bb8:	2f 93       	push	r18
    1bba:	3f 93       	push	r19
    1bbc:	4f 93       	push	r20
    1bbe:	5f 93       	push	r21
    1bc0:	6f 93       	push	r22
    1bc2:	7f 93       	push	r23
    1bc4:	8f 93       	push	r24
    1bc6:	9f 93       	push	r25
    1bc8:	af 93       	push	r26
    1bca:	bf 93       	push	r27
    1bcc:	ef 93       	push	r30
    1bce:	ff 93       	push	r31
	static u16 OverFlowCounter =0;
	OverFlowCounter++;
    1bd0:	80 91 13 01 	lds	r24, 0x0113
    1bd4:	90 91 14 01 	lds	r25, 0x0114
    1bd8:	01 96       	adiw	r24, 0x01	; 1
    1bda:	90 93 14 01 	sts	0x0114, r25
    1bde:	80 93 13 01 	sts	0x0113, r24
	
	if( TMR2_OverFlowCounter == OverFlowCounter)
    1be2:	23 e0       	ldi	r18, 0x03	; 3
    1be4:	81 3d       	cpi	r24, 0xD1	; 209
    1be6:	92 07       	cpc	r25, r18
    1be8:	69 f4       	brne	.+26     	; 0x1c04 <__vector_5+0x56>
	{
		OverFlowCounter = 0;
    1bea:	10 92 14 01 	sts	0x0114, r1
    1bee:	10 92 13 01 	sts	0x0113, r1
		TCNT2 = TMR2_PreloadValue;
    1bf2:	81 e7       	ldi	r24, 0x71	; 113
    1bf4:	84 bd       	out	0x24, r24	; 36
		if (PRIVATE_PtrCallBackOverFlowFlag != NULL)
    1bf6:	e0 91 0f 01 	lds	r30, 0x010F
    1bfa:	f0 91 10 01 	lds	r31, 0x0110
    1bfe:	30 97       	sbiw	r30, 0x00	; 0
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <__vector_5+0x56>
		{
			PRIVATE_PtrCallBackOverFlowFlag();
    1c02:	09 95       	icall
		}
	}
	
}
    1c04:	ff 91       	pop	r31
    1c06:	ef 91       	pop	r30
    1c08:	bf 91       	pop	r27
    1c0a:	af 91       	pop	r26
    1c0c:	9f 91       	pop	r25
    1c0e:	8f 91       	pop	r24
    1c10:	7f 91       	pop	r23
    1c12:	6f 91       	pop	r22
    1c14:	5f 91       	pop	r21
    1c16:	4f 91       	pop	r20
    1c18:	3f 91       	pop	r19
    1c1a:	2f 91       	pop	r18
    1c1c:	0f 90       	pop	r0
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	0f 90       	pop	r0
    1c22:	1f 90       	pop	r1
    1c24:	18 95       	reti

00001c26 <__vector_4>:

void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
    1c26:	1f 92       	push	r1
    1c28:	0f 92       	push	r0
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	0f 92       	push	r0
    1c2e:	11 24       	eor	r1, r1
    1c30:	2f 93       	push	r18
    1c32:	3f 93       	push	r19
    1c34:	4f 93       	push	r20
    1c36:	5f 93       	push	r21
    1c38:	6f 93       	push	r22
    1c3a:	7f 93       	push	r23
    1c3c:	8f 93       	push	r24
    1c3e:	9f 93       	push	r25
    1c40:	af 93       	push	r26
    1c42:	bf 93       	push	r27
    1c44:	ef 93       	push	r30
    1c46:	ff 93       	push	r31
	static u16 CTC_Counter =0;
	CTC_Counter++;
    1c48:	80 91 15 01 	lds	r24, 0x0115
    1c4c:	90 91 16 01 	lds	r25, 0x0116
    1c50:	01 96       	adiw	r24, 0x01	; 1
    1c52:	90 93 16 01 	sts	0x0116, r25
    1c56:	80 93 15 01 	sts	0x0115, r24
	
	if( Private_CTC_Counter == CTC_Counter)
    1c5a:	20 91 0d 01 	lds	r18, 0x010D
    1c5e:	30 91 0e 01 	lds	r19, 0x010E
    1c62:	82 17       	cp	r24, r18
    1c64:	93 07       	cpc	r25, r19
    1c66:	59 f4       	brne	.+22     	; 0x1c7e <__vector_4+0x58>
	{
		CTC_Counter = 0;
    1c68:	10 92 16 01 	sts	0x0116, r1
    1c6c:	10 92 15 01 	sts	0x0115, r1
		if (PRIVATE_PtrCallBackCTC != NULL)
    1c70:	e0 91 11 01 	lds	r30, 0x0111
    1c74:	f0 91 12 01 	lds	r31, 0x0112
    1c78:	30 97       	sbiw	r30, 0x00	; 0
    1c7a:	09 f0       	breq	.+2      	; 0x1c7e <__vector_4+0x58>
		{
			PRIVATE_PtrCallBackCTC();
    1c7c:	09 95       	icall
		}
	}
    1c7e:	ff 91       	pop	r31
    1c80:	ef 91       	pop	r30
    1c82:	bf 91       	pop	r27
    1c84:	af 91       	pop	r26
    1c86:	9f 91       	pop	r25
    1c88:	8f 91       	pop	r24
    1c8a:	7f 91       	pop	r23
    1c8c:	6f 91       	pop	r22
    1c8e:	5f 91       	pop	r21
    1c90:	4f 91       	pop	r20
    1c92:	3f 91       	pop	r19
    1c94:	2f 91       	pop	r18
    1c96:	0f 90       	pop	r0
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	0f 90       	pop	r0
    1c9c:	1f 90       	pop	r1
    1c9e:	18 95       	reti

00001ca0 <UART_init>:

#define UART_UBBR_VALUE (((F_CPU)/(UART_SelectedBoudRate*16UL))-1)

void UART_init (void)
{
	CLR_BIT(UCSRB,UCSZ2);
    1ca0:	52 98       	cbi	0x0a, 2	; 10
	CLR_BIT(UCSRC_Value,UPM0);
	CLR_BIT(UCSRC_Value,UPM1);
	CLR_BIT(UCSRC_Value,UMSEL);
	SET_BIT(UCSRC_Value,URSEL);
	
	UCSRC=UCSRC_Value;      // Set UART Mode: 8-bit data, 1 stop bit, no parity (0x86)
    1ca2:	86 e8       	ldi	r24, 0x86	; 134
    1ca4:	80 bd       	out	0x20, r24	; 32
	
	UBRRL=UART_UBBR_VALUE;     // Set baud rate = 9600 -> 103;
    1ca6:	87 e6       	ldi	r24, 0x67	; 103
    1ca8:	89 b9       	out	0x09, r24	; 9
    UBRRH = (UART_UBBR_VALUE >> 8);
    1caa:	10 bc       	out	0x20, r1	; 32
	
	CLR_BIT(UCSRA,U2X);   // Stop double speed
    1cac:	59 98       	cbi	0x0b, 1	; 11
	
	
	SET_BIT(UCSRB,RXCIE);  // Enable Rx Interrupt 
    1cae:	57 9a       	sbi	0x0a, 7	; 10
	SET_BIT(UCSRB,TXCIE);  // Enable Tx Interrupt 
    1cb0:	56 9a       	sbi	0x0a, 6	; 10
	SET_BIT(UCSRB,UDRIE);  // Enable UDR Interrupt 
    1cb2:	55 9a       	sbi	0x0a, 5	; 10
	
	SET_BIT(UCSRB,TXEN);  // Enable Tx
    1cb4:	53 9a       	sbi	0x0a, 3	; 10
	SET_BIT(UCSRB,RXEN);  // Enable Rx
    1cb6:	54 9a       	sbi	0x0a, 4	; 10
}
    1cb8:	08 95       	ret

00001cba <UART_ReceiveChar>:

void UART_ReceiveChar (u8* ReceiveData)
{
	if(ReceiveData!=NULL)
    1cba:	00 97       	sbiw	r24, 0x00	; 0
    1cbc:	29 f0       	breq	.+10     	; 0x1cc8 <UART_ReceiveChar+0xe>
	{
		while(0 == GET_BIT(UCSRA,RXC));
    1cbe:	5f 9b       	sbis	0x0b, 7	; 11
    1cc0:	fe cf       	rjmp	.-4      	; 0x1cbe <UART_ReceiveChar+0x4>
		*ReceiveData=UDR;
    1cc2:	2c b1       	in	r18, 0x0c	; 12
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	20 83       	st	Z, r18
    1cc8:	08 95       	ret

00001cca <UART_TransmiteChar>:



void UART_TransmiteChar(u8 TransmiteData)
{
	UDR=TransmiteData;
    1cca:	8c b9       	out	0x0c, r24	; 12
	while(0 == GET_BIT(UCSRA,UDRE));
    1ccc:	8b b1       	in	r24, 0x0b	; 11
    1cce:	85 ff       	sbrs	r24, 5
    1cd0:	fd cf       	rjmp	.-6      	; 0x1ccc <UART_TransmiteChar+0x2>
}
    1cd2:	08 95       	ret

00001cd4 <UART_TransmiteString>:

void UART_TransmiteString(u8 *TransmiteData)
{
    1cd4:	0f 93       	push	r16
    1cd6:	1f 93       	push	r17
    1cd8:	cf 93       	push	r28
    1cda:	8c 01       	movw	r16, r24
	u8 Index=0;

	while (TransmiteData[Index]!='\0')		/* Send string till null */
    1cdc:	fc 01       	movw	r30, r24
    1cde:	80 81       	ld	r24, Z
    1ce0:	88 23       	and	r24, r24
    1ce2:	51 f0       	breq	.+20     	; 0x1cf8 <UART_TransmiteString+0x24>
	while(0 == GET_BIT(UCSRA,UDRE));
}

void UART_TransmiteString(u8 *TransmiteData)
{
	u8 Index=0;
    1ce4:	c0 e0       	ldi	r28, 0x00	; 0

	while (TransmiteData[Index]!='\0')		/* Send string till null */
	{
		UART_TransmiteChar(TransmiteData[Index]);
    1ce6:	0e 94 65 0e 	call	0x1cca	; 0x1cca <UART_TransmiteChar>
		Index++;
    1cea:	cf 5f       	subi	r28, 0xFF	; 255

void UART_TransmiteString(u8 *TransmiteData)
{
	u8 Index=0;

	while (TransmiteData[Index]!='\0')		/* Send string till null */
    1cec:	f8 01       	movw	r30, r16
    1cee:	ec 0f       	add	r30, r28
    1cf0:	f1 1d       	adc	r31, r1
    1cf2:	80 81       	ld	r24, Z
    1cf4:	88 23       	and	r24, r24
    1cf6:	b9 f7       	brne	.-18     	; 0x1ce6 <UART_TransmiteString+0x12>
	{
		UART_TransmiteChar(TransmiteData[Index]);
		Index++;
	}
}
    1cf8:	cf 91       	pop	r28
    1cfa:	1f 91       	pop	r17
    1cfc:	0f 91       	pop	r16
    1cfe:	08 95       	ret

00001d00 <UART_CallBack_RXC>:

void UART_CallBack_RXC (void(*PtrFunction)(void))
{
	Private_UART_CallBack_RXC=PtrFunction;
    1d00:	90 93 18 01 	sts	0x0118, r25
    1d04:	80 93 17 01 	sts	0x0117, r24
}
    1d08:	08 95       	ret

00001d0a <UART_CallBack_UDRE>:

void UART_CallBack_UDRE(void(*PtrFunction)(void))
{
	Private_UART_CallBack_UDRE=PtrFunction;
    1d0a:	90 93 1a 01 	sts	0x011A, r25
    1d0e:	80 93 19 01 	sts	0x0119, r24
}
    1d12:	08 95       	ret

00001d14 <UART_CallBack_TXC>:

void UART_CallBack_TXC(void(*PtrFunction)(void))
{
	Private_UART_CallBack_TXC=PtrFunction;
    1d14:	90 93 1c 01 	sts	0x011C, r25
    1d18:	80 93 1b 01 	sts	0x011B, r24
}
    1d1c:	08 95       	ret

00001d1e <__vector_13>:


// Receive Complete Interrupt Request
void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    1d1e:	1f 92       	push	r1
    1d20:	0f 92       	push	r0
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	0f 92       	push	r0
    1d26:	11 24       	eor	r1, r1
    1d28:	2f 93       	push	r18
    1d2a:	3f 93       	push	r19
    1d2c:	4f 93       	push	r20
    1d2e:	5f 93       	push	r21
    1d30:	6f 93       	push	r22
    1d32:	7f 93       	push	r23
    1d34:	8f 93       	push	r24
    1d36:	9f 93       	push	r25
    1d38:	af 93       	push	r26
    1d3a:	bf 93       	push	r27
    1d3c:	ef 93       	push	r30
    1d3e:	ff 93       	push	r31
	if (Private_UART_CallBack_RXC!=NULL)
    1d40:	e0 91 17 01 	lds	r30, 0x0117
    1d44:	f0 91 18 01 	lds	r31, 0x0118
    1d48:	30 97       	sbiw	r30, 0x00	; 0
    1d4a:	09 f0       	breq	.+2      	; 0x1d4e <__vector_13+0x30>
	{
		Private_UART_CallBack_RXC();
    1d4c:	09 95       	icall
	}
}
    1d4e:	ff 91       	pop	r31
    1d50:	ef 91       	pop	r30
    1d52:	bf 91       	pop	r27
    1d54:	af 91       	pop	r26
    1d56:	9f 91       	pop	r25
    1d58:	8f 91       	pop	r24
    1d5a:	7f 91       	pop	r23
    1d5c:	6f 91       	pop	r22
    1d5e:	5f 91       	pop	r21
    1d60:	4f 91       	pop	r20
    1d62:	3f 91       	pop	r19
    1d64:	2f 91       	pop	r18
    1d66:	0f 90       	pop	r0
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	0f 90       	pop	r0
    1d6c:	1f 90       	pop	r1
    1d6e:	18 95       	reti

00001d70 <__vector_14>:

// Data Register Empty Interrupt Request
void __vector_14(void) __attribute__((signal));
void __vector_14()
{
    1d70:	1f 92       	push	r1
    1d72:	0f 92       	push	r0
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	0f 92       	push	r0
    1d78:	11 24       	eor	r1, r1
    1d7a:	2f 93       	push	r18
    1d7c:	3f 93       	push	r19
    1d7e:	4f 93       	push	r20
    1d80:	5f 93       	push	r21
    1d82:	6f 93       	push	r22
    1d84:	7f 93       	push	r23
    1d86:	8f 93       	push	r24
    1d88:	9f 93       	push	r25
    1d8a:	af 93       	push	r26
    1d8c:	bf 93       	push	r27
    1d8e:	ef 93       	push	r30
    1d90:	ff 93       	push	r31
	if (Private_UART_CallBack_UDRE!=NULL)
    1d92:	e0 91 19 01 	lds	r30, 0x0119
    1d96:	f0 91 1a 01 	lds	r31, 0x011A
    1d9a:	30 97       	sbiw	r30, 0x00	; 0
    1d9c:	09 f0       	breq	.+2      	; 0x1da0 <__vector_14+0x30>
	{
		Private_UART_CallBack_UDRE();
    1d9e:	09 95       	icall
	} 
}
    1da0:	ff 91       	pop	r31
    1da2:	ef 91       	pop	r30
    1da4:	bf 91       	pop	r27
    1da6:	af 91       	pop	r26
    1da8:	9f 91       	pop	r25
    1daa:	8f 91       	pop	r24
    1dac:	7f 91       	pop	r23
    1dae:	6f 91       	pop	r22
    1db0:	5f 91       	pop	r21
    1db2:	4f 91       	pop	r20
    1db4:	3f 91       	pop	r19
    1db6:	2f 91       	pop	r18
    1db8:	0f 90       	pop	r0
    1dba:	0f be       	out	0x3f, r0	; 63
    1dbc:	0f 90       	pop	r0
    1dbe:	1f 90       	pop	r1
    1dc0:	18 95       	reti

00001dc2 <__vector_15>:

// Transmit Complete Interrupt Request
void __vector_15(void) __attribute__((signal));
void __vector_15()
{
    1dc2:	1f 92       	push	r1
    1dc4:	0f 92       	push	r0
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	0f 92       	push	r0
    1dca:	11 24       	eor	r1, r1
    1dcc:	2f 93       	push	r18
    1dce:	3f 93       	push	r19
    1dd0:	4f 93       	push	r20
    1dd2:	5f 93       	push	r21
    1dd4:	6f 93       	push	r22
    1dd6:	7f 93       	push	r23
    1dd8:	8f 93       	push	r24
    1dda:	9f 93       	push	r25
    1ddc:	af 93       	push	r26
    1dde:	bf 93       	push	r27
    1de0:	ef 93       	push	r30
    1de2:	ff 93       	push	r31
	if (Private_UART_CallBack_TXC!=NULL)
    1de4:	e0 91 1b 01 	lds	r30, 0x011B
    1de8:	f0 91 1c 01 	lds	r31, 0x011C
    1dec:	30 97       	sbiw	r30, 0x00	; 0
    1dee:	09 f0       	breq	.+2      	; 0x1df2 <__vector_15+0x30>
	{
		Private_UART_CallBack_TXC();
    1df0:	09 95       	icall
	} 
    1df2:	ff 91       	pop	r31
    1df4:	ef 91       	pop	r30
    1df6:	bf 91       	pop	r27
    1df8:	af 91       	pop	r26
    1dfa:	9f 91       	pop	r25
    1dfc:	8f 91       	pop	r24
    1dfe:	7f 91       	pop	r23
    1e00:	6f 91       	pop	r22
    1e02:	5f 91       	pop	r21
    1e04:	4f 91       	pop	r20
    1e06:	3f 91       	pop	r19
    1e08:	2f 91       	pop	r18
    1e0a:	0f 90       	pop	r0
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	0f 90       	pop	r0
    1e10:	1f 90       	pop	r1
    1e12:	18 95       	reti

00001e14 <__subsf3>:
    1e14:	50 58       	subi	r21, 0x80	; 128

00001e16 <__addsf3>:
    1e16:	bb 27       	eor	r27, r27
    1e18:	aa 27       	eor	r26, r26
    1e1a:	0e d0       	rcall	.+28     	; 0x1e38 <__addsf3x>
    1e1c:	70 c1       	rjmp	.+736    	; 0x20fe <__fp_round>
    1e1e:	61 d1       	rcall	.+706    	; 0x20e2 <__fp_pscA>
    1e20:	30 f0       	brcs	.+12     	; 0x1e2e <__addsf3+0x18>
    1e22:	66 d1       	rcall	.+716    	; 0x20f0 <__fp_pscB>
    1e24:	20 f0       	brcs	.+8      	; 0x1e2e <__addsf3+0x18>
    1e26:	31 f4       	brne	.+12     	; 0x1e34 <__addsf3+0x1e>
    1e28:	9f 3f       	cpi	r25, 0xFF	; 255
    1e2a:	11 f4       	brne	.+4      	; 0x1e30 <__addsf3+0x1a>
    1e2c:	1e f4       	brtc	.+6      	; 0x1e34 <__addsf3+0x1e>
    1e2e:	56 c1       	rjmp	.+684    	; 0x20dc <__fp_nan>
    1e30:	0e f4       	brtc	.+2      	; 0x1e34 <__addsf3+0x1e>
    1e32:	e0 95       	com	r30
    1e34:	e7 fb       	bst	r30, 7
    1e36:	4c c1       	rjmp	.+664    	; 0x20d0 <__fp_inf>

00001e38 <__addsf3x>:
    1e38:	e9 2f       	mov	r30, r25
    1e3a:	72 d1       	rcall	.+740    	; 0x2120 <__fp_split3>
    1e3c:	80 f3       	brcs	.-32     	; 0x1e1e <__addsf3+0x8>
    1e3e:	ba 17       	cp	r27, r26
    1e40:	62 07       	cpc	r22, r18
    1e42:	73 07       	cpc	r23, r19
    1e44:	84 07       	cpc	r24, r20
    1e46:	95 07       	cpc	r25, r21
    1e48:	18 f0       	brcs	.+6      	; 0x1e50 <__addsf3x+0x18>
    1e4a:	71 f4       	brne	.+28     	; 0x1e68 <__addsf3x+0x30>
    1e4c:	9e f5       	brtc	.+102    	; 0x1eb4 <__addsf3x+0x7c>
    1e4e:	8a c1       	rjmp	.+788    	; 0x2164 <__fp_zero>
    1e50:	0e f4       	brtc	.+2      	; 0x1e54 <__addsf3x+0x1c>
    1e52:	e0 95       	com	r30
    1e54:	0b 2e       	mov	r0, r27
    1e56:	ba 2f       	mov	r27, r26
    1e58:	a0 2d       	mov	r26, r0
    1e5a:	0b 01       	movw	r0, r22
    1e5c:	b9 01       	movw	r22, r18
    1e5e:	90 01       	movw	r18, r0
    1e60:	0c 01       	movw	r0, r24
    1e62:	ca 01       	movw	r24, r20
    1e64:	a0 01       	movw	r20, r0
    1e66:	11 24       	eor	r1, r1
    1e68:	ff 27       	eor	r31, r31
    1e6a:	59 1b       	sub	r21, r25
    1e6c:	99 f0       	breq	.+38     	; 0x1e94 <__addsf3x+0x5c>
    1e6e:	59 3f       	cpi	r21, 0xF9	; 249
    1e70:	50 f4       	brcc	.+20     	; 0x1e86 <__addsf3x+0x4e>
    1e72:	50 3e       	cpi	r21, 0xE0	; 224
    1e74:	68 f1       	brcs	.+90     	; 0x1ed0 <__addsf3x+0x98>
    1e76:	1a 16       	cp	r1, r26
    1e78:	f0 40       	sbci	r31, 0x00	; 0
    1e7a:	a2 2f       	mov	r26, r18
    1e7c:	23 2f       	mov	r18, r19
    1e7e:	34 2f       	mov	r19, r20
    1e80:	44 27       	eor	r20, r20
    1e82:	58 5f       	subi	r21, 0xF8	; 248
    1e84:	f3 cf       	rjmp	.-26     	; 0x1e6c <__addsf3x+0x34>
    1e86:	46 95       	lsr	r20
    1e88:	37 95       	ror	r19
    1e8a:	27 95       	ror	r18
    1e8c:	a7 95       	ror	r26
    1e8e:	f0 40       	sbci	r31, 0x00	; 0
    1e90:	53 95       	inc	r21
    1e92:	c9 f7       	brne	.-14     	; 0x1e86 <__addsf3x+0x4e>
    1e94:	7e f4       	brtc	.+30     	; 0x1eb4 <__addsf3x+0x7c>
    1e96:	1f 16       	cp	r1, r31
    1e98:	ba 0b       	sbc	r27, r26
    1e9a:	62 0b       	sbc	r22, r18
    1e9c:	73 0b       	sbc	r23, r19
    1e9e:	84 0b       	sbc	r24, r20
    1ea0:	ba f0       	brmi	.+46     	; 0x1ed0 <__addsf3x+0x98>
    1ea2:	91 50       	subi	r25, 0x01	; 1
    1ea4:	a1 f0       	breq	.+40     	; 0x1ece <__addsf3x+0x96>
    1ea6:	ff 0f       	add	r31, r31
    1ea8:	bb 1f       	adc	r27, r27
    1eaa:	66 1f       	adc	r22, r22
    1eac:	77 1f       	adc	r23, r23
    1eae:	88 1f       	adc	r24, r24
    1eb0:	c2 f7       	brpl	.-16     	; 0x1ea2 <__addsf3x+0x6a>
    1eb2:	0e c0       	rjmp	.+28     	; 0x1ed0 <__addsf3x+0x98>
    1eb4:	ba 0f       	add	r27, r26
    1eb6:	62 1f       	adc	r22, r18
    1eb8:	73 1f       	adc	r23, r19
    1eba:	84 1f       	adc	r24, r20
    1ebc:	48 f4       	brcc	.+18     	; 0x1ed0 <__addsf3x+0x98>
    1ebe:	87 95       	ror	r24
    1ec0:	77 95       	ror	r23
    1ec2:	67 95       	ror	r22
    1ec4:	b7 95       	ror	r27
    1ec6:	f7 95       	ror	r31
    1ec8:	9e 3f       	cpi	r25, 0xFE	; 254
    1eca:	08 f0       	brcs	.+2      	; 0x1ece <__addsf3x+0x96>
    1ecc:	b3 cf       	rjmp	.-154    	; 0x1e34 <__addsf3+0x1e>
    1ece:	93 95       	inc	r25
    1ed0:	88 0f       	add	r24, r24
    1ed2:	08 f0       	brcs	.+2      	; 0x1ed6 <__addsf3x+0x9e>
    1ed4:	99 27       	eor	r25, r25
    1ed6:	ee 0f       	add	r30, r30
    1ed8:	97 95       	ror	r25
    1eda:	87 95       	ror	r24
    1edc:	08 95       	ret

00001ede <__cmpsf2>:
    1ede:	d4 d0       	rcall	.+424    	; 0x2088 <__fp_cmp>
    1ee0:	08 f4       	brcc	.+2      	; 0x1ee4 <__cmpsf2+0x6>
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	08 95       	ret

00001ee6 <__divsf3>:
    1ee6:	0c d0       	rcall	.+24     	; 0x1f00 <__divsf3x>
    1ee8:	0a c1       	rjmp	.+532    	; 0x20fe <__fp_round>
    1eea:	02 d1       	rcall	.+516    	; 0x20f0 <__fp_pscB>
    1eec:	40 f0       	brcs	.+16     	; 0x1efe <__divsf3+0x18>
    1eee:	f9 d0       	rcall	.+498    	; 0x20e2 <__fp_pscA>
    1ef0:	30 f0       	brcs	.+12     	; 0x1efe <__divsf3+0x18>
    1ef2:	21 f4       	brne	.+8      	; 0x1efc <__divsf3+0x16>
    1ef4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ef6:	19 f0       	breq	.+6      	; 0x1efe <__divsf3+0x18>
    1ef8:	eb c0       	rjmp	.+470    	; 0x20d0 <__fp_inf>
    1efa:	51 11       	cpse	r21, r1
    1efc:	34 c1       	rjmp	.+616    	; 0x2166 <__fp_szero>
    1efe:	ee c0       	rjmp	.+476    	; 0x20dc <__fp_nan>

00001f00 <__divsf3x>:
    1f00:	0f d1       	rcall	.+542    	; 0x2120 <__fp_split3>
    1f02:	98 f3       	brcs	.-26     	; 0x1eea <__divsf3+0x4>

00001f04 <__divsf3_pse>:
    1f04:	99 23       	and	r25, r25
    1f06:	c9 f3       	breq	.-14     	; 0x1efa <__divsf3+0x14>
    1f08:	55 23       	and	r21, r21
    1f0a:	b1 f3       	breq	.-20     	; 0x1ef8 <__divsf3+0x12>
    1f0c:	95 1b       	sub	r25, r21
    1f0e:	55 0b       	sbc	r21, r21
    1f10:	bb 27       	eor	r27, r27
    1f12:	aa 27       	eor	r26, r26
    1f14:	62 17       	cp	r22, r18
    1f16:	73 07       	cpc	r23, r19
    1f18:	84 07       	cpc	r24, r20
    1f1a:	38 f0       	brcs	.+14     	; 0x1f2a <__divsf3_pse+0x26>
    1f1c:	9f 5f       	subi	r25, 0xFF	; 255
    1f1e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f20:	22 0f       	add	r18, r18
    1f22:	33 1f       	adc	r19, r19
    1f24:	44 1f       	adc	r20, r20
    1f26:	aa 1f       	adc	r26, r26
    1f28:	a9 f3       	breq	.-22     	; 0x1f14 <__divsf3_pse+0x10>
    1f2a:	33 d0       	rcall	.+102    	; 0x1f92 <__divsf3_pse+0x8e>
    1f2c:	0e 2e       	mov	r0, r30
    1f2e:	3a f0       	brmi	.+14     	; 0x1f3e <__divsf3_pse+0x3a>
    1f30:	e0 e8       	ldi	r30, 0x80	; 128
    1f32:	30 d0       	rcall	.+96     	; 0x1f94 <__divsf3_pse+0x90>
    1f34:	91 50       	subi	r25, 0x01	; 1
    1f36:	50 40       	sbci	r21, 0x00	; 0
    1f38:	e6 95       	lsr	r30
    1f3a:	00 1c       	adc	r0, r0
    1f3c:	ca f7       	brpl	.-14     	; 0x1f30 <__divsf3_pse+0x2c>
    1f3e:	29 d0       	rcall	.+82     	; 0x1f92 <__divsf3_pse+0x8e>
    1f40:	fe 2f       	mov	r31, r30
    1f42:	27 d0       	rcall	.+78     	; 0x1f92 <__divsf3_pse+0x8e>
    1f44:	66 0f       	add	r22, r22
    1f46:	77 1f       	adc	r23, r23
    1f48:	88 1f       	adc	r24, r24
    1f4a:	bb 1f       	adc	r27, r27
    1f4c:	26 17       	cp	r18, r22
    1f4e:	37 07       	cpc	r19, r23
    1f50:	48 07       	cpc	r20, r24
    1f52:	ab 07       	cpc	r26, r27
    1f54:	b0 e8       	ldi	r27, 0x80	; 128
    1f56:	09 f0       	breq	.+2      	; 0x1f5a <__divsf3_pse+0x56>
    1f58:	bb 0b       	sbc	r27, r27
    1f5a:	80 2d       	mov	r24, r0
    1f5c:	bf 01       	movw	r22, r30
    1f5e:	ff 27       	eor	r31, r31
    1f60:	93 58       	subi	r25, 0x83	; 131
    1f62:	5f 4f       	sbci	r21, 0xFF	; 255
    1f64:	2a f0       	brmi	.+10     	; 0x1f70 <__divsf3_pse+0x6c>
    1f66:	9e 3f       	cpi	r25, 0xFE	; 254
    1f68:	51 05       	cpc	r21, r1
    1f6a:	68 f0       	brcs	.+26     	; 0x1f86 <__divsf3_pse+0x82>
    1f6c:	b1 c0       	rjmp	.+354    	; 0x20d0 <__fp_inf>
    1f6e:	fb c0       	rjmp	.+502    	; 0x2166 <__fp_szero>
    1f70:	5f 3f       	cpi	r21, 0xFF	; 255
    1f72:	ec f3       	brlt	.-6      	; 0x1f6e <__divsf3_pse+0x6a>
    1f74:	98 3e       	cpi	r25, 0xE8	; 232
    1f76:	dc f3       	brlt	.-10     	; 0x1f6e <__divsf3_pse+0x6a>
    1f78:	86 95       	lsr	r24
    1f7a:	77 95       	ror	r23
    1f7c:	67 95       	ror	r22
    1f7e:	b7 95       	ror	r27
    1f80:	f7 95       	ror	r31
    1f82:	9f 5f       	subi	r25, 0xFF	; 255
    1f84:	c9 f7       	brne	.-14     	; 0x1f78 <__divsf3_pse+0x74>
    1f86:	88 0f       	add	r24, r24
    1f88:	91 1d       	adc	r25, r1
    1f8a:	96 95       	lsr	r25
    1f8c:	87 95       	ror	r24
    1f8e:	97 f9       	bld	r25, 7
    1f90:	08 95       	ret
    1f92:	e1 e0       	ldi	r30, 0x01	; 1
    1f94:	66 0f       	add	r22, r22
    1f96:	77 1f       	adc	r23, r23
    1f98:	88 1f       	adc	r24, r24
    1f9a:	bb 1f       	adc	r27, r27
    1f9c:	62 17       	cp	r22, r18
    1f9e:	73 07       	cpc	r23, r19
    1fa0:	84 07       	cpc	r24, r20
    1fa2:	ba 07       	cpc	r27, r26
    1fa4:	20 f0       	brcs	.+8      	; 0x1fae <__divsf3_pse+0xaa>
    1fa6:	62 1b       	sub	r22, r18
    1fa8:	73 0b       	sbc	r23, r19
    1faa:	84 0b       	sbc	r24, r20
    1fac:	ba 0b       	sbc	r27, r26
    1fae:	ee 1f       	adc	r30, r30
    1fb0:	88 f7       	brcc	.-30     	; 0x1f94 <__divsf3_pse+0x90>
    1fb2:	e0 95       	com	r30
    1fb4:	08 95       	ret

00001fb6 <__fixunssfsi>:
    1fb6:	bc d0       	rcall	.+376    	; 0x2130 <__fp_splitA>
    1fb8:	88 f0       	brcs	.+34     	; 0x1fdc <__fixunssfsi+0x26>
    1fba:	9f 57       	subi	r25, 0x7F	; 127
    1fbc:	90 f0       	brcs	.+36     	; 0x1fe2 <__fixunssfsi+0x2c>
    1fbe:	b9 2f       	mov	r27, r25
    1fc0:	99 27       	eor	r25, r25
    1fc2:	b7 51       	subi	r27, 0x17	; 23
    1fc4:	a0 f0       	brcs	.+40     	; 0x1fee <__fixunssfsi+0x38>
    1fc6:	d1 f0       	breq	.+52     	; 0x1ffc <__fixunssfsi+0x46>
    1fc8:	66 0f       	add	r22, r22
    1fca:	77 1f       	adc	r23, r23
    1fcc:	88 1f       	adc	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	1a f0       	brmi	.+6      	; 0x1fd8 <__fixunssfsi+0x22>
    1fd2:	ba 95       	dec	r27
    1fd4:	c9 f7       	brne	.-14     	; 0x1fc8 <__fixunssfsi+0x12>
    1fd6:	12 c0       	rjmp	.+36     	; 0x1ffc <__fixunssfsi+0x46>
    1fd8:	b1 30       	cpi	r27, 0x01	; 1
    1fda:	81 f0       	breq	.+32     	; 0x1ffc <__fixunssfsi+0x46>
    1fdc:	c3 d0       	rcall	.+390    	; 0x2164 <__fp_zero>
    1fde:	b1 e0       	ldi	r27, 0x01	; 1
    1fe0:	08 95       	ret
    1fe2:	c0 c0       	rjmp	.+384    	; 0x2164 <__fp_zero>
    1fe4:	67 2f       	mov	r22, r23
    1fe6:	78 2f       	mov	r23, r24
    1fe8:	88 27       	eor	r24, r24
    1fea:	b8 5f       	subi	r27, 0xF8	; 248
    1fec:	39 f0       	breq	.+14     	; 0x1ffc <__fixunssfsi+0x46>
    1fee:	b9 3f       	cpi	r27, 0xF9	; 249
    1ff0:	cc f3       	brlt	.-14     	; 0x1fe4 <__fixunssfsi+0x2e>
    1ff2:	86 95       	lsr	r24
    1ff4:	77 95       	ror	r23
    1ff6:	67 95       	ror	r22
    1ff8:	b3 95       	inc	r27
    1ffa:	d9 f7       	brne	.-10     	; 0x1ff2 <__fixunssfsi+0x3c>
    1ffc:	3e f4       	brtc	.+14     	; 0x200c <__fixunssfsi+0x56>
    1ffe:	90 95       	com	r25
    2000:	80 95       	com	r24
    2002:	70 95       	com	r23
    2004:	61 95       	neg	r22
    2006:	7f 4f       	sbci	r23, 0xFF	; 255
    2008:	8f 4f       	sbci	r24, 0xFF	; 255
    200a:	9f 4f       	sbci	r25, 0xFF	; 255
    200c:	08 95       	ret

0000200e <__floatunsisf>:
    200e:	e8 94       	clt
    2010:	09 c0       	rjmp	.+18     	; 0x2024 <__floatsisf+0x12>

00002012 <__floatsisf>:
    2012:	97 fb       	bst	r25, 7
    2014:	3e f4       	brtc	.+14     	; 0x2024 <__floatsisf+0x12>
    2016:	90 95       	com	r25
    2018:	80 95       	com	r24
    201a:	70 95       	com	r23
    201c:	61 95       	neg	r22
    201e:	7f 4f       	sbci	r23, 0xFF	; 255
    2020:	8f 4f       	sbci	r24, 0xFF	; 255
    2022:	9f 4f       	sbci	r25, 0xFF	; 255
    2024:	99 23       	and	r25, r25
    2026:	a9 f0       	breq	.+42     	; 0x2052 <__floatsisf+0x40>
    2028:	f9 2f       	mov	r31, r25
    202a:	96 e9       	ldi	r25, 0x96	; 150
    202c:	bb 27       	eor	r27, r27
    202e:	93 95       	inc	r25
    2030:	f6 95       	lsr	r31
    2032:	87 95       	ror	r24
    2034:	77 95       	ror	r23
    2036:	67 95       	ror	r22
    2038:	b7 95       	ror	r27
    203a:	f1 11       	cpse	r31, r1
    203c:	f8 cf       	rjmp	.-16     	; 0x202e <__floatsisf+0x1c>
    203e:	fa f4       	brpl	.+62     	; 0x207e <__floatsisf+0x6c>
    2040:	bb 0f       	add	r27, r27
    2042:	11 f4       	brne	.+4      	; 0x2048 <__floatsisf+0x36>
    2044:	60 ff       	sbrs	r22, 0
    2046:	1b c0       	rjmp	.+54     	; 0x207e <__floatsisf+0x6c>
    2048:	6f 5f       	subi	r22, 0xFF	; 255
    204a:	7f 4f       	sbci	r23, 0xFF	; 255
    204c:	8f 4f       	sbci	r24, 0xFF	; 255
    204e:	9f 4f       	sbci	r25, 0xFF	; 255
    2050:	16 c0       	rjmp	.+44     	; 0x207e <__floatsisf+0x6c>
    2052:	88 23       	and	r24, r24
    2054:	11 f0       	breq	.+4      	; 0x205a <__floatsisf+0x48>
    2056:	96 e9       	ldi	r25, 0x96	; 150
    2058:	11 c0       	rjmp	.+34     	; 0x207c <__floatsisf+0x6a>
    205a:	77 23       	and	r23, r23
    205c:	21 f0       	breq	.+8      	; 0x2066 <__floatsisf+0x54>
    205e:	9e e8       	ldi	r25, 0x8E	; 142
    2060:	87 2f       	mov	r24, r23
    2062:	76 2f       	mov	r23, r22
    2064:	05 c0       	rjmp	.+10     	; 0x2070 <__floatsisf+0x5e>
    2066:	66 23       	and	r22, r22
    2068:	71 f0       	breq	.+28     	; 0x2086 <__floatsisf+0x74>
    206a:	96 e8       	ldi	r25, 0x86	; 134
    206c:	86 2f       	mov	r24, r22
    206e:	70 e0       	ldi	r23, 0x00	; 0
    2070:	60 e0       	ldi	r22, 0x00	; 0
    2072:	2a f0       	brmi	.+10     	; 0x207e <__floatsisf+0x6c>
    2074:	9a 95       	dec	r25
    2076:	66 0f       	add	r22, r22
    2078:	77 1f       	adc	r23, r23
    207a:	88 1f       	adc	r24, r24
    207c:	da f7       	brpl	.-10     	; 0x2074 <__floatsisf+0x62>
    207e:	88 0f       	add	r24, r24
    2080:	96 95       	lsr	r25
    2082:	87 95       	ror	r24
    2084:	97 f9       	bld	r25, 7
    2086:	08 95       	ret

00002088 <__fp_cmp>:
    2088:	99 0f       	add	r25, r25
    208a:	00 08       	sbc	r0, r0
    208c:	55 0f       	add	r21, r21
    208e:	aa 0b       	sbc	r26, r26
    2090:	e0 e8       	ldi	r30, 0x80	; 128
    2092:	fe ef       	ldi	r31, 0xFE	; 254
    2094:	16 16       	cp	r1, r22
    2096:	17 06       	cpc	r1, r23
    2098:	e8 07       	cpc	r30, r24
    209a:	f9 07       	cpc	r31, r25
    209c:	c0 f0       	brcs	.+48     	; 0x20ce <__fp_cmp+0x46>
    209e:	12 16       	cp	r1, r18
    20a0:	13 06       	cpc	r1, r19
    20a2:	e4 07       	cpc	r30, r20
    20a4:	f5 07       	cpc	r31, r21
    20a6:	98 f0       	brcs	.+38     	; 0x20ce <__fp_cmp+0x46>
    20a8:	62 1b       	sub	r22, r18
    20aa:	73 0b       	sbc	r23, r19
    20ac:	84 0b       	sbc	r24, r20
    20ae:	95 0b       	sbc	r25, r21
    20b0:	39 f4       	brne	.+14     	; 0x20c0 <__fp_cmp+0x38>
    20b2:	0a 26       	eor	r0, r26
    20b4:	61 f0       	breq	.+24     	; 0x20ce <__fp_cmp+0x46>
    20b6:	23 2b       	or	r18, r19
    20b8:	24 2b       	or	r18, r20
    20ba:	25 2b       	or	r18, r21
    20bc:	21 f4       	brne	.+8      	; 0x20c6 <__fp_cmp+0x3e>
    20be:	08 95       	ret
    20c0:	0a 26       	eor	r0, r26
    20c2:	09 f4       	brne	.+2      	; 0x20c6 <__fp_cmp+0x3e>
    20c4:	a1 40       	sbci	r26, 0x01	; 1
    20c6:	a6 95       	lsr	r26
    20c8:	8f ef       	ldi	r24, 0xFF	; 255
    20ca:	81 1d       	adc	r24, r1
    20cc:	81 1d       	adc	r24, r1
    20ce:	08 95       	ret

000020d0 <__fp_inf>:
    20d0:	97 f9       	bld	r25, 7
    20d2:	9f 67       	ori	r25, 0x7F	; 127
    20d4:	80 e8       	ldi	r24, 0x80	; 128
    20d6:	70 e0       	ldi	r23, 0x00	; 0
    20d8:	60 e0       	ldi	r22, 0x00	; 0
    20da:	08 95       	ret

000020dc <__fp_nan>:
    20dc:	9f ef       	ldi	r25, 0xFF	; 255
    20de:	80 ec       	ldi	r24, 0xC0	; 192
    20e0:	08 95       	ret

000020e2 <__fp_pscA>:
    20e2:	00 24       	eor	r0, r0
    20e4:	0a 94       	dec	r0
    20e6:	16 16       	cp	r1, r22
    20e8:	17 06       	cpc	r1, r23
    20ea:	18 06       	cpc	r1, r24
    20ec:	09 06       	cpc	r0, r25
    20ee:	08 95       	ret

000020f0 <__fp_pscB>:
    20f0:	00 24       	eor	r0, r0
    20f2:	0a 94       	dec	r0
    20f4:	12 16       	cp	r1, r18
    20f6:	13 06       	cpc	r1, r19
    20f8:	14 06       	cpc	r1, r20
    20fa:	05 06       	cpc	r0, r21
    20fc:	08 95       	ret

000020fe <__fp_round>:
    20fe:	09 2e       	mov	r0, r25
    2100:	03 94       	inc	r0
    2102:	00 0c       	add	r0, r0
    2104:	11 f4       	brne	.+4      	; 0x210a <__fp_round+0xc>
    2106:	88 23       	and	r24, r24
    2108:	52 f0       	brmi	.+20     	; 0x211e <__fp_round+0x20>
    210a:	bb 0f       	add	r27, r27
    210c:	40 f4       	brcc	.+16     	; 0x211e <__fp_round+0x20>
    210e:	bf 2b       	or	r27, r31
    2110:	11 f4       	brne	.+4      	; 0x2116 <__fp_round+0x18>
    2112:	60 ff       	sbrs	r22, 0
    2114:	04 c0       	rjmp	.+8      	; 0x211e <__fp_round+0x20>
    2116:	6f 5f       	subi	r22, 0xFF	; 255
    2118:	7f 4f       	sbci	r23, 0xFF	; 255
    211a:	8f 4f       	sbci	r24, 0xFF	; 255
    211c:	9f 4f       	sbci	r25, 0xFF	; 255
    211e:	08 95       	ret

00002120 <__fp_split3>:
    2120:	57 fd       	sbrc	r21, 7
    2122:	90 58       	subi	r25, 0x80	; 128
    2124:	44 0f       	add	r20, r20
    2126:	55 1f       	adc	r21, r21
    2128:	59 f0       	breq	.+22     	; 0x2140 <__fp_splitA+0x10>
    212a:	5f 3f       	cpi	r21, 0xFF	; 255
    212c:	71 f0       	breq	.+28     	; 0x214a <__fp_splitA+0x1a>
    212e:	47 95       	ror	r20

00002130 <__fp_splitA>:
    2130:	88 0f       	add	r24, r24
    2132:	97 fb       	bst	r25, 7
    2134:	99 1f       	adc	r25, r25
    2136:	61 f0       	breq	.+24     	; 0x2150 <__fp_splitA+0x20>
    2138:	9f 3f       	cpi	r25, 0xFF	; 255
    213a:	79 f0       	breq	.+30     	; 0x215a <__fp_splitA+0x2a>
    213c:	87 95       	ror	r24
    213e:	08 95       	ret
    2140:	12 16       	cp	r1, r18
    2142:	13 06       	cpc	r1, r19
    2144:	14 06       	cpc	r1, r20
    2146:	55 1f       	adc	r21, r21
    2148:	f2 cf       	rjmp	.-28     	; 0x212e <__fp_split3+0xe>
    214a:	46 95       	lsr	r20
    214c:	f1 df       	rcall	.-30     	; 0x2130 <__fp_splitA>
    214e:	08 c0       	rjmp	.+16     	; 0x2160 <__fp_splitA+0x30>
    2150:	16 16       	cp	r1, r22
    2152:	17 06       	cpc	r1, r23
    2154:	18 06       	cpc	r1, r24
    2156:	99 1f       	adc	r25, r25
    2158:	f1 cf       	rjmp	.-30     	; 0x213c <__fp_splitA+0xc>
    215a:	86 95       	lsr	r24
    215c:	71 05       	cpc	r23, r1
    215e:	61 05       	cpc	r22, r1
    2160:	08 94       	sec
    2162:	08 95       	ret

00002164 <__fp_zero>:
    2164:	e8 94       	clt

00002166 <__fp_szero>:
    2166:	bb 27       	eor	r27, r27
    2168:	66 27       	eor	r22, r22
    216a:	77 27       	eor	r23, r23
    216c:	cb 01       	movw	r24, r22
    216e:	97 f9       	bld	r25, 7
    2170:	08 95       	ret

00002172 <__gesf2>:
    2172:	8a df       	rcall	.-236    	; 0x2088 <__fp_cmp>
    2174:	08 f4       	brcc	.+2      	; 0x2178 <__gesf2+0x6>
    2176:	8f ef       	ldi	r24, 0xFF	; 255
    2178:	08 95       	ret

0000217a <__mulsf3>:
    217a:	0b d0       	rcall	.+22     	; 0x2192 <__mulsf3x>
    217c:	c0 cf       	rjmp	.-128    	; 0x20fe <__fp_round>
    217e:	b1 df       	rcall	.-158    	; 0x20e2 <__fp_pscA>
    2180:	28 f0       	brcs	.+10     	; 0x218c <__mulsf3+0x12>
    2182:	b6 df       	rcall	.-148    	; 0x20f0 <__fp_pscB>
    2184:	18 f0       	brcs	.+6      	; 0x218c <__mulsf3+0x12>
    2186:	95 23       	and	r25, r21
    2188:	09 f0       	breq	.+2      	; 0x218c <__mulsf3+0x12>
    218a:	a2 cf       	rjmp	.-188    	; 0x20d0 <__fp_inf>
    218c:	a7 cf       	rjmp	.-178    	; 0x20dc <__fp_nan>
    218e:	11 24       	eor	r1, r1
    2190:	ea cf       	rjmp	.-44     	; 0x2166 <__fp_szero>

00002192 <__mulsf3x>:
    2192:	c6 df       	rcall	.-116    	; 0x2120 <__fp_split3>
    2194:	a0 f3       	brcs	.-24     	; 0x217e <__mulsf3+0x4>

00002196 <__mulsf3_pse>:
    2196:	95 9f       	mul	r25, r21
    2198:	d1 f3       	breq	.-12     	; 0x218e <__mulsf3+0x14>
    219a:	95 0f       	add	r25, r21
    219c:	50 e0       	ldi	r21, 0x00	; 0
    219e:	55 1f       	adc	r21, r21
    21a0:	62 9f       	mul	r22, r18
    21a2:	f0 01       	movw	r30, r0
    21a4:	72 9f       	mul	r23, r18
    21a6:	bb 27       	eor	r27, r27
    21a8:	f0 0d       	add	r31, r0
    21aa:	b1 1d       	adc	r27, r1
    21ac:	63 9f       	mul	r22, r19
    21ae:	aa 27       	eor	r26, r26
    21b0:	f0 0d       	add	r31, r0
    21b2:	b1 1d       	adc	r27, r1
    21b4:	aa 1f       	adc	r26, r26
    21b6:	64 9f       	mul	r22, r20
    21b8:	66 27       	eor	r22, r22
    21ba:	b0 0d       	add	r27, r0
    21bc:	a1 1d       	adc	r26, r1
    21be:	66 1f       	adc	r22, r22
    21c0:	82 9f       	mul	r24, r18
    21c2:	22 27       	eor	r18, r18
    21c4:	b0 0d       	add	r27, r0
    21c6:	a1 1d       	adc	r26, r1
    21c8:	62 1f       	adc	r22, r18
    21ca:	73 9f       	mul	r23, r19
    21cc:	b0 0d       	add	r27, r0
    21ce:	a1 1d       	adc	r26, r1
    21d0:	62 1f       	adc	r22, r18
    21d2:	83 9f       	mul	r24, r19
    21d4:	a0 0d       	add	r26, r0
    21d6:	61 1d       	adc	r22, r1
    21d8:	22 1f       	adc	r18, r18
    21da:	74 9f       	mul	r23, r20
    21dc:	33 27       	eor	r19, r19
    21de:	a0 0d       	add	r26, r0
    21e0:	61 1d       	adc	r22, r1
    21e2:	23 1f       	adc	r18, r19
    21e4:	84 9f       	mul	r24, r20
    21e6:	60 0d       	add	r22, r0
    21e8:	21 1d       	adc	r18, r1
    21ea:	82 2f       	mov	r24, r18
    21ec:	76 2f       	mov	r23, r22
    21ee:	6a 2f       	mov	r22, r26
    21f0:	11 24       	eor	r1, r1
    21f2:	9f 57       	subi	r25, 0x7F	; 127
    21f4:	50 40       	sbci	r21, 0x00	; 0
    21f6:	8a f0       	brmi	.+34     	; 0x221a <__mulsf3_pse+0x84>
    21f8:	e1 f0       	breq	.+56     	; 0x2232 <__mulsf3_pse+0x9c>
    21fa:	88 23       	and	r24, r24
    21fc:	4a f0       	brmi	.+18     	; 0x2210 <__mulsf3_pse+0x7a>
    21fe:	ee 0f       	add	r30, r30
    2200:	ff 1f       	adc	r31, r31
    2202:	bb 1f       	adc	r27, r27
    2204:	66 1f       	adc	r22, r22
    2206:	77 1f       	adc	r23, r23
    2208:	88 1f       	adc	r24, r24
    220a:	91 50       	subi	r25, 0x01	; 1
    220c:	50 40       	sbci	r21, 0x00	; 0
    220e:	a9 f7       	brne	.-22     	; 0x21fa <__mulsf3_pse+0x64>
    2210:	9e 3f       	cpi	r25, 0xFE	; 254
    2212:	51 05       	cpc	r21, r1
    2214:	70 f0       	brcs	.+28     	; 0x2232 <__mulsf3_pse+0x9c>
    2216:	5c cf       	rjmp	.-328    	; 0x20d0 <__fp_inf>
    2218:	a6 cf       	rjmp	.-180    	; 0x2166 <__fp_szero>
    221a:	5f 3f       	cpi	r21, 0xFF	; 255
    221c:	ec f3       	brlt	.-6      	; 0x2218 <__mulsf3_pse+0x82>
    221e:	98 3e       	cpi	r25, 0xE8	; 232
    2220:	dc f3       	brlt	.-10     	; 0x2218 <__mulsf3_pse+0x82>
    2222:	86 95       	lsr	r24
    2224:	77 95       	ror	r23
    2226:	67 95       	ror	r22
    2228:	b7 95       	ror	r27
    222a:	f7 95       	ror	r31
    222c:	e7 95       	ror	r30
    222e:	9f 5f       	subi	r25, 0xFF	; 255
    2230:	c1 f7       	brne	.-16     	; 0x2222 <__mulsf3_pse+0x8c>
    2232:	fe 2b       	or	r31, r30
    2234:	88 0f       	add	r24, r24
    2236:	91 1d       	adc	r25, r1
    2238:	96 95       	lsr	r25
    223a:	87 95       	ror	r24
    223c:	97 f9       	bld	r25, 7
    223e:	08 95       	ret

00002240 <__mulsi3>:
    2240:	62 9f       	mul	r22, r18
    2242:	d0 01       	movw	r26, r0
    2244:	73 9f       	mul	r23, r19
    2246:	f0 01       	movw	r30, r0
    2248:	82 9f       	mul	r24, r18
    224a:	e0 0d       	add	r30, r0
    224c:	f1 1d       	adc	r31, r1
    224e:	64 9f       	mul	r22, r20
    2250:	e0 0d       	add	r30, r0
    2252:	f1 1d       	adc	r31, r1
    2254:	92 9f       	mul	r25, r18
    2256:	f0 0d       	add	r31, r0
    2258:	83 9f       	mul	r24, r19
    225a:	f0 0d       	add	r31, r0
    225c:	74 9f       	mul	r23, r20
    225e:	f0 0d       	add	r31, r0
    2260:	65 9f       	mul	r22, r21
    2262:	f0 0d       	add	r31, r0
    2264:	99 27       	eor	r25, r25
    2266:	72 9f       	mul	r23, r18
    2268:	b0 0d       	add	r27, r0
    226a:	e1 1d       	adc	r30, r1
    226c:	f9 1f       	adc	r31, r25
    226e:	63 9f       	mul	r22, r19
    2270:	b0 0d       	add	r27, r0
    2272:	e1 1d       	adc	r30, r1
    2274:	f9 1f       	adc	r31, r25
    2276:	bd 01       	movw	r22, r26
    2278:	cf 01       	movw	r24, r30
    227a:	11 24       	eor	r1, r1
    227c:	08 95       	ret

0000227e <__divmodhi4>:
    227e:	97 fb       	bst	r25, 7
    2280:	09 2e       	mov	r0, r25
    2282:	07 26       	eor	r0, r23
    2284:	0a d0       	rcall	.+20     	; 0x229a <__divmodhi4_neg1>
    2286:	77 fd       	sbrc	r23, 7
    2288:	04 d0       	rcall	.+8      	; 0x2292 <__divmodhi4_neg2>
    228a:	2e d0       	rcall	.+92     	; 0x22e8 <__udivmodhi4>
    228c:	06 d0       	rcall	.+12     	; 0x229a <__divmodhi4_neg1>
    228e:	00 20       	and	r0, r0
    2290:	1a f4       	brpl	.+6      	; 0x2298 <__divmodhi4_exit>

00002292 <__divmodhi4_neg2>:
    2292:	70 95       	com	r23
    2294:	61 95       	neg	r22
    2296:	7f 4f       	sbci	r23, 0xFF	; 255

00002298 <__divmodhi4_exit>:
    2298:	08 95       	ret

0000229a <__divmodhi4_neg1>:
    229a:	f6 f7       	brtc	.-4      	; 0x2298 <__divmodhi4_exit>
    229c:	90 95       	com	r25
    229e:	81 95       	neg	r24
    22a0:	9f 4f       	sbci	r25, 0xFF	; 255
    22a2:	08 95       	ret

000022a4 <__udivmodsi4>:
    22a4:	a1 e2       	ldi	r26, 0x21	; 33
    22a6:	1a 2e       	mov	r1, r26
    22a8:	aa 1b       	sub	r26, r26
    22aa:	bb 1b       	sub	r27, r27
    22ac:	fd 01       	movw	r30, r26
    22ae:	0d c0       	rjmp	.+26     	; 0x22ca <__udivmodsi4_ep>

000022b0 <__udivmodsi4_loop>:
    22b0:	aa 1f       	adc	r26, r26
    22b2:	bb 1f       	adc	r27, r27
    22b4:	ee 1f       	adc	r30, r30
    22b6:	ff 1f       	adc	r31, r31
    22b8:	a2 17       	cp	r26, r18
    22ba:	b3 07       	cpc	r27, r19
    22bc:	e4 07       	cpc	r30, r20
    22be:	f5 07       	cpc	r31, r21
    22c0:	20 f0       	brcs	.+8      	; 0x22ca <__udivmodsi4_ep>
    22c2:	a2 1b       	sub	r26, r18
    22c4:	b3 0b       	sbc	r27, r19
    22c6:	e4 0b       	sbc	r30, r20
    22c8:	f5 0b       	sbc	r31, r21

000022ca <__udivmodsi4_ep>:
    22ca:	66 1f       	adc	r22, r22
    22cc:	77 1f       	adc	r23, r23
    22ce:	88 1f       	adc	r24, r24
    22d0:	99 1f       	adc	r25, r25
    22d2:	1a 94       	dec	r1
    22d4:	69 f7       	brne	.-38     	; 0x22b0 <__udivmodsi4_loop>
    22d6:	60 95       	com	r22
    22d8:	70 95       	com	r23
    22da:	80 95       	com	r24
    22dc:	90 95       	com	r25
    22de:	9b 01       	movw	r18, r22
    22e0:	ac 01       	movw	r20, r24
    22e2:	bd 01       	movw	r22, r26
    22e4:	cf 01       	movw	r24, r30
    22e6:	08 95       	ret

000022e8 <__udivmodhi4>:
    22e8:	aa 1b       	sub	r26, r26
    22ea:	bb 1b       	sub	r27, r27
    22ec:	51 e1       	ldi	r21, 0x11	; 17
    22ee:	07 c0       	rjmp	.+14     	; 0x22fe <__udivmodhi4_ep>

000022f0 <__udivmodhi4_loop>:
    22f0:	aa 1f       	adc	r26, r26
    22f2:	bb 1f       	adc	r27, r27
    22f4:	a6 17       	cp	r26, r22
    22f6:	b7 07       	cpc	r27, r23
    22f8:	10 f0       	brcs	.+4      	; 0x22fe <__udivmodhi4_ep>
    22fa:	a6 1b       	sub	r26, r22
    22fc:	b7 0b       	sbc	r27, r23

000022fe <__udivmodhi4_ep>:
    22fe:	88 1f       	adc	r24, r24
    2300:	99 1f       	adc	r25, r25
    2302:	5a 95       	dec	r21
    2304:	a9 f7       	brne	.-22     	; 0x22f0 <__udivmodhi4_loop>
    2306:	80 95       	com	r24
    2308:	90 95       	com	r25
    230a:	bc 01       	movw	r22, r24
    230c:	cd 01       	movw	r24, r26
    230e:	08 95       	ret

00002310 <snprintf>:
    2310:	ae e0       	ldi	r26, 0x0E	; 14
    2312:	b0 e0       	ldi	r27, 0x00	; 0
    2314:	ee e8       	ldi	r30, 0x8E	; 142
    2316:	f1 e1       	ldi	r31, 0x11	; 17
    2318:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__prologue_saves__+0x1c>
    231c:	0d 89       	ldd	r16, Y+21	; 0x15
    231e:	1e 89       	ldd	r17, Y+22	; 0x16
    2320:	8f 89       	ldd	r24, Y+23	; 0x17
    2322:	98 8d       	ldd	r25, Y+24	; 0x18
    2324:	26 e0       	ldi	r18, 0x06	; 6
    2326:	2c 83       	std	Y+4, r18	; 0x04
    2328:	1a 83       	std	Y+2, r17	; 0x02
    232a:	09 83       	std	Y+1, r16	; 0x01
    232c:	97 ff       	sbrs	r25, 7
    232e:	02 c0       	rjmp	.+4      	; 0x2334 <snprintf+0x24>
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	90 e8       	ldi	r25, 0x80	; 128
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	9e 83       	std	Y+6, r25	; 0x06
    2338:	8d 83       	std	Y+5, r24	; 0x05
    233a:	ae 01       	movw	r20, r28
    233c:	45 5e       	subi	r20, 0xE5	; 229
    233e:	5f 4f       	sbci	r21, 0xFF	; 255
    2340:	ce 01       	movw	r24, r28
    2342:	01 96       	adiw	r24, 0x01	; 1
    2344:	69 8d       	ldd	r22, Y+25	; 0x19
    2346:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2348:	0e 94 da 11 	call	0x23b4	; 0x23b4 <vfprintf>
    234c:	4d 81       	ldd	r20, Y+5	; 0x05
    234e:	5e 81       	ldd	r21, Y+6	; 0x06
    2350:	57 fd       	sbrc	r21, 7
    2352:	0a c0       	rjmp	.+20     	; 0x2368 <snprintf+0x58>
    2354:	2f 81       	ldd	r18, Y+7	; 0x07
    2356:	38 85       	ldd	r19, Y+8	; 0x08
    2358:	42 17       	cp	r20, r18
    235a:	53 07       	cpc	r21, r19
    235c:	0c f4       	brge	.+2      	; 0x2360 <snprintf+0x50>
    235e:	9a 01       	movw	r18, r20
    2360:	02 0f       	add	r16, r18
    2362:	13 1f       	adc	r17, r19
    2364:	f8 01       	movw	r30, r16
    2366:	10 82       	st	Z, r1
    2368:	2e 96       	adiw	r28, 0x0e	; 14
    236a:	e4 e0       	ldi	r30, 0x04	; 4
    236c:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__epilogue_restores__+0x1c>

00002370 <sprintf>:
    2370:	ae e0       	ldi	r26, 0x0E	; 14
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	ee eb       	ldi	r30, 0xBE	; 190
    2376:	f1 e1       	ldi	r31, 0x11	; 17
    2378:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__prologue_saves__+0x1c>
    237c:	0d 89       	ldd	r16, Y+21	; 0x15
    237e:	1e 89       	ldd	r17, Y+22	; 0x16
    2380:	86 e0       	ldi	r24, 0x06	; 6
    2382:	8c 83       	std	Y+4, r24	; 0x04
    2384:	1a 83       	std	Y+2, r17	; 0x02
    2386:	09 83       	std	Y+1, r16	; 0x01
    2388:	8f ef       	ldi	r24, 0xFF	; 255
    238a:	9f e7       	ldi	r25, 0x7F	; 127
    238c:	9e 83       	std	Y+6, r25	; 0x06
    238e:	8d 83       	std	Y+5, r24	; 0x05
    2390:	ae 01       	movw	r20, r28
    2392:	47 5e       	subi	r20, 0xE7	; 231
    2394:	5f 4f       	sbci	r21, 0xFF	; 255
    2396:	ce 01       	movw	r24, r28
    2398:	01 96       	adiw	r24, 0x01	; 1
    239a:	6f 89       	ldd	r22, Y+23	; 0x17
    239c:	78 8d       	ldd	r23, Y+24	; 0x18
    239e:	0e 94 da 11 	call	0x23b4	; 0x23b4 <vfprintf>
    23a2:	ef 81       	ldd	r30, Y+7	; 0x07
    23a4:	f8 85       	ldd	r31, Y+8	; 0x08
    23a6:	e0 0f       	add	r30, r16
    23a8:	f1 1f       	adc	r31, r17
    23aa:	10 82       	st	Z, r1
    23ac:	2e 96       	adiw	r28, 0x0e	; 14
    23ae:	e4 e0       	ldi	r30, 0x04	; 4
    23b0:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__epilogue_restores__+0x1c>

000023b4 <vfprintf>:
    23b4:	ad e0       	ldi	r26, 0x0D	; 13
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	e0 ee       	ldi	r30, 0xE0	; 224
    23ba:	f1 e1       	ldi	r31, 0x11	; 17
    23bc:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__prologue_saves__>
    23c0:	3c 01       	movw	r6, r24
    23c2:	7d 87       	std	Y+13, r23	; 0x0d
    23c4:	6c 87       	std	Y+12, r22	; 0x0c
    23c6:	5a 01       	movw	r10, r20
    23c8:	fc 01       	movw	r30, r24
    23ca:	17 82       	std	Z+7, r1	; 0x07
    23cc:	16 82       	std	Z+6, r1	; 0x06
    23ce:	83 81       	ldd	r24, Z+3	; 0x03
    23d0:	81 ff       	sbrs	r24, 1
    23d2:	c8 c1       	rjmp	.+912    	; 0x2764 <vfprintf+0x3b0>
    23d4:	2e 01       	movw	r4, r28
    23d6:	08 94       	sec
    23d8:	41 1c       	adc	r4, r1
    23da:	51 1c       	adc	r5, r1
    23dc:	f3 01       	movw	r30, r6
    23de:	93 81       	ldd	r25, Z+3	; 0x03
    23e0:	ec 85       	ldd	r30, Y+12	; 0x0c
    23e2:	fd 85       	ldd	r31, Y+13	; 0x0d
    23e4:	93 fd       	sbrc	r25, 3
    23e6:	85 91       	lpm	r24, Z+
    23e8:	93 ff       	sbrs	r25, 3
    23ea:	81 91       	ld	r24, Z+
    23ec:	fd 87       	std	Y+13, r31	; 0x0d
    23ee:	ec 87       	std	Y+12, r30	; 0x0c
    23f0:	88 23       	and	r24, r24
    23f2:	09 f4       	brne	.+2      	; 0x23f6 <vfprintf+0x42>
    23f4:	b3 c1       	rjmp	.+870    	; 0x275c <vfprintf+0x3a8>
    23f6:	85 32       	cpi	r24, 0x25	; 37
    23f8:	41 f4       	brne	.+16     	; 0x240a <vfprintf+0x56>
    23fa:	93 fd       	sbrc	r25, 3
    23fc:	85 91       	lpm	r24, Z+
    23fe:	93 ff       	sbrs	r25, 3
    2400:	81 91       	ld	r24, Z+
    2402:	fd 87       	std	Y+13, r31	; 0x0d
    2404:	ec 87       	std	Y+12, r30	; 0x0c
    2406:	85 32       	cpi	r24, 0x25	; 37
    2408:	29 f4       	brne	.+10     	; 0x2414 <vfprintf+0x60>
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	b3 01       	movw	r22, r6
    240e:	0e 94 ce 13 	call	0x279c	; 0x279c <fputc>
    2412:	e4 cf       	rjmp	.-56     	; 0x23dc <vfprintf+0x28>
    2414:	ff 24       	eor	r15, r15
    2416:	ee 24       	eor	r14, r14
    2418:	10 e0       	ldi	r17, 0x00	; 0
    241a:	10 32       	cpi	r17, 0x20	; 32
    241c:	b0 f4       	brcc	.+44     	; 0x244a <vfprintf+0x96>
    241e:	8b 32       	cpi	r24, 0x2B	; 43
    2420:	69 f0       	breq	.+26     	; 0x243c <vfprintf+0x88>
    2422:	8c 32       	cpi	r24, 0x2C	; 44
    2424:	28 f4       	brcc	.+10     	; 0x2430 <vfprintf+0x7c>
    2426:	80 32       	cpi	r24, 0x20	; 32
    2428:	51 f0       	breq	.+20     	; 0x243e <vfprintf+0x8a>
    242a:	83 32       	cpi	r24, 0x23	; 35
    242c:	71 f4       	brne	.+28     	; 0x244a <vfprintf+0x96>
    242e:	0b c0       	rjmp	.+22     	; 0x2446 <vfprintf+0x92>
    2430:	8d 32       	cpi	r24, 0x2D	; 45
    2432:	39 f0       	breq	.+14     	; 0x2442 <vfprintf+0x8e>
    2434:	80 33       	cpi	r24, 0x30	; 48
    2436:	49 f4       	brne	.+18     	; 0x244a <vfprintf+0x96>
    2438:	11 60       	ori	r17, 0x01	; 1
    243a:	2c c0       	rjmp	.+88     	; 0x2494 <vfprintf+0xe0>
    243c:	12 60       	ori	r17, 0x02	; 2
    243e:	14 60       	ori	r17, 0x04	; 4
    2440:	29 c0       	rjmp	.+82     	; 0x2494 <vfprintf+0xe0>
    2442:	18 60       	ori	r17, 0x08	; 8
    2444:	27 c0       	rjmp	.+78     	; 0x2494 <vfprintf+0xe0>
    2446:	10 61       	ori	r17, 0x10	; 16
    2448:	25 c0       	rjmp	.+74     	; 0x2494 <vfprintf+0xe0>
    244a:	17 fd       	sbrc	r17, 7
    244c:	2e c0       	rjmp	.+92     	; 0x24aa <vfprintf+0xf6>
    244e:	28 2f       	mov	r18, r24
    2450:	20 53       	subi	r18, 0x30	; 48
    2452:	2a 30       	cpi	r18, 0x0A	; 10
    2454:	98 f4       	brcc	.+38     	; 0x247c <vfprintf+0xc8>
    2456:	16 ff       	sbrs	r17, 6
    2458:	08 c0       	rjmp	.+16     	; 0x246a <vfprintf+0xb6>
    245a:	8f 2d       	mov	r24, r15
    245c:	88 0f       	add	r24, r24
    245e:	f8 2e       	mov	r15, r24
    2460:	ff 0c       	add	r15, r15
    2462:	ff 0c       	add	r15, r15
    2464:	f8 0e       	add	r15, r24
    2466:	f2 0e       	add	r15, r18
    2468:	15 c0       	rjmp	.+42     	; 0x2494 <vfprintf+0xe0>
    246a:	8e 2d       	mov	r24, r14
    246c:	88 0f       	add	r24, r24
    246e:	e8 2e       	mov	r14, r24
    2470:	ee 0c       	add	r14, r14
    2472:	ee 0c       	add	r14, r14
    2474:	e8 0e       	add	r14, r24
    2476:	e2 0e       	add	r14, r18
    2478:	10 62       	ori	r17, 0x20	; 32
    247a:	0c c0       	rjmp	.+24     	; 0x2494 <vfprintf+0xe0>
    247c:	8e 32       	cpi	r24, 0x2E	; 46
    247e:	21 f4       	brne	.+8      	; 0x2488 <vfprintf+0xd4>
    2480:	16 fd       	sbrc	r17, 6
    2482:	6c c1       	rjmp	.+728    	; 0x275c <vfprintf+0x3a8>
    2484:	10 64       	ori	r17, 0x40	; 64
    2486:	06 c0       	rjmp	.+12     	; 0x2494 <vfprintf+0xe0>
    2488:	8c 36       	cpi	r24, 0x6C	; 108
    248a:	11 f4       	brne	.+4      	; 0x2490 <vfprintf+0xdc>
    248c:	10 68       	ori	r17, 0x80	; 128
    248e:	02 c0       	rjmp	.+4      	; 0x2494 <vfprintf+0xe0>
    2490:	88 36       	cpi	r24, 0x68	; 104
    2492:	59 f4       	brne	.+22     	; 0x24aa <vfprintf+0xf6>
    2494:	ec 85       	ldd	r30, Y+12	; 0x0c
    2496:	fd 85       	ldd	r31, Y+13	; 0x0d
    2498:	93 fd       	sbrc	r25, 3
    249a:	85 91       	lpm	r24, Z+
    249c:	93 ff       	sbrs	r25, 3
    249e:	81 91       	ld	r24, Z+
    24a0:	fd 87       	std	Y+13, r31	; 0x0d
    24a2:	ec 87       	std	Y+12, r30	; 0x0c
    24a4:	88 23       	and	r24, r24
    24a6:	09 f0       	breq	.+2      	; 0x24aa <vfprintf+0xf6>
    24a8:	b8 cf       	rjmp	.-144    	; 0x241a <vfprintf+0x66>
    24aa:	98 2f       	mov	r25, r24
    24ac:	95 54       	subi	r25, 0x45	; 69
    24ae:	93 30       	cpi	r25, 0x03	; 3
    24b0:	18 f0       	brcs	.+6      	; 0x24b8 <vfprintf+0x104>
    24b2:	90 52       	subi	r25, 0x20	; 32
    24b4:	93 30       	cpi	r25, 0x03	; 3
    24b6:	38 f4       	brcc	.+14     	; 0x24c6 <vfprintf+0x112>
    24b8:	24 e0       	ldi	r18, 0x04	; 4
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	a2 0e       	add	r10, r18
    24be:	b3 1e       	adc	r11, r19
    24c0:	3f e3       	ldi	r19, 0x3F	; 63
    24c2:	39 83       	std	Y+1, r19	; 0x01
    24c4:	0f c0       	rjmp	.+30     	; 0x24e4 <vfprintf+0x130>
    24c6:	83 36       	cpi	r24, 0x63	; 99
    24c8:	31 f0       	breq	.+12     	; 0x24d6 <vfprintf+0x122>
    24ca:	83 37       	cpi	r24, 0x73	; 115
    24cc:	81 f0       	breq	.+32     	; 0x24ee <vfprintf+0x13a>
    24ce:	83 35       	cpi	r24, 0x53	; 83
    24d0:	09 f0       	breq	.+2      	; 0x24d4 <vfprintf+0x120>
    24d2:	5a c0       	rjmp	.+180    	; 0x2588 <vfprintf+0x1d4>
    24d4:	22 c0       	rjmp	.+68     	; 0x251a <vfprintf+0x166>
    24d6:	f5 01       	movw	r30, r10
    24d8:	80 81       	ld	r24, Z
    24da:	89 83       	std	Y+1, r24	; 0x01
    24dc:	22 e0       	ldi	r18, 0x02	; 2
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	a2 0e       	add	r10, r18
    24e2:	b3 1e       	adc	r11, r19
    24e4:	21 e0       	ldi	r18, 0x01	; 1
    24e6:	c2 2e       	mov	r12, r18
    24e8:	d1 2c       	mov	r13, r1
    24ea:	42 01       	movw	r8, r4
    24ec:	14 c0       	rjmp	.+40     	; 0x2516 <vfprintf+0x162>
    24ee:	92 e0       	ldi	r25, 0x02	; 2
    24f0:	29 2e       	mov	r2, r25
    24f2:	31 2c       	mov	r3, r1
    24f4:	2a 0c       	add	r2, r10
    24f6:	3b 1c       	adc	r3, r11
    24f8:	f5 01       	movw	r30, r10
    24fa:	80 80       	ld	r8, Z
    24fc:	91 80       	ldd	r9, Z+1	; 0x01
    24fe:	16 ff       	sbrs	r17, 6
    2500:	03 c0       	rjmp	.+6      	; 0x2508 <vfprintf+0x154>
    2502:	6f 2d       	mov	r22, r15
    2504:	70 e0       	ldi	r23, 0x00	; 0
    2506:	02 c0       	rjmp	.+4      	; 0x250c <vfprintf+0x158>
    2508:	6f ef       	ldi	r22, 0xFF	; 255
    250a:	7f ef       	ldi	r23, 0xFF	; 255
    250c:	c4 01       	movw	r24, r8
    250e:	0e 94 c3 13 	call	0x2786	; 0x2786 <strnlen>
    2512:	6c 01       	movw	r12, r24
    2514:	51 01       	movw	r10, r2
    2516:	1f 77       	andi	r17, 0x7F	; 127
    2518:	15 c0       	rjmp	.+42     	; 0x2544 <vfprintf+0x190>
    251a:	82 e0       	ldi	r24, 0x02	; 2
    251c:	28 2e       	mov	r2, r24
    251e:	31 2c       	mov	r3, r1
    2520:	2a 0c       	add	r2, r10
    2522:	3b 1c       	adc	r3, r11
    2524:	f5 01       	movw	r30, r10
    2526:	80 80       	ld	r8, Z
    2528:	91 80       	ldd	r9, Z+1	; 0x01
    252a:	16 ff       	sbrs	r17, 6
    252c:	03 c0       	rjmp	.+6      	; 0x2534 <vfprintf+0x180>
    252e:	6f 2d       	mov	r22, r15
    2530:	70 e0       	ldi	r23, 0x00	; 0
    2532:	02 c0       	rjmp	.+4      	; 0x2538 <vfprintf+0x184>
    2534:	6f ef       	ldi	r22, 0xFF	; 255
    2536:	7f ef       	ldi	r23, 0xFF	; 255
    2538:	c4 01       	movw	r24, r8
    253a:	0e 94 b8 13 	call	0x2770	; 0x2770 <strnlen_P>
    253e:	6c 01       	movw	r12, r24
    2540:	10 68       	ori	r17, 0x80	; 128
    2542:	51 01       	movw	r10, r2
    2544:	13 fd       	sbrc	r17, 3
    2546:	1c c0       	rjmp	.+56     	; 0x2580 <vfprintf+0x1cc>
    2548:	06 c0       	rjmp	.+12     	; 0x2556 <vfprintf+0x1a2>
    254a:	80 e2       	ldi	r24, 0x20	; 32
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	b3 01       	movw	r22, r6
    2550:	0e 94 ce 13 	call	0x279c	; 0x279c <fputc>
    2554:	ea 94       	dec	r14
    2556:	8e 2d       	mov	r24, r14
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	c8 16       	cp	r12, r24
    255c:	d9 06       	cpc	r13, r25
    255e:	a8 f3       	brcs	.-22     	; 0x254a <vfprintf+0x196>
    2560:	0f c0       	rjmp	.+30     	; 0x2580 <vfprintf+0x1cc>
    2562:	f4 01       	movw	r30, r8
    2564:	17 fd       	sbrc	r17, 7
    2566:	85 91       	lpm	r24, Z+
    2568:	17 ff       	sbrs	r17, 7
    256a:	81 91       	ld	r24, Z+
    256c:	4f 01       	movw	r8, r30
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	b3 01       	movw	r22, r6
    2572:	0e 94 ce 13 	call	0x279c	; 0x279c <fputc>
    2576:	e1 10       	cpse	r14, r1
    2578:	ea 94       	dec	r14
    257a:	08 94       	sec
    257c:	c1 08       	sbc	r12, r1
    257e:	d1 08       	sbc	r13, r1
    2580:	c1 14       	cp	r12, r1
    2582:	d1 04       	cpc	r13, r1
    2584:	71 f7       	brne	.-36     	; 0x2562 <vfprintf+0x1ae>
    2586:	e7 c0       	rjmp	.+462    	; 0x2756 <vfprintf+0x3a2>
    2588:	84 36       	cpi	r24, 0x64	; 100
    258a:	11 f0       	breq	.+4      	; 0x2590 <vfprintf+0x1dc>
    258c:	89 36       	cpi	r24, 0x69	; 105
    258e:	51 f5       	brne	.+84     	; 0x25e4 <vfprintf+0x230>
    2590:	f5 01       	movw	r30, r10
    2592:	17 ff       	sbrs	r17, 7
    2594:	07 c0       	rjmp	.+14     	; 0x25a4 <vfprintf+0x1f0>
    2596:	80 81       	ld	r24, Z
    2598:	91 81       	ldd	r25, Z+1	; 0x01
    259a:	a2 81       	ldd	r26, Z+2	; 0x02
    259c:	b3 81       	ldd	r27, Z+3	; 0x03
    259e:	24 e0       	ldi	r18, 0x04	; 4
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	08 c0       	rjmp	.+16     	; 0x25b4 <vfprintf+0x200>
    25a4:	80 81       	ld	r24, Z
    25a6:	91 81       	ldd	r25, Z+1	; 0x01
    25a8:	aa 27       	eor	r26, r26
    25aa:	97 fd       	sbrc	r25, 7
    25ac:	a0 95       	com	r26
    25ae:	ba 2f       	mov	r27, r26
    25b0:	22 e0       	ldi	r18, 0x02	; 2
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	a2 0e       	add	r10, r18
    25b6:	b3 1e       	adc	r11, r19
    25b8:	01 2f       	mov	r16, r17
    25ba:	0f 76       	andi	r16, 0x6F	; 111
    25bc:	b7 ff       	sbrs	r27, 7
    25be:	08 c0       	rjmp	.+16     	; 0x25d0 <vfprintf+0x21c>
    25c0:	b0 95       	com	r27
    25c2:	a0 95       	com	r26
    25c4:	90 95       	com	r25
    25c6:	81 95       	neg	r24
    25c8:	9f 4f       	sbci	r25, 0xFF	; 255
    25ca:	af 4f       	sbci	r26, 0xFF	; 255
    25cc:	bf 4f       	sbci	r27, 0xFF	; 255
    25ce:	00 68       	ori	r16, 0x80	; 128
    25d0:	bc 01       	movw	r22, r24
    25d2:	cd 01       	movw	r24, r26
    25d4:	a2 01       	movw	r20, r4
    25d6:	2a e0       	ldi	r18, 0x0A	; 10
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <__ultoa_invert>
    25de:	d8 2e       	mov	r13, r24
    25e0:	d4 18       	sub	r13, r4
    25e2:	3f c0       	rjmp	.+126    	; 0x2662 <vfprintf+0x2ae>
    25e4:	85 37       	cpi	r24, 0x75	; 117
    25e6:	21 f4       	brne	.+8      	; 0x25f0 <vfprintf+0x23c>
    25e8:	1f 7e       	andi	r17, 0xEF	; 239
    25ea:	2a e0       	ldi	r18, 0x0A	; 10
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	20 c0       	rjmp	.+64     	; 0x2630 <vfprintf+0x27c>
    25f0:	19 7f       	andi	r17, 0xF9	; 249
    25f2:	8f 36       	cpi	r24, 0x6F	; 111
    25f4:	a9 f0       	breq	.+42     	; 0x2620 <vfprintf+0x26c>
    25f6:	80 37       	cpi	r24, 0x70	; 112
    25f8:	20 f4       	brcc	.+8      	; 0x2602 <vfprintf+0x24e>
    25fa:	88 35       	cpi	r24, 0x58	; 88
    25fc:	09 f0       	breq	.+2      	; 0x2600 <vfprintf+0x24c>
    25fe:	ae c0       	rjmp	.+348    	; 0x275c <vfprintf+0x3a8>
    2600:	0b c0       	rjmp	.+22     	; 0x2618 <vfprintf+0x264>
    2602:	80 37       	cpi	r24, 0x70	; 112
    2604:	21 f0       	breq	.+8      	; 0x260e <vfprintf+0x25a>
    2606:	88 37       	cpi	r24, 0x78	; 120
    2608:	09 f0       	breq	.+2      	; 0x260c <vfprintf+0x258>
    260a:	a8 c0       	rjmp	.+336    	; 0x275c <vfprintf+0x3a8>
    260c:	01 c0       	rjmp	.+2      	; 0x2610 <vfprintf+0x25c>
    260e:	10 61       	ori	r17, 0x10	; 16
    2610:	14 ff       	sbrs	r17, 4
    2612:	09 c0       	rjmp	.+18     	; 0x2626 <vfprintf+0x272>
    2614:	14 60       	ori	r17, 0x04	; 4
    2616:	07 c0       	rjmp	.+14     	; 0x2626 <vfprintf+0x272>
    2618:	14 ff       	sbrs	r17, 4
    261a:	08 c0       	rjmp	.+16     	; 0x262c <vfprintf+0x278>
    261c:	16 60       	ori	r17, 0x06	; 6
    261e:	06 c0       	rjmp	.+12     	; 0x262c <vfprintf+0x278>
    2620:	28 e0       	ldi	r18, 0x08	; 8
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	05 c0       	rjmp	.+10     	; 0x2630 <vfprintf+0x27c>
    2626:	20 e1       	ldi	r18, 0x10	; 16
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	02 c0       	rjmp	.+4      	; 0x2630 <vfprintf+0x27c>
    262c:	20 e1       	ldi	r18, 0x10	; 16
    262e:	32 e0       	ldi	r19, 0x02	; 2
    2630:	f5 01       	movw	r30, r10
    2632:	17 ff       	sbrs	r17, 7
    2634:	07 c0       	rjmp	.+14     	; 0x2644 <vfprintf+0x290>
    2636:	60 81       	ld	r22, Z
    2638:	71 81       	ldd	r23, Z+1	; 0x01
    263a:	82 81       	ldd	r24, Z+2	; 0x02
    263c:	93 81       	ldd	r25, Z+3	; 0x03
    263e:	44 e0       	ldi	r20, 0x04	; 4
    2640:	50 e0       	ldi	r21, 0x00	; 0
    2642:	06 c0       	rjmp	.+12     	; 0x2650 <vfprintf+0x29c>
    2644:	60 81       	ld	r22, Z
    2646:	71 81       	ldd	r23, Z+1	; 0x01
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	42 e0       	ldi	r20, 0x02	; 2
    264e:	50 e0       	ldi	r21, 0x00	; 0
    2650:	a4 0e       	add	r10, r20
    2652:	b5 1e       	adc	r11, r21
    2654:	a2 01       	movw	r20, r4
    2656:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <__ultoa_invert>
    265a:	d8 2e       	mov	r13, r24
    265c:	d4 18       	sub	r13, r4
    265e:	01 2f       	mov	r16, r17
    2660:	0f 77       	andi	r16, 0x7F	; 127
    2662:	06 ff       	sbrs	r16, 6
    2664:	09 c0       	rjmp	.+18     	; 0x2678 <vfprintf+0x2c4>
    2666:	0e 7f       	andi	r16, 0xFE	; 254
    2668:	df 14       	cp	r13, r15
    266a:	30 f4       	brcc	.+12     	; 0x2678 <vfprintf+0x2c4>
    266c:	04 ff       	sbrs	r16, 4
    266e:	06 c0       	rjmp	.+12     	; 0x267c <vfprintf+0x2c8>
    2670:	02 fd       	sbrc	r16, 2
    2672:	04 c0       	rjmp	.+8      	; 0x267c <vfprintf+0x2c8>
    2674:	0f 7e       	andi	r16, 0xEF	; 239
    2676:	02 c0       	rjmp	.+4      	; 0x267c <vfprintf+0x2c8>
    2678:	1d 2d       	mov	r17, r13
    267a:	01 c0       	rjmp	.+2      	; 0x267e <vfprintf+0x2ca>
    267c:	1f 2d       	mov	r17, r15
    267e:	80 2f       	mov	r24, r16
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	04 ff       	sbrs	r16, 4
    2684:	0c c0       	rjmp	.+24     	; 0x269e <vfprintf+0x2ea>
    2686:	fe 01       	movw	r30, r28
    2688:	ed 0d       	add	r30, r13
    268a:	f1 1d       	adc	r31, r1
    268c:	20 81       	ld	r18, Z
    268e:	20 33       	cpi	r18, 0x30	; 48
    2690:	11 f4       	brne	.+4      	; 0x2696 <vfprintf+0x2e2>
    2692:	09 7e       	andi	r16, 0xE9	; 233
    2694:	09 c0       	rjmp	.+18     	; 0x26a8 <vfprintf+0x2f4>
    2696:	02 ff       	sbrs	r16, 2
    2698:	06 c0       	rjmp	.+12     	; 0x26a6 <vfprintf+0x2f2>
    269a:	1e 5f       	subi	r17, 0xFE	; 254
    269c:	05 c0       	rjmp	.+10     	; 0x26a8 <vfprintf+0x2f4>
    269e:	86 78       	andi	r24, 0x86	; 134
    26a0:	90 70       	andi	r25, 0x00	; 0
    26a2:	00 97       	sbiw	r24, 0x00	; 0
    26a4:	09 f0       	breq	.+2      	; 0x26a8 <vfprintf+0x2f4>
    26a6:	1f 5f       	subi	r17, 0xFF	; 255
    26a8:	80 2e       	mov	r8, r16
    26aa:	99 24       	eor	r9, r9
    26ac:	03 fd       	sbrc	r16, 3
    26ae:	12 c0       	rjmp	.+36     	; 0x26d4 <vfprintf+0x320>
    26b0:	00 ff       	sbrs	r16, 0
    26b2:	0d c0       	rjmp	.+26     	; 0x26ce <vfprintf+0x31a>
    26b4:	fd 2c       	mov	r15, r13
    26b6:	1e 15       	cp	r17, r14
    26b8:	50 f4       	brcc	.+20     	; 0x26ce <vfprintf+0x31a>
    26ba:	fe 0c       	add	r15, r14
    26bc:	f1 1a       	sub	r15, r17
    26be:	1e 2d       	mov	r17, r14
    26c0:	06 c0       	rjmp	.+12     	; 0x26ce <vfprintf+0x31a>
    26c2:	80 e2       	ldi	r24, 0x20	; 32
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	b3 01       	movw	r22, r6
    26c8:	0e 94 ce 13 	call	0x279c	; 0x279c <fputc>
    26cc:	1f 5f       	subi	r17, 0xFF	; 255
    26ce:	1e 15       	cp	r17, r14
    26d0:	c0 f3       	brcs	.-16     	; 0x26c2 <vfprintf+0x30e>
    26d2:	04 c0       	rjmp	.+8      	; 0x26dc <vfprintf+0x328>
    26d4:	1e 15       	cp	r17, r14
    26d6:	10 f4       	brcc	.+4      	; 0x26dc <vfprintf+0x328>
    26d8:	e1 1a       	sub	r14, r17
    26da:	01 c0       	rjmp	.+2      	; 0x26de <vfprintf+0x32a>
    26dc:	ee 24       	eor	r14, r14
    26de:	84 fe       	sbrs	r8, 4
    26e0:	0f c0       	rjmp	.+30     	; 0x2700 <vfprintf+0x34c>
    26e2:	80 e3       	ldi	r24, 0x30	; 48
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	b3 01       	movw	r22, r6
    26e8:	0e 94 ce 13 	call	0x279c	; 0x279c <fputc>
    26ec:	82 fe       	sbrs	r8, 2
    26ee:	1f c0       	rjmp	.+62     	; 0x272e <vfprintf+0x37a>
    26f0:	81 fe       	sbrs	r8, 1
    26f2:	03 c0       	rjmp	.+6      	; 0x26fa <vfprintf+0x346>
    26f4:	88 e5       	ldi	r24, 0x58	; 88
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	10 c0       	rjmp	.+32     	; 0x271a <vfprintf+0x366>
    26fa:	88 e7       	ldi	r24, 0x78	; 120
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	0d c0       	rjmp	.+26     	; 0x271a <vfprintf+0x366>
    2700:	c4 01       	movw	r24, r8
    2702:	86 78       	andi	r24, 0x86	; 134
    2704:	90 70       	andi	r25, 0x00	; 0
    2706:	00 97       	sbiw	r24, 0x00	; 0
    2708:	91 f0       	breq	.+36     	; 0x272e <vfprintf+0x37a>
    270a:	81 fc       	sbrc	r8, 1
    270c:	02 c0       	rjmp	.+4      	; 0x2712 <vfprintf+0x35e>
    270e:	80 e2       	ldi	r24, 0x20	; 32
    2710:	01 c0       	rjmp	.+2      	; 0x2714 <vfprintf+0x360>
    2712:	8b e2       	ldi	r24, 0x2B	; 43
    2714:	07 fd       	sbrc	r16, 7
    2716:	8d e2       	ldi	r24, 0x2D	; 45
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	b3 01       	movw	r22, r6
    271c:	0e 94 ce 13 	call	0x279c	; 0x279c <fputc>
    2720:	06 c0       	rjmp	.+12     	; 0x272e <vfprintf+0x37a>
    2722:	80 e3       	ldi	r24, 0x30	; 48
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	b3 01       	movw	r22, r6
    2728:	0e 94 ce 13 	call	0x279c	; 0x279c <fputc>
    272c:	fa 94       	dec	r15
    272e:	df 14       	cp	r13, r15
    2730:	c0 f3       	brcs	.-16     	; 0x2722 <vfprintf+0x36e>
    2732:	da 94       	dec	r13
    2734:	f2 01       	movw	r30, r4
    2736:	ed 0d       	add	r30, r13
    2738:	f1 1d       	adc	r31, r1
    273a:	80 81       	ld	r24, Z
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	b3 01       	movw	r22, r6
    2740:	0e 94 ce 13 	call	0x279c	; 0x279c <fputc>
    2744:	dd 20       	and	r13, r13
    2746:	a9 f7       	brne	.-22     	; 0x2732 <vfprintf+0x37e>
    2748:	06 c0       	rjmp	.+12     	; 0x2756 <vfprintf+0x3a2>
    274a:	80 e2       	ldi	r24, 0x20	; 32
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	b3 01       	movw	r22, r6
    2750:	0e 94 ce 13 	call	0x279c	; 0x279c <fputc>
    2754:	ea 94       	dec	r14
    2756:	ee 20       	and	r14, r14
    2758:	c1 f7       	brne	.-16     	; 0x274a <vfprintf+0x396>
    275a:	40 ce       	rjmp	.-896    	; 0x23dc <vfprintf+0x28>
    275c:	f3 01       	movw	r30, r6
    275e:	86 81       	ldd	r24, Z+6	; 0x06
    2760:	97 81       	ldd	r25, Z+7	; 0x07
    2762:	02 c0       	rjmp	.+4      	; 0x2768 <vfprintf+0x3b4>
    2764:	8f ef       	ldi	r24, 0xFF	; 255
    2766:	9f ef       	ldi	r25, 0xFF	; 255
    2768:	2d 96       	adiw	r28, 0x0d	; 13
    276a:	e2 e1       	ldi	r30, 0x12	; 18
    276c:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__epilogue_restores__>

00002770 <strnlen_P>:
    2770:	fc 01       	movw	r30, r24
    2772:	05 90       	lpm	r0, Z+
    2774:	61 50       	subi	r22, 0x01	; 1
    2776:	70 40       	sbci	r23, 0x00	; 0
    2778:	01 10       	cpse	r0, r1
    277a:	d8 f7       	brcc	.-10     	; 0x2772 <strnlen_P+0x2>
    277c:	80 95       	com	r24
    277e:	90 95       	com	r25
    2780:	8e 0f       	add	r24, r30
    2782:	9f 1f       	adc	r25, r31
    2784:	08 95       	ret

00002786 <strnlen>:
    2786:	fc 01       	movw	r30, r24
    2788:	61 50       	subi	r22, 0x01	; 1
    278a:	70 40       	sbci	r23, 0x00	; 0
    278c:	01 90       	ld	r0, Z+
    278e:	01 10       	cpse	r0, r1
    2790:	d8 f7       	brcc	.-10     	; 0x2788 <strnlen+0x2>
    2792:	80 95       	com	r24
    2794:	90 95       	com	r25
    2796:	8e 0f       	add	r24, r30
    2798:	9f 1f       	adc	r25, r31
    279a:	08 95       	ret

0000279c <fputc>:
    279c:	0f 93       	push	r16
    279e:	1f 93       	push	r17
    27a0:	cf 93       	push	r28
    27a2:	df 93       	push	r29
    27a4:	8c 01       	movw	r16, r24
    27a6:	eb 01       	movw	r28, r22
    27a8:	8b 81       	ldd	r24, Y+3	; 0x03
    27aa:	81 ff       	sbrs	r24, 1
    27ac:	1b c0       	rjmp	.+54     	; 0x27e4 <fputc+0x48>
    27ae:	82 ff       	sbrs	r24, 2
    27b0:	0d c0       	rjmp	.+26     	; 0x27cc <fputc+0x30>
    27b2:	2e 81       	ldd	r18, Y+6	; 0x06
    27b4:	3f 81       	ldd	r19, Y+7	; 0x07
    27b6:	8c 81       	ldd	r24, Y+4	; 0x04
    27b8:	9d 81       	ldd	r25, Y+5	; 0x05
    27ba:	28 17       	cp	r18, r24
    27bc:	39 07       	cpc	r19, r25
    27be:	64 f4       	brge	.+24     	; 0x27d8 <fputc+0x3c>
    27c0:	e8 81       	ld	r30, Y
    27c2:	f9 81       	ldd	r31, Y+1	; 0x01
    27c4:	01 93       	st	Z+, r16
    27c6:	f9 83       	std	Y+1, r31	; 0x01
    27c8:	e8 83       	st	Y, r30
    27ca:	06 c0       	rjmp	.+12     	; 0x27d8 <fputc+0x3c>
    27cc:	e8 85       	ldd	r30, Y+8	; 0x08
    27ce:	f9 85       	ldd	r31, Y+9	; 0x09
    27d0:	80 2f       	mov	r24, r16
    27d2:	09 95       	icall
    27d4:	00 97       	sbiw	r24, 0x00	; 0
    27d6:	31 f4       	brne	.+12     	; 0x27e4 <fputc+0x48>
    27d8:	8e 81       	ldd	r24, Y+6	; 0x06
    27da:	9f 81       	ldd	r25, Y+7	; 0x07
    27dc:	01 96       	adiw	r24, 0x01	; 1
    27de:	9f 83       	std	Y+7, r25	; 0x07
    27e0:	8e 83       	std	Y+6, r24	; 0x06
    27e2:	02 c0       	rjmp	.+4      	; 0x27e8 <fputc+0x4c>
    27e4:	0f ef       	ldi	r16, 0xFF	; 255
    27e6:	1f ef       	ldi	r17, 0xFF	; 255
    27e8:	c8 01       	movw	r24, r16
    27ea:	df 91       	pop	r29
    27ec:	cf 91       	pop	r28
    27ee:	1f 91       	pop	r17
    27f0:	0f 91       	pop	r16
    27f2:	08 95       	ret

000027f4 <__ultoa_invert>:
    27f4:	fa 01       	movw	r30, r20
    27f6:	aa 27       	eor	r26, r26
    27f8:	28 30       	cpi	r18, 0x08	; 8
    27fa:	51 f1       	breq	.+84     	; 0x2850 <__ultoa_invert+0x5c>
    27fc:	20 31       	cpi	r18, 0x10	; 16
    27fe:	81 f1       	breq	.+96     	; 0x2860 <__ultoa_invert+0x6c>
    2800:	e8 94       	clt
    2802:	6f 93       	push	r22
    2804:	6e 7f       	andi	r22, 0xFE	; 254
    2806:	6e 5f       	subi	r22, 0xFE	; 254
    2808:	7f 4f       	sbci	r23, 0xFF	; 255
    280a:	8f 4f       	sbci	r24, 0xFF	; 255
    280c:	9f 4f       	sbci	r25, 0xFF	; 255
    280e:	af 4f       	sbci	r26, 0xFF	; 255
    2810:	b1 e0       	ldi	r27, 0x01	; 1
    2812:	3e d0       	rcall	.+124    	; 0x2890 <__ultoa_invert+0x9c>
    2814:	b4 e0       	ldi	r27, 0x04	; 4
    2816:	3c d0       	rcall	.+120    	; 0x2890 <__ultoa_invert+0x9c>
    2818:	67 0f       	add	r22, r23
    281a:	78 1f       	adc	r23, r24
    281c:	89 1f       	adc	r24, r25
    281e:	9a 1f       	adc	r25, r26
    2820:	a1 1d       	adc	r26, r1
    2822:	68 0f       	add	r22, r24
    2824:	79 1f       	adc	r23, r25
    2826:	8a 1f       	adc	r24, r26
    2828:	91 1d       	adc	r25, r1
    282a:	a1 1d       	adc	r26, r1
    282c:	6a 0f       	add	r22, r26
    282e:	71 1d       	adc	r23, r1
    2830:	81 1d       	adc	r24, r1
    2832:	91 1d       	adc	r25, r1
    2834:	a1 1d       	adc	r26, r1
    2836:	20 d0       	rcall	.+64     	; 0x2878 <__ultoa_invert+0x84>
    2838:	09 f4       	brne	.+2      	; 0x283c <__ultoa_invert+0x48>
    283a:	68 94       	set
    283c:	3f 91       	pop	r19
    283e:	2a e0       	ldi	r18, 0x0A	; 10
    2840:	26 9f       	mul	r18, r22
    2842:	11 24       	eor	r1, r1
    2844:	30 19       	sub	r19, r0
    2846:	30 5d       	subi	r19, 0xD0	; 208
    2848:	31 93       	st	Z+, r19
    284a:	de f6       	brtc	.-74     	; 0x2802 <__ultoa_invert+0xe>
    284c:	cf 01       	movw	r24, r30
    284e:	08 95       	ret
    2850:	46 2f       	mov	r20, r22
    2852:	47 70       	andi	r20, 0x07	; 7
    2854:	40 5d       	subi	r20, 0xD0	; 208
    2856:	41 93       	st	Z+, r20
    2858:	b3 e0       	ldi	r27, 0x03	; 3
    285a:	0f d0       	rcall	.+30     	; 0x287a <__ultoa_invert+0x86>
    285c:	c9 f7       	brne	.-14     	; 0x2850 <__ultoa_invert+0x5c>
    285e:	f6 cf       	rjmp	.-20     	; 0x284c <__ultoa_invert+0x58>
    2860:	46 2f       	mov	r20, r22
    2862:	4f 70       	andi	r20, 0x0F	; 15
    2864:	40 5d       	subi	r20, 0xD0	; 208
    2866:	4a 33       	cpi	r20, 0x3A	; 58
    2868:	18 f0       	brcs	.+6      	; 0x2870 <__ultoa_invert+0x7c>
    286a:	49 5d       	subi	r20, 0xD9	; 217
    286c:	31 fd       	sbrc	r19, 1
    286e:	40 52       	subi	r20, 0x20	; 32
    2870:	41 93       	st	Z+, r20
    2872:	02 d0       	rcall	.+4      	; 0x2878 <__ultoa_invert+0x84>
    2874:	a9 f7       	brne	.-22     	; 0x2860 <__ultoa_invert+0x6c>
    2876:	ea cf       	rjmp	.-44     	; 0x284c <__ultoa_invert+0x58>
    2878:	b4 e0       	ldi	r27, 0x04	; 4
    287a:	a6 95       	lsr	r26
    287c:	97 95       	ror	r25
    287e:	87 95       	ror	r24
    2880:	77 95       	ror	r23
    2882:	67 95       	ror	r22
    2884:	ba 95       	dec	r27
    2886:	c9 f7       	brne	.-14     	; 0x287a <__ultoa_invert+0x86>
    2888:	00 97       	sbiw	r24, 0x00	; 0
    288a:	61 05       	cpc	r22, r1
    288c:	71 05       	cpc	r23, r1
    288e:	08 95       	ret
    2890:	9b 01       	movw	r18, r22
    2892:	ac 01       	movw	r20, r24
    2894:	0a 2e       	mov	r0, r26
    2896:	06 94       	lsr	r0
    2898:	57 95       	ror	r21
    289a:	47 95       	ror	r20
    289c:	37 95       	ror	r19
    289e:	27 95       	ror	r18
    28a0:	ba 95       	dec	r27
    28a2:	c9 f7       	brne	.-14     	; 0x2896 <__ultoa_invert+0xa2>
    28a4:	62 0f       	add	r22, r18
    28a6:	73 1f       	adc	r23, r19
    28a8:	84 1f       	adc	r24, r20
    28aa:	95 1f       	adc	r25, r21
    28ac:	a0 1d       	adc	r26, r0
    28ae:	08 95       	ret

000028b0 <__prologue_saves__>:
    28b0:	2f 92       	push	r2
    28b2:	3f 92       	push	r3
    28b4:	4f 92       	push	r4
    28b6:	5f 92       	push	r5
    28b8:	6f 92       	push	r6
    28ba:	7f 92       	push	r7
    28bc:	8f 92       	push	r8
    28be:	9f 92       	push	r9
    28c0:	af 92       	push	r10
    28c2:	bf 92       	push	r11
    28c4:	cf 92       	push	r12
    28c6:	df 92       	push	r13
    28c8:	ef 92       	push	r14
    28ca:	ff 92       	push	r15
    28cc:	0f 93       	push	r16
    28ce:	1f 93       	push	r17
    28d0:	cf 93       	push	r28
    28d2:	df 93       	push	r29
    28d4:	cd b7       	in	r28, 0x3d	; 61
    28d6:	de b7       	in	r29, 0x3e	; 62
    28d8:	ca 1b       	sub	r28, r26
    28da:	db 0b       	sbc	r29, r27
    28dc:	0f b6       	in	r0, 0x3f	; 63
    28de:	f8 94       	cli
    28e0:	de bf       	out	0x3e, r29	; 62
    28e2:	0f be       	out	0x3f, r0	; 63
    28e4:	cd bf       	out	0x3d, r28	; 61
    28e6:	09 94       	ijmp

000028e8 <__epilogue_restores__>:
    28e8:	2a 88       	ldd	r2, Y+18	; 0x12
    28ea:	39 88       	ldd	r3, Y+17	; 0x11
    28ec:	48 88       	ldd	r4, Y+16	; 0x10
    28ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    28f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    28f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    28f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    28f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    28f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    28fa:	b9 84       	ldd	r11, Y+9	; 0x09
    28fc:	c8 84       	ldd	r12, Y+8	; 0x08
    28fe:	df 80       	ldd	r13, Y+7	; 0x07
    2900:	ee 80       	ldd	r14, Y+6	; 0x06
    2902:	fd 80       	ldd	r15, Y+5	; 0x05
    2904:	0c 81       	ldd	r16, Y+4	; 0x04
    2906:	1b 81       	ldd	r17, Y+3	; 0x03
    2908:	aa 81       	ldd	r26, Y+2	; 0x02
    290a:	b9 81       	ldd	r27, Y+1	; 0x01
    290c:	ce 0f       	add	r28, r30
    290e:	d1 1d       	adc	r29, r1
    2910:	0f b6       	in	r0, 0x3f	; 63
    2912:	f8 94       	cli
    2914:	de bf       	out	0x3e, r29	; 62
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	cd bf       	out	0x3d, r28	; 61
    291a:	ed 01       	movw	r28, r26
    291c:	08 95       	ret

0000291e <_exit>:
    291e:	f8 94       	cli

00002920 <__stop_program>:
    2920:	ff cf       	rjmp	.-2      	; 0x2920 <__stop_program>
